
05_SwTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003870  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b4  20000070  08003a94  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000224  08003a94  00020224  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006d3d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a96  00000000  00000000  00026dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000850  00000000  00000000  00028870  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  000290c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000048a6  00000000  00000000  000297f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002623  00000000  00000000  0002e09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000306c1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002260  00000000  00000000  00030740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003964 	.word	0x08003964

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003964 	.word	0x08003964

0800014c <led_isr>:
 */


#include "ap.h"

void led_isr(void *arg){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  ledToggle(0);
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fbd3 	bl	8000900 <ledToggle>
  //delay(500);
  //ledOff(0);
}
 800015a:	bf00      	nop
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
	...

08000164 <apInit>:

void apInit(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af02      	add	r7, sp, #8
  uartOpen(_DEF_UART1, 115200);
 800016a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800016e:	2000      	movs	r0, #0
 8000170:	f000 fd52 	bl	8000c18 <uartOpen>
  swtimer_handle_t h_led_timer;

  h_led_timer = swtimerGetHandle();
 8000174:	f000 fd0a 	bl	8000b8c <swtimerGetHandle>
 8000178:	4603      	mov	r3, r0
 800017a:	80fb      	strh	r3, [r7, #6]
  swtimerSet(h_led_timer, 500, LOOP_TIME, led_isr, NULL);
 800017c:	88fb      	ldrh	r3, [r7, #6]
 800017e:	b2d8      	uxtb	r0, r3
 8000180:	2300      	movs	r3, #0
 8000182:	9300      	str	r3, [sp, #0]
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <apInit+0x40>)
 8000186:	2202      	movs	r2, #2
 8000188:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800018c:	f000 fc92 	bl	8000ab4 <swtimerSet>
  swtimerStart(h_led_timer);
 8000190:	88fb      	ldrh	r3, [r7, #6]
 8000192:	b2db      	uxtb	r3, r3
 8000194:	4618      	mov	r0, r3
 8000196:	f000 fccf 	bl	8000b38 <swtimerStart>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	0800014d 	.word	0x0800014d

080001a8 <apMain>:

void apMain(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  while(1){
    if(buttonGetPressedEvent(0) == true){
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fb1f 	bl	80007f0 <buttonGetPressedEvent>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <apMain+0x18>
      uartPrintf(_DEF_UART1, "PressedEvent\r\n");
 80001b8:	4916      	ldr	r1, [pc, #88]	; (8000214 <apMain+0x6c>)
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fea2 	bl	8000f04 <uartPrintf>

    }

    if(buttonGetPressed(0) == true){
 80001c0:	2000      	movs	r0, #0
 80001c2:	f000 faff 	bl	80007c4 <buttonGetPressed>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d008      	beq.n	80001de <apMain+0x36>
      uartPrintf(_DEF_UART1, "PressedTime : %d\r\n", buttonGetPressedTime(0));
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 fb35 	bl	800083c <buttonGetPressedTime>
 80001d2:	4603      	mov	r3, r0
 80001d4:	461a      	mov	r2, r3
 80001d6:	4910      	ldr	r1, [pc, #64]	; (8000218 <apMain+0x70>)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 fe93 	bl	8000f04 <uartPrintf>

    }
    if(buttonGetReleasedEvent(0) == true){
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 fb52 	bl	8000888 <buttonGetReleasedEvent>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d003      	beq.n	80001f2 <apMain+0x4a>
      uartPrintf(_DEF_UART1, "ReleasedEvent\r\n");
 80001ea:	490c      	ldr	r1, [pc, #48]	; (800021c <apMain+0x74>)
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 fe89 	bl	8000f04 <uartPrintf>

    }
    if(uartAvailable(_DEF_UART1) > 0){
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fda0 	bl	8000d38 <uartAvailable>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0d6      	beq.n	80001ac <apMain+0x4>
      uartPrintf(_DEF_UART1, "rx : 0x%X\n", uartRead(_DEF_UART1));
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 fe52 	bl	8000ea8 <uartRead>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	4905      	ldr	r1, [pc, #20]	; (8000220 <apMain+0x78>)
 800020a:	2000      	movs	r0, #0
 800020c:	f000 fe7a 	bl	8000f04 <uartPrintf>
    if(buttonGetPressedEvent(0) == true){
 8000210:	e7cc      	b.n	80001ac <apMain+0x4>
 8000212:	bf00      	nop
 8000214:	0800397c 	.word	0x0800397c
 8000218:	0800398c 	.word	0x0800398c
 800021c:	080039a0 	.word	0x080039a0
 8000220:	080039b0 	.word	0x080039b0

08000224 <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800022a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2228      	movs	r2, #40	; 0x28
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f002 ff37 	bl	80030b4 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 8000262:	2300      	movs	r3, #0
 8000264:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 8000266:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fcfc 	bl	8001c6c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d000      	beq.n	800027c <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800027c:	230f      	movs	r3, #15
 800027e:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 8000292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000296:	2102      	movs	r1, #2
 8000298:	4618      	mov	r0, r3
 800029a:	f001 ff67 	bl	800216c <HAL_RCC_ClockConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d000      	beq.n	80002a6 <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 80002a4:	e7fe      	b.n	80002a4 <SystemClock_Config+0x80>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	; 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <bspInit>:




void bspInit(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    HAL_Init();
 80002b6:	f000 ff8b 	bl	80011d0 <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 80002ba:	f7ff ffb3 	bl	8000224 <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <bspInit+0x48>)
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <bspInit+0x48>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f043 0304 	orr.w	r3, r3, #4
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <bspInit+0x48>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0304 	and.w	r3, r3, #4
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d6:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <bspInit+0x48>)
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <bspInit+0x48>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f043 0310 	orr.w	r3, r3, #16
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <bspInit+0x48>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0310 	and.w	r3, r3, #16
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	683b      	ldr	r3, [r7, #0]
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000

080002fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000300:	4a15      	ldr	r2, [pc, #84]	; (8000358 <SystemInit+0x5c>)
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <SystemInit+0x5c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800030c:	4912      	ldr	r1, [pc, #72]	; (8000358 <SystemInit+0x5c>)
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <SystemInit+0x5c>)
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <SystemInit+0x60>)
 8000314:	4013      	ands	r3, r2
 8000316:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <SystemInit+0x5c>)
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <SystemInit+0x5c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <SystemInit+0x5c>)
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <SystemInit+0x5c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000332:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000334:	4a08      	ldr	r2, [pc, #32]	; (8000358 <SystemInit+0x5c>)
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <SystemInit+0x5c>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800033e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <SystemInit+0x5c>)
 8000342:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000346:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <SystemInit+0x64>)
 800034a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800034e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000
 800035c:	f8ff0000 	.word	0xf8ff0000
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000364:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000366:	e003      	b.n	8000370 <LoopCopyDataInit>

08000368 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800036a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800036c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800036e:	3104      	adds	r1, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000374:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000376:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000378:	d3f6      	bcc.n	8000368 <CopyDataInit>
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800037c:	e002      	b.n	8000384 <LoopFillZerobss>

0800037e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000380:	f842 3b04 	str.w	r3, [r2], #4

08000384 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000386:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000388:	d3f9      	bcc.n	800037e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800038a:	f7ff ffb7 	bl	80002fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038e:	f002 fe6d 	bl	800306c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f002 fe5f 	bl	8003054 <main>
  bx lr
 8000396:	4770      	bx	lr
  ldr r3, =_sidata
 8000398:	08003a24 	.word	0x08003a24
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003a0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80003a4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80003a8:	20000224 	.word	0x20000224

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>

080003ae <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80003be:	e7fe      	b.n	80003be <HardFault_Handler+0x4>

080003c0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  Noned
  * @retval None
  */
void MemManage_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <MemManage_Handler+0x4>

080003c6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
extern void swtimerISR(void);
void SysTick_Handler(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80003fa:	f000 ff35 	bl	8001268 <HAL_IncTick>
  swtimerISR();
 80003fe:	f000 fad5 	bl	80009ac <swtimerISR>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}

08000406 <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 8000406:	b480      	push	{r7}
 8000408:	b087      	sub	sp, #28
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000412:	2301      	movs	r3, #1
 8000414:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	68db      	ldr	r3, [r3, #12]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d104      	bne.n	8000440 <qbufferCreate+0x3a>
    p_node->length = 0;
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
    ret = false;
 800043c:	2300      	movs	r3, #0
 800043e:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8000440:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 8000442:	4618      	mov	r0, r3
 8000444:	371c      	adds	r7, #28
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 800044c:	b480      	push	{r7}
 800044e:	b089      	sub	sp, #36	; 0x24
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000458:	2301      	movs	r3, #1
 800045a:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d101      	bne.n	8000468 <qbufferWrite+0x1c>
 8000464:	2300      	movs	r3, #0
 8000466:	e02d      	b.n	80004c4 <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	e025      	b.n	80004ba <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	689a      	ldr	r2, [r3, #8]
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	429a      	cmp	r2, r3
 8000484:	d101      	bne.n	800048a <qbufferWrite+0x3e>
      next_index = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	69bb      	ldr	r3, [r7, #24]
 8000490:	429a      	cmp	r2, r3
 8000492:	d00c      	beq.n	80004ae <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	68da      	ldr	r2, [r3, #12]
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	4413      	add	r3, r2
 800049c:	68b9      	ldr	r1, [r7, #8]
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	440a      	add	r2, r1
 80004a2:	7812      	ldrb	r2, [r2, #0]
 80004a4:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	69ba      	ldr	r2, [r7, #24]
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	e002      	b.n	80004b4 <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 80004ae:	2300      	movs	r3, #0
 80004b0:	77fb      	strb	r3, [r7, #31]
      break;
 80004b2:	e006      	b.n	80004c2 <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	3301      	adds	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3d5      	bcc.n	800046e <qbufferWrite+0x22>
    }
  }
  return ret;
 80004c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3724      	adds	r7, #36	; 0x24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 80004ce:	b480      	push	{r7}
 80004d0:	b089      	sub	sp, #36	; 0x24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80004da:	2301      	movs	r3, #1
 80004dc:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <qbufferRead+0x1c>
 80004e6:	2300      	movs	r3, #0
 80004e8:	e02d      	b.n	8000546 <qbufferRead+0x78>
  for(i=0; i<length; i++){
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e025      	b.n	800053c <qbufferRead+0x6e>
    index      = p_node->ptr_out;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_out + 1;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the out index is end of the buffer.
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	429a      	cmp	r2, r3
 8000506:	d101      	bne.n	800050c <qbufferRead+0x3e>
      next_index = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
    }
    if(index != p_node->ptr_in){      // if the buffer is not empty
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	429a      	cmp	r2, r3
 8000514:	d00c      	beq.n	8000530 <qbufferRead+0x62>
      p_data[i]       = p_node->p_buf[index];
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	4413      	add	r3, r2
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	68d1      	ldr	r1, [r2, #12]
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	440a      	add	r2, r1
 8000524:	7812      	ldrb	r2, [r2, #0]
 8000526:	701a      	strb	r2, [r3, #0]
      p_node->ptr_out = next_index;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	69ba      	ldr	r2, [r7, #24]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	e002      	b.n	8000536 <qbufferRead+0x68>
    }
    else{                             // if the buffer is empty ERR_EMPTY
      ret = false;
 8000530:	2300      	movs	r3, #0
 8000532:	77fb      	strb	r3, [r7, #31]
      break;
 8000534:	e006      	b.n	8000544 <qbufferRead+0x76>
  for(i=0; i<length; i++){
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	d3d5      	bcc.n	80004f0 <qbufferRead+0x22>
    }
  }
  return ret;
 8000544:	7ffb      	ldrb	r3, [r7, #31]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3724      	adds	r7, #36	; 0x24
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node){  // How many is there the buffer elements could be used.
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689a      	ldr	r2, [r3, #8]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	441a      	add	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	6892      	ldr	r2, [r2, #8]
 800056c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000570:	fb02 f201 	mul.w	r2, r2, r1
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	60fb      	str	r3, [r7, #12]

  return length;
 8000578:	68fb      	ldr	r3, [r7, #12]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
	...

080005a4 <button_isr>:
  uint32_t released_end_time;
}button_t;

static button_t button_tbl[BUTTON_MAX_CH];

void button_isr(void *arg){
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<BUTTON_MAX_CH; i++){
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	e09f      	b.n	80006f2 <button_isr+0x14e>
    if(buttonGetPressed(i)){
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f905 	bl	80007c4 <buttonGetPressed>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d056      	beq.n	800066e <button_isr+0xca>
      if(button_tbl[i].pressed == false){
 80005c0:	7bfa      	ldrb	r2, [r7, #15]
 80005c2:	4950      	ldr	r1, [pc, #320]	; (8000704 <button_isr+0x160>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	440b      	add	r3, r1
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	f083 0301 	eor.w	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d015      	beq.n	8000606 <button_isr+0x62>
        button_tbl[i].pressed_event = true;
 80005da:	7bfa      	ldrb	r2, [r7, #15]
 80005dc:	4949      	ldr	r1, [pc, #292]	; (8000704 <button_isr+0x160>)
 80005de:	4613      	mov	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4413      	add	r3, r2
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	440b      	add	r3, r1
 80005e8:	3301      	adds	r3, #1
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = millis();
 80005ee:	7bfc      	ldrb	r4, [r7, #15]
 80005f0:	f000 fde6 	bl	80011c0 <millis>
 80005f4:	4601      	mov	r1, r0
 80005f6:	4a43      	ldr	r2, [pc, #268]	; (8000704 <button_isr+0x160>)
 80005f8:	4623      	mov	r3, r4
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4423      	add	r3, r4
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	3304      	adds	r3, #4
 8000604:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = true;
 8000606:	7bfa      	ldrb	r2, [r7, #15]
 8000608:	493e      	ldr	r1, [pc, #248]	; (8000704 <button_isr+0x160>)
 800060a:	4613      	mov	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	440b      	add	r3, r1
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 8000618:	7bfa      	ldrb	r2, [r7, #15]
 800061a:	493a      	ldr	r1, [pc, #232]	; (8000704 <button_isr+0x160>)
 800061c:	4613      	mov	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	440b      	add	r3, r1
 8000626:	3302      	adds	r3, #2
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b298      	uxth	r0, r3
 800062e:	4935      	ldr	r1, [pc, #212]	; (8000704 <button_isr+0x160>)
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	440b      	add	r3, r1
 800063a:	3302      	adds	r3, #2
 800063c:	4602      	mov	r2, r0
 800063e:	801a      	strh	r2, [r3, #0]

      button_tbl[i].pressed_end_time = millis();
 8000640:	7bfc      	ldrb	r4, [r7, #15]
 8000642:	f000 fdbd 	bl	80011c0 <millis>
 8000646:	4601      	mov	r1, r0
 8000648:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <button_isr+0x160>)
 800064a:	4623      	mov	r3, r4
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4423      	add	r3, r4
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	4413      	add	r3, r2
 8000654:	3308      	adds	r3, #8
 8000656:	6019      	str	r1, [r3, #0]
      button_tbl[i].released = false;
 8000658:	7bfa      	ldrb	r2, [r7, #15]
 800065a:	492a      	ldr	r1, [pc, #168]	; (8000704 <button_isr+0x160>)
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	440b      	add	r3, r1
 8000666:	330c      	adds	r3, #12
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e03e      	b.n	80006ec <button_isr+0x148>
    }
    else{                                   // not pressed
      if(button_tbl[i].pressed == true){
 800066e:	7bfa      	ldrb	r2, [r7, #15]
 8000670:	4924      	ldr	r1, [pc, #144]	; (8000704 <button_isr+0x160>)
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	440b      	add	r3, r1
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <button_isr+0x10a>
        button_tbl[i].released_event = true;
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	491f      	ldr	r1, [pc, #124]	; (8000704 <button_isr+0x160>)
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	440b      	add	r3, r1
 8000690:	330d      	adds	r3, #13
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = millis();
 8000696:	7bfc      	ldrb	r4, [r7, #15]
 8000698:	f000 fd92 	bl	80011c0 <millis>
 800069c:	4601      	mov	r1, r0
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <button_isr+0x160>)
 80006a0:	4623      	mov	r3, r4
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4423      	add	r3, r4
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	4413      	add	r3, r2
 80006aa:	3310      	adds	r3, #16
 80006ac:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = false;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4914      	ldr	r1, [pc, #80]	; (8000704 <button_isr+0x160>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 80006c0:	7bfa      	ldrb	r2, [r7, #15]
 80006c2:	4910      	ldr	r1, [pc, #64]	; (8000704 <button_isr+0x160>)
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	440b      	add	r3, r1
 80006ce:	330c      	adds	r3, #12
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = millis();
 80006d4:	7bfc      	ldrb	r4, [r7, #15]
 80006d6:	f000 fd73 	bl	80011c0 <millis>
 80006da:	4601      	mov	r1, r0
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <button_isr+0x160>)
 80006de:	4623      	mov	r3, r4
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4423      	add	r3, r4
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	4413      	add	r3, r2
 80006e8:	3314      	adds	r3, #20
 80006ea:	6019      	str	r1, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3301      	adds	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f43f af5c 	beq.w	80005b2 <button_isr+0xe>
    }
  }
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c

08000708 <buttonInit>:

void buttonInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af02      	add	r7, sp, #8
  swtimer_handle_t h_button_timer;
  uint32_t i;

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4824      	ldr	r0, [pc, #144]	; (80007b8 <buttonInit+0xb0>)
 8000726:	f001 f85b 	bl	80017e0 <HAL_GPIO_Init>

  for(i=0; i<BUTTON_MAX_CH; i++){
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	e029      	b.n	8000784 <buttonInit+0x7c>
    button_tbl[i].pressed_cnt    = 0;
 8000730:	4922      	ldr	r1, [pc, #136]	; (80007bc <buttonInit+0xb4>)
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	4613      	mov	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	440b      	add	r3, r1
 800073e:	3302      	adds	r3, #2
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed        = 0;
 8000744:	491d      	ldr	r1, [pc, #116]	; (80007bc <buttonInit+0xb4>)
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	440b      	add	r3, r1
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released       = 0;
 8000756:	4919      	ldr	r1, [pc, #100]	; (80007bc <buttonInit+0xb4>)
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	440b      	add	r3, r1
 8000764:	330c      	adds	r3, #12
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 800076a:	4914      	ldr	r1, [pc, #80]	; (80007bc <buttonInit+0xb4>)
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	4613      	mov	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	440b      	add	r3, r1
 8000778:	330d      	adds	r3, #13
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0d2      	beq.n	8000730 <buttonInit+0x28>
  }

  h_button_timer = swtimerGetHandle();
 800078a:	f000 f9ff 	bl	8000b8c <swtimerGetHandle>
 800078e:	4603      	mov	r3, r0
 8000790:	827b      	strh	r3, [r7, #18]
  swtimerSet(h_button_timer, 1, LOOP_TIME, button_isr, NULL);
 8000792:	8a7b      	ldrh	r3, [r7, #18]
 8000794:	b2d8      	uxtb	r0, r3
 8000796:	2300      	movs	r3, #0
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <buttonInit+0xb8>)
 800079c:	2202      	movs	r2, #2
 800079e:	2101      	movs	r1, #1
 80007a0:	f000 f988 	bl	8000ab4 <swtimerSet>
  swtimerStart(h_button_timer);
 80007a4:	8a7b      	ldrh	r3, [r7, #18]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f9c5 	bl	8000b38 <swtimerStart>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40011000 	.word	0x40011000
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	080005a5 	.word	0x080005a5

080007c4 <buttonGetPressed>:
  button_tbl[ch].released_start_time   = 0;
  button_tbl[ch].released_end_time     = 0;
}

bool buttonGetPressed(uint8_t ch)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80007ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <buttonGetPressed+0x28>)
 80007d4:	f001 fa1a 	bl	8001c0c <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <buttonGetPressed+0x1e>
  {
    return true;
 80007de:	2301      	movs	r3, #1
 80007e0:	e000      	b.n	80007e4 <buttonGetPressed+0x20>
  }
  else
  {
    return false;
 80007e2:	2300      	movs	r3, #0
  }
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40011000 	.word	0x40011000

080007f0 <buttonGetPressedEvent>:

bool buttonGetPressedEvent(uint8_t ch){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  bool ret;

  if(ch >= BUTTON_MAX_CH)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <buttonGetPressedEvent+0x14>
    return false;
 8000800:	2300      	movs	r3, #0
 8000802:	e014      	b.n	800082e <buttonGetPressedEvent+0x3e>

  ret = button_tbl[ch].pressed_event;
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	490c      	ldr	r1, [pc, #48]	; (8000838 <buttonGetPressedEvent+0x48>)
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	3301      	adds	r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	73fb      	strb	r3, [r7, #15]
  button_tbl[ch].pressed_event = 0;
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4907      	ldr	r1, [pc, #28]	; (8000838 <buttonGetPressedEvent+0x48>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	440b      	add	r3, r1
 8000826:	3301      	adds	r3, #1
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
  return ret;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	2000008c 	.word	0x2000008c

0800083c <buttonGetPressedTime>:


uint32_t buttonGetPressedTime(uint8_t ch){
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  volatile uint32_t ret;
  if(ch >= BUTTON_MAX_CH)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <buttonGetPressedTime+0x14>
    return 0;
 800084c:	2300      	movs	r3, #0
 800084e:	e014      	b.n	800087a <buttonGetPressedTime+0x3e>

  ret = button_tbl[ch].pressed_end_time - button_tbl[ch].pressed_start_time;
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	490c      	ldr	r1, [pc, #48]	; (8000884 <buttonGetPressedTime+0x48>)
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	440b      	add	r3, r1
 800085e:	3308      	adds	r3, #8
 8000860:	6819      	ldr	r1, [r3, #0]
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <buttonGetPressedTime+0x48>)
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	4403      	add	r3, r0
 8000870:	3304      	adds	r3, #4
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1acb      	subs	r3, r1, r3
 8000876:	60fb      	str	r3, [r7, #12]

  return ret;
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	2000008c 	.word	0x2000008c

08000888 <buttonGetReleasedEvent>:

  return ret;
}

bool buttonGetReleasedEvent(uint8_t ch)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  bool ret;


  if (ch >= BUTTON_MAX_CH) return false;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <buttonGetReleasedEvent+0x14>
 8000898:	2300      	movs	r3, #0
 800089a:	e014      	b.n	80008c6 <buttonGetReleasedEvent+0x3e>

  ret = button_tbl[ch].released_event;
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	490c      	ldr	r1, [pc, #48]	; (80008d0 <buttonGetReleasedEvent+0x48>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	440b      	add	r3, r1
 80008aa:	330d      	adds	r3, #13
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	73fb      	strb	r3, [r7, #15]

  button_tbl[ch].released_event = 0;
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	4907      	ldr	r1, [pc, #28]	; (80008d0 <buttonGetReleasedEvent+0x48>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	440b      	add	r3, r1
 80008be:	330d      	adds	r3, #13
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]

  return ret;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	2000008c 	.word	0x2000008c

080008d4 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 80008e6:	2320      	movs	r3, #32
 80008e8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <ledInit+0x28>)
 80008f0:	f000 ff76 	bl	80017e0 <HAL_GPIO_Init>
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40010800 	.word	0x40010800

08000900 <ledToggle>:
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}

void ledToggle(uint8_t ch)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800090a:	2120      	movs	r1, #32
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <ledToggle+0x1c>)
 800090e:	f001 f994 	bl	8001c3a <HAL_GPIO_TogglePin>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40010800 	.word	0x40010800

08000920 <swtimerInit>:

static volatile uint32_t sw_timer_counter      = 0;     // SW Timer Counter
static volatile uint16_t sw_timer_handle_index = 0;
static swtimer_t swtimer_tbl[_HW_DEF_SW_TIMER_MAX];

bool swtimerInit(void){
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t execute = 0;

  if(execute == 1){  // if you have already run it,
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <swtimerInit+0x84>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <swtimerInit+0x12>
    return false;    // return false.
 800092e:	2300      	movs	r3, #0
 8000930:	e033      	b.n	800099a <swtimerInit+0x7a>
  }

  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]
 8000936:	e029      	b.n	800098c <swtimerInit+0x6c>
    swtimer_tbl[i].Timer_En = OFF;
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	491b      	ldr	r1, [pc, #108]	; (80009a8 <swtimerInit+0x88>)
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	440b      	add	r3, r1
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn = 0;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4916      	ldr	r1, [pc, #88]	; (80009a8 <swtimerInit+0x88>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	440b      	add	r3, r1
 8000958:	3304      	adds	r3, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 800095e:	79fa      	ldrb	r2, [r7, #7]
 8000960:	4911      	ldr	r1, [pc, #68]	; (80009a8 <swtimerInit+0x88>)
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	3308      	adds	r3, #8
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct = NULL;
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <swtimerInit+0x88>)
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	330c      	adds	r3, #12
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3301      	adds	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b07      	cmp	r3, #7
 8000990:	d9d2      	bls.n	8000938 <swtimerInit+0x18>
  }

  execute = 1;
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <swtimerInit+0x84>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
  return true;
 8000998:	2301      	movs	r3, #1
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	2000014c 	.word	0x2000014c
 80009a8:	200000ac 	.word	0x200000ac

080009ac <swtimerISR>:


void swtimerISR(void){    // = Software Timer Interrupt Service Request = SW Timer Interrupt Handler
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  uint8_t i;
  sw_timer_counter++;     // count up
 80009b2:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <swtimerISR+0xfc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a3b      	ldr	r2, [pc, #236]	; (8000aa8 <swtimerISR+0xfc>)
 80009ba:	6013      	str	r3, [r2, #0]

  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 80009bc:	2300      	movs	r3, #0
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	e063      	b.n	8000a8a <swtimerISR+0xde>
    if( swtimer_tbl[i].Timer_En == ON ){                               // If the Timer is enable
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4939      	ldr	r1, [pc, #228]	; (8000aac <swtimerISR+0x100>)
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	440b      	add	r3, r1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d156      	bne.n	8000a84 <swtimerISR+0xd8>
      swtimer_tbl[i].Timer_Ctn--;                                      // Decount the Timer counter
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	4934      	ldr	r1, [pc, #208]	; (8000aac <swtimerISR+0x100>)
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	3304      	adds	r3, #4
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1e59      	subs	r1, r3, #1
 80009ea:	4830      	ldr	r0, [pc, #192]	; (8000aac <swtimerISR+0x100>)
 80009ec:	4613      	mov	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4403      	add	r3, r0
 80009f6:	3304      	adds	r3, #4
 80009f8:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Ctn == 0){                               // If the overflow happens ( because of the short of the timer )
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	492b      	ldr	r1, [pc, #172]	; (8000aac <swtimerISR+0x100>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	3304      	adds	r3, #4
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d139      	bne.n	8000a84 <swtimerISR+0xd8>
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME){                     // If the Mode is ONE TIME
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	4926      	ldr	r1, [pc, #152]	; (8000aac <swtimerISR+0x100>)
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3301      	adds	r3, #1
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d108      	bne.n	8000a38 <swtimerISR+0x8c>
          swtimer_tbl[i].Timer_En = OFF;                               // Timer is Unable
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	4920      	ldr	r1, [pc, #128]	; (8000aac <swtimerISR+0x100>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	440b      	add	r3, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
        }
        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;          // Initialize the Timer
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	79f9      	ldrb	r1, [r7, #7]
 8000a3c:	481b      	ldr	r0, [pc, #108]	; (8000aac <swtimerISR+0x100>)
 8000a3e:	460b      	mov	r3, r1
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	440b      	add	r3, r1
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4403      	add	r3, r0
 8000a48:	3308      	adds	r3, #8
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	4817      	ldr	r0, [pc, #92]	; (8000aac <swtimerISR+0x100>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4403      	add	r3, r0
 8000a58:	3304      	adds	r3, #4
 8000a5a:	6019      	str	r1, [r3, #0]
        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);          // Run the Timer function
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	4913      	ldr	r1, [pc, #76]	; (8000aac <swtimerISR+0x100>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	330c      	adds	r3, #12
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	480e      	ldr	r0, [pc, #56]	; (8000aac <swtimerISR+0x100>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4403      	add	r3, r0
 8000a7c:	3310      	adds	r3, #16
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	4788      	blx	r1
  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	3301      	adds	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	d806      	bhi.n	8000a9e <swtimerISR+0xf2>
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <swtimerISR+0x104>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d391      	bcc.n	80009c2 <swtimerISR+0x16>
      }
    }
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000a4 	.word	0x200000a4
 8000aac:	200000ac 	.word	0x200000ac
 8000ab0:	200000a8 	.word	0x200000a8

08000ab4 <swtimerSet>:


void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *), void *arg){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;
 8000ac6:	7bfa      	ldrb	r2, [r7, #15]
 8000ac8:	491a      	ldr	r1, [pc, #104]	; (8000b34 <swtimerSet+0x80>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	7bba      	ldrb	r2, [r7, #14]
 8000ad8:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;
 8000ada:	7bfa      	ldrb	r2, [r7, #15]
 8000adc:	4915      	ldr	r1, [pc, #84]	; (8000b34 <swtimerSet+0x80>)
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	330c      	adds	r3, #12
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	4910      	ldr	r1, [pc, #64]	; (8000b34 <swtimerSet+0x80>)
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	3310      	adds	r3, #16
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	490b      	ldr	r1, [pc, #44]	; (8000b34 <swtimerSet+0x80>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	3304      	adds	r3, #4
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 8000b16:	7bfa      	ldrb	r2, [r7, #15]
 8000b18:	4906      	ldr	r1, [pc, #24]	; (8000b34 <swtimerSet+0x80>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	3308      	adds	r3, #8
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	601a      	str	r2, [r3, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	200000ac 	.word	0x200000ac

08000b38 <swtimerStart>:



void swtimerStart(uint8_t TmrNum){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if(TmrNum < _HW_DEF_SW_TIMER_MAX){
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b07      	cmp	r3, #7
 8000b46:	d81a      	bhi.n	8000b7e <swtimerStart+0x46>
    swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	79f9      	ldrb	r1, [r7, #7]
 8000b4c:	480e      	ldr	r0, [pc, #56]	; (8000b88 <swtimerStart+0x50>)
 8000b4e:	460b      	mov	r3, r1
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	440b      	add	r3, r1
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4403      	add	r3, r0
 8000b58:	3308      	adds	r3, #8
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <swtimerStart+0x50>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4403      	add	r3, r0
 8000b68:	3304      	adds	r3, #4
 8000b6a:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En  = ON;
 8000b6c:	79fa      	ldrb	r2, [r7, #7]
 8000b6e:	4906      	ldr	r1, [pc, #24]	; (8000b88 <swtimerStart+0x50>)
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	440b      	add	r3, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	200000ac 	.word	0x200000ac

08000b8c <swtimerGetHandle>:
void swtimerReset(uint8_t TmrNum){
  swtimer_tbl[TmrNum].Timer_En  = OFF;
  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <swtimerGetHandle+0x2c>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	80fb      	strh	r3, [r7, #6]
  sw_timer_handle_index++;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <swtimerGetHandle+0x2c>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <swtimerGetHandle+0x2c>)
 8000ba6:	801a      	strh	r2, [r3, #0]
  return TmrIndex;
 8000ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200000a8 	.word	0x200000a8

08000bbc <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	e01c      	b.n	8000c02 <uartInit+0x46>
  {
    uart_tbl[i].is_open = false;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <uartInit+0x58>)
 8000bcc:	21b0      	movs	r1, #176	; 0xb0
 8000bce:	fb01 f303 	mul.w	r3, r1, r3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <uartInit+0x58>)
 8000bdc:	21b0      	movs	r1, #176	; 0xb0
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	3309      	adds	r3, #9
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <uartInit+0x58>)
 8000bee:	21b0      	movs	r1, #176	; 0xb0
 8000bf0:	fb01 f303 	mul.w	r3, r1, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0df      	beq.n	8000bc8 <uartInit+0xc>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	2000015c 	.word	0x2000015c

08000c18 <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;

  switch(channel){
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d14a      	bne.n	8000cc4 <uartOpen+0xac>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	22b0      	movs	r2, #176	; 0xb0
 8000c32:	fb02 f303 	mul.w	r3, r2, r3
 8000c36:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <uartOpen+0xb8>)
 8000c38:	4413      	add	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <uartOpen+0xbc>)
 8000c40:	671a      	str	r2, [r3, #112]	; 0x70
      p_uart->handle.Init.BaudRate   = baud;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	675a      	str	r2, [r3, #116]	; 0x74
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	679a      	str	r2, [r3, #120]	; 0x78
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2200      	movs	r2, #0
 8000c52:	67da      	str	r2, [r3, #124]	; 0x7c
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	220c      	movs	r2, #12
 8000c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      p_uart->rx_mode                = UART_MODE_DMA;       // RX mode change to DMA.
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	725a      	strb	r2, [r3, #9]

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3370      	adds	r3, #112	; 0x70
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fc61 	bl	800253e <HAL_UART_DeInit>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d11d      	bne.n	8000cbe <uartOpen+0xa6>
        break;
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3370      	adds	r3, #112	; 0x70
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fc0c 	bl	80024a4 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d117      	bne.n	8000cc2 <uartOpen+0xaa>
        break;
      }
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f103 001c 	add.w	r0, r3, #28
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <uartOpen+0xc0>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff fbaf 	bl	8000406 <qbufferCreate>

      //p_uart->rx_mode = UART_MODE_INTERRUPT;
      p_uart->baud    = baud;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f810 	bl	8000cdc <uartStartRx>
      break;
 8000cbc:	e002      	b.n	8000cc4 <uartOpen+0xac>
        break;
 8000cbe:	bf00      	nop
 8000cc0:	e000      	b.n	8000cc4 <uartOpen+0xac>
        break;
 8000cc2:	bf00      	nop
  }
  return ret;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000015c 	.word	0x2000015c
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	2000020c 	.word	0x2000020c

08000cdc <uartStartRx>:

void uartStartRx(uint8_t channel){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel for UART.
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	22b0      	movs	r2, #176	; 0xb0
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <uartStartRx+0x58>)
 8000cf0:	4413      	add	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){  // UART Start When the UART's mode is Interrupt.
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	7a5b      	ldrb	r3, [r3, #9]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d108      	bne.n	8000d0e <uartStartRx+0x32>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	330a      	adds	r3, #10
 8000d06:	2201      	movs	r2, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f001 fcdc 	bl	80026c6 <HAL_UART_Receive_IT>
  }
  if(p_uart->rx_mode == UART_MODE_DMA){        // UART Start When the UART's mode is DMA.
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	7a5b      	ldrb	r3, [r3, #9]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d10a      	bne.n	8000d2c <uartStartRx+0x50>
    HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f001 fd22 	bl	8002770 <HAL_UART_Receive_DMA>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000015c 	.word	0x2000015c

08000d38 <uartAvailable>:
  }
  return ret;
}


uint32_t uartAvailable(uint8_t channel){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;
  uart_t *p_uart = &uart_tbl[channel];
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	22b0      	movs	r2, #176	; 0xb0
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <uartAvailable+0x70>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]

  if(channel >= UART_MAX_CH)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <uartAvailable+0x22>
    return 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e022      	b.n	8000da0 <uartAvailable+0x68>

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	7a5b      	ldrb	r3, [r3, #9]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10b      	bne.n	8000d7a <uartAvailable+0x42>
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	22b0      	movs	r2, #176	; 0xb0
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	3318      	adds	r3, #24
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <uartAvailable+0x70>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	3304      	adds	r3, #4
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbec 	bl	8000550 <qbufferAvailable>
 8000d78:	60f8      	str	r0, [r7, #12]
  }
  if(p_uart->rx_mode == UART_MODE_DMA){
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	7a5b      	ldrb	r3, [r3, #9]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d10d      	bne.n	8000d9e <uartAvailable+0x66>
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma_rx.Instance->CNDTR;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	1ad2      	subs	r2, r2, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	61da      	str	r2, [r3, #28]
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	331c      	adds	r3, #28
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fbda 	bl	8000550 <qbufferAvailable>
 8000d9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000015c 	.word	0x2000015c

08000dac <uartFlush>:


void uartFlush(uint8_t channel){
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]

  if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT){
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <uartFlush+0xa4>)
 8000dba:	21b0      	movs	r1, #176	; 0xb0
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3309      	adds	r3, #9
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d10a      	bne.n	8000de0 <uartFlush+0x34>
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	22b0      	movs	r2, #176	; 0xb0
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <uartFlush+0xa4>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3304      	adds	r3, #4
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fbd2 	bl	8000584 <qbufferFlush>
  }

  if(uart_tbl[channel].rx_mode == UART_MODE_DMA){
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <uartFlush+0xa4>)
 8000de4:	21b0      	movs	r1, #176	; 0xb0
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	3309      	adds	r3, #9
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d129      	bne.n	8000e48 <uartFlush+0x9c>
    uart_tbl[channel].qbuffer_rx.ptr_in  = uart_tbl[channel].qbuffer_rx.length - uart_tbl[channel].hdma_rx.Instance->CNDTR;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	79fa      	ldrb	r2, [r7, #7]
 8000df8:	4915      	ldr	r1, [pc, #84]	; (8000e50 <uartFlush+0xa4>)
 8000dfa:	20b0      	movs	r0, #176	; 0xb0
 8000dfc:	fb00 f202 	mul.w	r2, r0, r2
 8000e00:	440a      	add	r2, r1
 8000e02:	3224      	adds	r2, #36	; 0x24
 8000e04:	6811      	ldr	r1, [r2, #0]
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <uartFlush+0xa4>)
 8000e0a:	24b0      	movs	r4, #176	; 0xb0
 8000e0c:	fb04 f202 	mul.w	r2, r4, r2
 8000e10:	4402      	add	r2, r0
 8000e12:	322c      	adds	r2, #44	; 0x2c
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	6852      	ldr	r2, [r2, #4]
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	490d      	ldr	r1, [pc, #52]	; (8000e50 <uartFlush+0xa4>)
 8000e1c:	20b0      	movs	r0, #176	; 0xb0
 8000e1e:	fb00 f303 	mul.w	r3, r0, r3
 8000e22:	440b      	add	r3, r1
 8000e24:	331c      	adds	r3, #28
 8000e26:	601a      	str	r2, [r3, #0]
    uart_tbl[channel].qbuffer_rx.ptr_out = uart_tbl[channel].qbuffer_rx.ptr_in;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	4908      	ldr	r1, [pc, #32]	; (8000e50 <uartFlush+0xa4>)
 8000e2e:	20b0      	movs	r0, #176	; 0xb0
 8000e30:	fb00 f202 	mul.w	r2, r0, r2
 8000e34:	440a      	add	r2, r1
 8000e36:	321c      	adds	r2, #28
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	4905      	ldr	r1, [pc, #20]	; (8000e50 <uartFlush+0xa4>)
 8000e3c:	20b0      	movs	r0, #176	; 0xb0
 8000e3e:	fb00 f303 	mul.w	r3, r0, r3
 8000e42:	440b      	add	r3, r1
 8000e44:	3320      	adds	r3, #32
 8000e46:	601a      	str	r2, [r3, #0]
  }
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	2000015c 	.word	0x2000015c

08000e54 <uartWrite>:
  }
  return ret;
}


int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uart_t *p_uart = &uart_tbl[channel];
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	22b0      	movs	r2, #176	; 0xb0
 8000e6a:	fb02 f303 	mul.w	r3, r2, r3
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <uartWrite+0x50>)
 8000e70:	4413      	add	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	7a5b      	ldrb	r3, [r3, #9]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10e      	bne.n	8000e9a <uartWrite+0x46>
    if( HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK ){
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	f001 fb83 	bl	8002596 <HAL_UART_Transmit>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <uartWrite+0x46>
      ret = length;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000e9a:	697b      	ldr	r3, [r7, #20]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000015c 	.word	0x2000015c

08000ea8 <uartRead>:

uint8_t uartRead(uint8_t channel){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	72fb      	strb	r3, [r7, #11]
  uart_t *p_uart = &uart_tbl[channel];
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	22b0      	movs	r2, #176	; 0xb0
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <uartRead+0x58>)
 8000ec0:	4413      	add	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

  // even though the mode is different, same process.
  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	7a5b      	ldrb	r3, [r3, #9]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d107      	bne.n	8000edc <uartRead+0x34>
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	331c      	adds	r3, #28
 8000ed0:	f107 010b 	add.w	r1, r7, #11
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff faf9 	bl	80004ce <qbufferRead>
  }
  if(p_uart->rx_mode == UART_MODE_DMA){
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	7a5b      	ldrb	r3, [r3, #9]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d107      	bne.n	8000ef4 <uartRead+0x4c>
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	331c      	adds	r3, #28
 8000ee8:	f107 010b 	add.w	r1, r7, #11
 8000eec:	2201      	movs	r2, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff faed 	bl	80004ce <qbufferRead>
  }
  return ret;
 8000ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000015c 	.word	0x2000015c

08000f04 <uartPrintf>:

int32_t uartPrintf(uint8_t channel, const char *fmt, ...){
 8000f04:	b40e      	push	{r1, r2, r3}
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b0c7      	sub	sp, #284	; 0x11c
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	701a      	strb	r2, [r3, #0]
  int32_t ret = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_list arg;
  va_start(arg, fmt);
 8000f18:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int32_t len;
  char print_buffer[256];

  len = vsnprintf(print_buffer, 255, fmt, arg);
 8000f20:	f107 000c 	add.w	r0, r7, #12
 8000f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f28:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000f2c:	21ff      	movs	r1, #255	; 0xff
 8000f2e:	f002 f8f5 	bl	800311c <vsniprintf>
 8000f32:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(arg);

  ret = uartWrite(channel, (uint8_t *)print_buffer, len);
 8000f36:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000f3a:	f107 010c 	add.w	r1, r7, #12
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff86 	bl	8000e54 <uartWrite>
 8000f48:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  return ret;
 8000f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000f56:	46bd      	mov	sp, r7
 8000f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f5c:	b003      	add	sp, #12
 8000f5e:	4770      	bx	lr

08000f60 <uartRxHandler>:

void uartRxHandler(uint8_t channel)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	22b0      	movs	r2, #176	; 0xb0
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <uartRxHandler+0x4c>)
 8000f74:	4413      	add	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	7a5b      	ldrb	r3, [r3, #9]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d110      	bne.n	8000fa2 <uartRxHandler+0x42>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f103 001c 	add.w	r0, r3, #28
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	330a      	adds	r3, #10
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fa5d 	bl	800044c <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
      uartStartRx(channel);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe9d 	bl	8000cdc <uartStartRx>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000015c 	.word	0x2000015c

08000fb0 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fef5 	bl	8000dac <uartFlush>
  uartStartRx(channel);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe89 	bl	8000cdc <uartStartRx>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_UART_RxCpltCallback+0x20>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d102      	bne.n	8000fec <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff ffba 	bl	8000f60 <uartRxHandler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f001 fa9c 	bl	800253e <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 fa4c 	bl	80024a4 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_UART_ErrorCallback+0x2c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d102      	bne.n	800101c <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff ffca 	bl	8000fb0 <uartErrHandler>
  }
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40004400 	.word	0x40004400

08001028 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART2_IRQHandler+0x10>)
 800102e:	f001 fc1f 	bl	8002870 <HAL_UART_IRQHandler>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001cc 	.word	0x200001cc

0800103c <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a3c      	ldr	r2, [pc, #240]	; (800113c <HAL_UART_MspInit+0x100>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d172      	bne.n	8001134 <HAL_UART_MspInit+0xf8>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <HAL_UART_MspInit+0x104>)
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <HAL_UART_MspInit+0x104>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_UART_MspInit+0x104>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	4a36      	ldr	r2, [pc, #216]	; (8001140 <HAL_UART_MspInit+0x104>)
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_UART_MspInit+0x104>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <HAL_UART_MspInit+0x104>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 800107e:	2304      	movs	r3, #4
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001086:	2301      	movs	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	482b      	ldr	r0, [pc, #172]	; (8001144 <HAL_UART_MspInit+0x108>)
 8001096:	f000 fba3 	bl	80017e0 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 800109a:	2308      	movs	r3, #8
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4826      	ldr	r0, [pc, #152]	; (8001144 <HAL_UART_MspInit+0x108>)
 80010aa:	f000 fb99 	bl	80017e0 <HAL_GPIO_Init>


    if (uart_tbl[_DEF_UART1].rx_mode == UART_MODE_DMA)
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_UART_MspInit+0x10c>)
 80010b0:	7a5b      	ldrb	r3, [r3, #9]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d136      	bne.n	8001124 <HAL_UART_MspInit+0xe8>
    {
         uart_t *p_uart = &uart_tbl[_DEF_UART1];
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_UART_MspInit+0x10c>)
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24


         __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	4a21      	ldr	r2, [pc, #132]	; (8001140 <HAL_UART_MspInit+0x104>)
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_UART_MspInit+0x104>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_UART_MspInit+0x104>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]


         /* Configure the DMA handler for reception process */
         p_uart->hdma_rx.Instance                 = DMA1_Channel6;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <HAL_UART_MspInit+0x110>)
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
         p_uart->hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	2200      	movs	r2, #0
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
         p_uart->hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	2200      	movs	r2, #0
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
         p_uart->hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
         p_uart->hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
         p_uart->hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
         p_uart->hdma_rx.Init.Mode                = DMA_CIRCULAR;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	2220      	movs	r2, #32
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
         p_uart->hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001102:	649a      	str	r2, [r3, #72]	; 0x48


         HAL_DMA_Init(&p_uart->hdma_rx);
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	332c      	adds	r3, #44	; 0x2c
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa05 	bl	8001518 <HAL_DMA_Init>

         /* Associate the initialized DMA handle to the the UART handle */
         __HAL_LINKDMA((&p_uart->handle), hdmarx, (p_uart->hdma_rx));
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	2100      	movs	r1, #0
 8001128:	2026      	movs	r0, #38	; 0x26
 800112a:	f000 f9b0 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800112e:	2026      	movs	r0, #38	; 0x26
 8001130:	f000 f9c9 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  }
}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40004400 	.word	0x40004400
 8001140:	40021000 	.word	0x40021000
 8001144:	40010800 	.word	0x40010800
 8001148:	2000015c 	.word	0x2000015c
 800114c:	4002006c 	.word	0x4002006c

08001150 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_UART_MspDeInit+0x48>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d116      	bne.n	8001190 <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_UART_MspDeInit+0x4c>)
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_UART_MspDeInit+0x4c>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_UART_MspDeInit+0x4c>)
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_UART_MspDeInit+0x4c>)
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001178:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800117a:	2104      	movs	r1, #4
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <HAL_UART_MspDeInit+0x50>)
 800117e:	f000 fc89 	bl	8001a94 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8001182:	2108      	movs	r1, #8
 8001184:	4806      	ldr	r0, [pc, #24]	; (80011a0 <HAL_UART_MspDeInit+0x50>)
 8001186:	f000 fc85 	bl	8001a94 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800118a:	2026      	movs	r0, #38	; 0x26
 800118c:	f000 f9a9 	bl	80014e2 <HAL_NVIC_DisableIRQ>
  }
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800

080011a4 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  bspInit();
 80011a8:	f7ff f882 	bl	80002b0 <bspInit>

  swtimerInit();
 80011ac:	f7ff fbb8 	bl	8000920 <swtimerInit>
  ledInit();
 80011b0:	f7ff fb90 	bl	80008d4 <ledInit>
  buttonInit();
 80011b4:	f7ff faa8 	bl	8000708 <buttonInit>
  uartInit();
 80011b8:	f7ff fd00 	bl	8000bbc <uartInit>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80011c4:	f000 f862 	bl	800128c <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_Init+0x28>)
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x28>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f949 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 f80e 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f000 f806 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f969 	bl	80014fe <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f923 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000008 	.word	0x20000008
 8001288:	2000021c 	.word	0x2000021c

0800128c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	2000021c 	.word	0x2000021c

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_EnableIRQ+0x34>)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	095b      	lsrs	r3, r3, #5
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db10      	blt.n	8001370 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	490b      	ldr	r1, [pc, #44]	; (800137c <__NVIC_DisableIRQ+0x40>)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	095b      	lsrs	r3, r3, #5
 8001356:	79fa      	ldrb	r2, [r7, #7]
 8001358:	f002 021f 	and.w	r2, r2, #31
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	3320      	adds	r3, #32
 8001364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	490d      	ldr	r1, [pc, #52]	; (80013cc <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	4909      	ldr	r1, [pc, #36]	; (80013d0 <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	2201      	movs	r2, #1
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	401a      	ands	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141a:	2101      	movs	r1, #1
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	1e59      	subs	r1, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff92 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff0d 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff22 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff92 	bl	80013d4 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff61 	bl	8001380 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff15 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff23 	bl	800133c <__NVIC_DisableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff94 	bl	8001434 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e043      	b.n	80015b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_DMA_Init+0xa8>)
 8001536:	4413      	add	r3, r2
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_DMA_Init+0xac>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	009a      	lsls	r2, r3, #2
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_DMA_Init+0xb0>)
 800154a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001562:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	bffdfff8 	.word	0xbffdfff8
 80015c4:	cccccccd 	.word	0xcccccccd
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_DMA_Start_IT+0x20>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e04a      	b.n	8001682 <HAL_DMA_Start_IT+0xb6>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d13a      	bne.n	8001674 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2202      	movs	r2, #2
 8001602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 f8ae 	bl	8001784 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	f042 020e 	orr.w	r2, r2, #14
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e00f      	b.n	8001662 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	f022 0204 	bic.w	r2, r2, #4
 8001650:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	f042 020a 	orr.w	r2, r2, #10
 8001660:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e005      	b.n	8001680 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800167c:	2302      	movs	r3, #2
 800167e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d005      	beq.n	80016ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2204      	movs	r2, #4
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e057      	b.n	800175e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f022 020e 	bic.w	r2, r2, #14
 80016bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016ce:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_DMA_Abort_IT+0xdc>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_DMA_Abort_IT+0xe0>)
 80016d8:	4299      	cmp	r1, r3
 80016da:	d02e      	beq.n	800173a <HAL_DMA_Abort_IT+0xae>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <HAL_DMA_Abort_IT+0xe4>)
 80016e4:	4299      	cmp	r1, r3
 80016e6:	d026      	beq.n	8001736 <HAL_DMA_Abort_IT+0xaa>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_DMA_Abort_IT+0xe8>)
 80016f0:	4299      	cmp	r1, r3
 80016f2:	d01d      	beq.n	8001730 <HAL_DMA_Abort_IT+0xa4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_DMA_Abort_IT+0xec>)
 80016fc:	4299      	cmp	r1, r3
 80016fe:	d014      	beq.n	800172a <HAL_DMA_Abort_IT+0x9e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_DMA_Abort_IT+0xf0>)
 8001708:	4299      	cmp	r1, r3
 800170a:	d00b      	beq.n	8001724 <HAL_DMA_Abort_IT+0x98>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_DMA_Abort_IT+0xf4>)
 8001714:	4299      	cmp	r1, r3
 8001716:	d102      	bne.n	800171e <HAL_DMA_Abort_IT+0x92>
 8001718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800171c:	e00e      	b.n	800173c <HAL_DMA_Abort_IT+0xb0>
 800171e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001722:	e00b      	b.n	800173c <HAL_DMA_Abort_IT+0xb0>
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	e008      	b.n	800173c <HAL_DMA_Abort_IT+0xb0>
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	e005      	b.n	800173c <HAL_DMA_Abort_IT+0xb0>
 8001730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001734:	e002      	b.n	800173c <HAL_DMA_Abort_IT+0xb0>
 8001736:	2310      	movs	r3, #16
 8001738:	e000      	b.n	800173c <HAL_DMA_Abort_IT+0xb0>
 800173a:	2301      	movs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
    } 
  }
  return status;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40020000 	.word	0x40020000
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c

08001784 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d108      	bne.n	80017c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c2:	e007      	b.n	80017d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e127      	b.n	8001a44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f4:	2201      	movs	r2, #1
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8116 	bne.w	8001a3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b12      	cmp	r3, #18
 8001818:	d034      	beq.n	8001884 <HAL_GPIO_Init+0xa4>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d80d      	bhi.n	800183a <HAL_GPIO_Init+0x5a>
 800181e:	2b02      	cmp	r3, #2
 8001820:	d02b      	beq.n	800187a <HAL_GPIO_Init+0x9a>
 8001822:	2b02      	cmp	r3, #2
 8001824:	d804      	bhi.n	8001830 <HAL_GPIO_Init+0x50>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d031      	beq.n	800188e <HAL_GPIO_Init+0xae>
 800182a:	2b01      	cmp	r3, #1
 800182c:	d01c      	beq.n	8001868 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182e:	e048      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001830:	2b03      	cmp	r3, #3
 8001832:	d043      	beq.n	80018bc <HAL_GPIO_Init+0xdc>
 8001834:	2b11      	cmp	r3, #17
 8001836:	d01b      	beq.n	8001870 <HAL_GPIO_Init+0x90>
          break;
 8001838:	e043      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800183a:	4a89      	ldr	r2, [pc, #548]	; (8001a60 <HAL_GPIO_Init+0x280>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d026      	beq.n	800188e <HAL_GPIO_Init+0xae>
 8001840:	4a87      	ldr	r2, [pc, #540]	; (8001a60 <HAL_GPIO_Init+0x280>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d806      	bhi.n	8001854 <HAL_GPIO_Init+0x74>
 8001846:	4a87      	ldr	r2, [pc, #540]	; (8001a64 <HAL_GPIO_Init+0x284>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d020      	beq.n	800188e <HAL_GPIO_Init+0xae>
 800184c:	4a86      	ldr	r2, [pc, #536]	; (8001a68 <HAL_GPIO_Init+0x288>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01d      	beq.n	800188e <HAL_GPIO_Init+0xae>
          break;
 8001852:	e036      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001854:	4a85      	ldr	r2, [pc, #532]	; (8001a6c <HAL_GPIO_Init+0x28c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0xae>
 800185a:	4a85      	ldr	r2, [pc, #532]	; (8001a70 <HAL_GPIO_Init+0x290>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d016      	beq.n	800188e <HAL_GPIO_Init+0xae>
 8001860:	4a84      	ldr	r2, [pc, #528]	; (8001a74 <HAL_GPIO_Init+0x294>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0xae>
          break;
 8001866:	e02c      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e028      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	3304      	adds	r3, #4
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e023      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	3308      	adds	r3, #8
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e01e      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	330c      	adds	r3, #12
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e019      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001896:	2304      	movs	r3, #4
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e012      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	611a      	str	r2, [r3, #16]
          break;
 80018ae:	e008      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	615a      	str	r2, [r3, #20]
          break;
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
          break;
 80018c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2bff      	cmp	r3, #255	; 0xff
 80018c6:	d801      	bhi.n	80018cc <HAL_GPIO_Init+0xec>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	e001      	b.n	80018d0 <HAL_GPIO_Init+0xf0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3304      	adds	r3, #4
 80018d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2bff      	cmp	r3, #255	; 0xff
 80018d6:	d802      	bhi.n	80018de <HAL_GPIO_Init+0xfe>
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x104>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	3b08      	subs	r3, #8
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	210f      	movs	r1, #15
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	401a      	ands	r2, r3
 80018f6:	6a39      	ldr	r1, [r7, #32]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8096 	beq.w	8001a3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001912:	4a59      	ldr	r2, [pc, #356]	; (8001a78 <HAL_GPIO_Init+0x298>)
 8001914:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <HAL_GPIO_Init+0x298>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_GPIO_Init+0x298>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800192a:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_GPIO_Init+0x29c>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <HAL_GPIO_Init+0x2a0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0x19e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4a      	ldr	r2, [pc, #296]	; (8001a84 <HAL_GPIO_Init+0x2a4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00d      	beq.n	800197a <HAL_GPIO_Init+0x19a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <HAL_GPIO_Init+0x196>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2ac>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_GPIO_Init+0x192>
 800196e:	2303      	movs	r3, #3
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 8001972:	2304      	movs	r3, #4
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 800197e:	2300      	movs	r3, #0
 8001980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001990:	493a      	ldr	r1, [pc, #232]	; (8001a7c <HAL_GPIO_Init+0x29c>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019aa:	4939      	ldr	r1, [pc, #228]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019ac:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b8:	4935      	ldr	r1, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d2:	492f      	ldr	r1, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e0:	492b      	ldr	r1, [pc, #172]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4013      	ands	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019fa:	4925      	ldr	r1, [pc, #148]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a08:	4921      	ldr	r1, [pc, #132]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4013      	ands	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60cb      	str	r3, [r1, #12]
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a30:	4917      	ldr	r1, [pc, #92]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f47f aed0 	bne.w	80017f4 <HAL_GPIO_Init+0x14>
  }
}
 8001a54:	bf00      	nop
 8001a56:	372c      	adds	r7, #44	; 0x2c
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	10210000 	.word	0x10210000
 8001a64:	10110000 	.word	0x10110000
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	10310000 	.word	0x10310000
 8001a70:	10320000 	.word	0x10320000
 8001a74:	10220000 	.word	0x10220000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40011400 	.word	0x40011400
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001aa2:	e09a      	b.n	8001bda <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 808e 	beq.w	8001bd4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001ab8:	4a4e      	ldr	r2, [pc, #312]	; (8001bf4 <HAL_GPIO_DeInit+0x160>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a46      	ldr	r2, [pc, #280]	; (8001bf8 <HAL_GPIO_DeInit+0x164>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_DeInit+0x76>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a45      	ldr	r2, [pc, #276]	; (8001bfc <HAL_GPIO_DeInit+0x168>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_DeInit+0x72>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <HAL_GPIO_DeInit+0x16c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_DeInit+0x6e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a43      	ldr	r2, [pc, #268]	; (8001c04 <HAL_GPIO_DeInit+0x170>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_DeInit+0x6a>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_DeInit+0x78>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_DeInit+0x78>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_DeInit+0x78>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_DeInit+0x78>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	fa03 f202 	lsl.w	r2, r3, r2
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d132      	bne.n	8001b84 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001b2e:	4831      	ldr	r0, [pc, #196]	; (8001bf4 <HAL_GPIO_DeInit+0x160>)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <HAL_GPIO_DeInit+0x160>)
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	0892      	lsrs	r2, r2, #2
 8001b3a:	3202      	adds	r2, #2
 8001b3c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	43d2      	mvns	r2, r2
 8001b44:	400a      	ands	r2, r1
 8001b46:	3302      	adds	r3, #2
 8001b48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001b4c:	492e      	ldr	r1, [pc, #184]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4013      	ands	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001b5a:	492b      	ldr	r1, [pc, #172]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001b68:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b6a:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4013      	ands	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_GPIO_DeInit+0x174>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	4013      	ands	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2bff      	cmp	r3, #255	; 0xff
 8001b88:	d801      	bhi.n	8001b8e <HAL_GPIO_DeInit+0xfa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	e001      	b.n	8001b92 <HAL_GPIO_DeInit+0xfe>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d802      	bhi.n	8001ba0 <HAL_GPIO_DeInit+0x10c>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_DeInit+0x112>
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	3b08      	subs	r3, #8
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	210f      	movs	r1, #15
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	2104      	movs	r1, #4
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f af5e 	bne.w	8001aa4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3724      	adds	r7, #36	; 0x24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010c00 	.word	0x40010c00
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40011400 	.word	0x40011400
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e001      	b.n	8001c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	611a      	str	r2, [r3, #16]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e26c      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4b8f      	ldr	r3, [pc, #572]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x12c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d168      	bne.n	8001d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e246      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76>
 8001cd4:	4a80      	ldr	r2, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4a7b      	ldr	r2, [pc, #492]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	4b7a      	ldr	r3, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4a78      	ldr	r2, [pc, #480]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	4b77      	ldr	r3, [pc, #476]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0xbc>
 8001d0e:	4a72      	ldr	r2, [pc, #456]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	4b71      	ldr	r3, [pc, #452]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4a6f      	ldr	r2, [pc, #444]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d28:	4a6b      	ldr	r2, [pc, #428]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4a68      	ldr	r2, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff faa0 	bl	800128c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fa9c 	bl	800128c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1fa      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe4>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fa8c 	bl	800128c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fa88 	bl	800128c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1e6      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1ba      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	493d      	ldr	r1, [pc, #244]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fa41 	bl	800128c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fa3d 	bl	800128c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e19b      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	492a      	ldr	r1, [pc, #168]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fa20 	bl	800128c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff fa1c 	bl	800128c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e17a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fa00 	bl	800128c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff f9fc 	bl	800128c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e15a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fada 	bl	8002468 <RCC_Delay>
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f9e6 	bl	800128c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f9e2 	bl	800128c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e140      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	42420000 	.word	0x42420000
 8001ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b9e      	ldr	r3, [pc, #632]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e9      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a6 	beq.w	800204a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b97      	ldr	r3, [pc, #604]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4a94      	ldr	r2, [pc, #592]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	4b93      	ldr	r3, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b91      	ldr	r3, [pc, #580]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4a8b      	ldr	r2, [pc, #556]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff f9a3 	bl	800128c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff f99f 	bl	800128c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	; 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0fd      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f70:	4a7b      	ldr	r2, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001f86:	4a76      	ldr	r2, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4a73      	ldr	r2, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e01c      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x356>
 8001fa8:	4a6d      	ldr	r2, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fc2:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	4b66      	ldr	r3, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4a64      	ldr	r2, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f953 	bl	800128c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f94f 	bl	800128c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0ab      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCC_OscConfig+0x37e>
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff f93d 	bl	800128c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff f939 	bl	800128c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e095      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4a48      	ldr	r2, [pc, #288]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8081 	beq.w	8002156 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d061      	beq.n	8002124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d146      	bne.n	80020f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff f90d 	bl	800128c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff f909 	bl	800128c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e067      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4930      	ldr	r1, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	482b      	ldr	r0, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a19      	ldr	r1, [r3, #32]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	430b      	orrs	r3, r1
 80020c4:	4313      	orrs	r3, r2
 80020c6:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff f8dd 	bl	800128c <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff f8d9 	bl	800128c <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e037      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
 80020f4:	e02f      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff f8c6 	bl	800128c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff f8c2 	bl	800128c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e020      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x498>
 8002122:	e018      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	429a      	cmp	r2, r3
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420060 	.word	0x42420060

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0207 	and.w	r2, r3, #7
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d210      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4967      	ldr	r1, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 0207 	bic.w	r2, r3, #7
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0207 	and.w	r2, r3, #7
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4a59      	ldr	r2, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4a53      	ldr	r2, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4950      	ldr	r1, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4939      	ldr	r1, [pc, #228]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 0203 	bic.w	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7ff f816 	bl	800128c <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff f812 	bl	800128c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0207 	and.w	r2, r3, #7
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4924      	ldr	r1, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 0207 	bic.w	r2, r3, #7
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0207 	and.w	r2, r3, #7
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4919      	ldr	r1, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4912      	ldr	r1, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4601      	mov	r1, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5cd3      	ldrb	r3, [r2, r3]
 800230e:	fa21 f303 	lsr.w	r3, r1, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe ff74 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	080039d0 	.word	0x080039d0
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b490      	push	{r4, r7}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002348:	1d3c      	adds	r4, r7, #4
 800234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x46>
 800237e:	e02d      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	e02d      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002392:	4413      	add	r3, r2
 8002394:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002398:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0c5b      	lsrs	r3, r3, #17
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023b2:	4413      	add	r3, r2
 80023b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80023be:	fb02 f203 	mul.w	r2, r2, r3
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	e004      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	623b      	str	r3, [r7, #32]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80023de:	623b      	str	r3, [r7, #32]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc90      	pop	{r4, r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	080039bc 	.word	0x080039bc
 80023f4:	080039cc 	.word	0x080039cc
 80023f8:	40021000 	.word	0x40021000
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	003d0900 	.word	0x003d0900

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <HAL_RCC_GetHCLKFreq+0x10>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff2 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002420:	4601      	mov	r1, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080039e0 	.word	0x080039e0

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffde 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002448:	4601      	mov	r1, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0adb      	lsrs	r3, r3, #11
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	080039e0 	.word	0x080039e0

08002468 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <RCC_Delay+0x34>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <RCC_Delay+0x38>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0a5b      	lsrs	r3, r3, #9
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002484:	bf00      	nop
  }
  while (Delay --);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	60fa      	str	r2, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f9      	bne.n	8002484 <RCC_Delay+0x1c>
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e03f      	b.n	8002536 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fdb6 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fcd9 	bl	8002ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	6912      	ldr	r2, [r2, #16]
 80024f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	6952      	ldr	r2, [r2, #20]
 8002508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	68d2      	ldr	r2, [r2, #12]
 8002518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e01e      	b.n	800258e <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	; 0x24
 8002554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	68d2      	ldr	r2, [r2, #12]
 8002562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002566:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fe fdf1 	bl	8001150 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b088      	sub	sp, #32
 800259a:	af02      	add	r7, sp, #8
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 8082 	bne.w	80026bc <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_UART_Transmit+0x2e>
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e07a      	b.n	80026be <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_UART_Transmit+0x40>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e073      	b.n	80026be <HAL_UART_Transmit+0x128>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2221      	movs	r2, #33	; 0x21
 80025e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fe4e 	bl	800128c <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025fe:	e041      	b.n	8002684 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d121      	bne.n	800265c <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fabe 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e045      	b.n	80026be <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	8812      	ldrh	r2, [r2, #0]
 800263e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002642:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	3302      	adds	r3, #2
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	e017      	b.n	8002684 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	3301      	adds	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	e013      	b.n	8002684 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2200      	movs	r2, #0
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa9c 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e023      	b.n	80026be <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1c59      	adds	r1, r3, #1
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1b8      	bne.n	8002600 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa83 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e00a      	b.n	80026be <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d140      	bne.n	8002762 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_UART_Receive_IT+0x26>
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e039      	b.n	8002764 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Receive_IT+0x38>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e032      	b.n	8002764 <HAL_UART_Receive_IT+0x9e>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	88fa      	ldrh	r2, [r7, #6]
 8002710:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2222      	movs	r2, #34	; 0x22
 8002722:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	68d2      	ldr	r2, [r2, #12]
 8002738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	6952      	ldr	r2, [r2, #20]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	68d2      	ldr	r2, [r2, #12]
 8002758:	f042 0220 	orr.w	r2, r2, #32
 800275c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
	...

08002770 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b20      	cmp	r3, #32
 8002788:	d166      	bne.n	8002858 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_UART_Receive_DMA+0x26>
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e05f      	b.n	800285a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Receive_DMA+0x38>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e058      	b.n	800285a <HAL_UART_Receive_DMA+0xea>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2222      	movs	r2, #34	; 0x22
 80027c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	4a25      	ldr	r2, [pc, #148]	; (8002864 <HAL_UART_Receive_DMA+0xf4>)
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	4a24      	ldr	r2, [pc, #144]	; (8002868 <HAL_UART_Receive_DMA+0xf8>)
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_UART_Receive_DMA+0xfc>)
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	2200      	movs	r2, #0
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	f7fe fee3 	bl	80015cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002832:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	6952      	ldr	r2, [r2, #20]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	6952      	ldr	r2, [r2, #20]
 800284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002852:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	08002a8d 	.word	0x08002a8d
 8002868:	08002af5 	.word	0x08002af5
 800286c:	08002b11 	.word	0x08002b11

08002870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_UART_IRQHandler+0x52>
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa6e 	bl	8002d9c <UART_Receive_IT>
      return;
 80028c0:	e0cc      	b.n	8002a5c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80ab 	beq.w	8002a20 <HAL_UART_IRQHandler+0x1b0>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_UART_IRQHandler+0x70>
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a0 	beq.w	8002a20 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_UART_IRQHandler+0x90>
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_UART_IRQHandler+0xb0>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	f043 0202 	orr.w	r2, r3, #2
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_UART_IRQHandler+0xd0>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_UART_IRQHandler+0xf0>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	f043 0208 	orr.w	r2, r3, #8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d078      	beq.n	8002a5a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_UART_IRQHandler+0x112>
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fa0d 	bl	8002d9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <HAL_UART_IRQHandler+0x13a>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d031      	beq.n	8002a0e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f959 	bl	8002c62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d023      	beq.n	8002a06 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	6952      	ldr	r2, [r2, #20]
 80029c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d013      	beq.n	80029fe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_UART_IRQHandler+0x1f4>)
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fe52 	bl	800168c <HAL_DMA_Abort_IT>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f8:	4610      	mov	r0, r2
 80029fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	e00e      	b.n	8002a1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fafa 	bl	8000ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e00a      	b.n	8002a1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe faf6 	bl	8000ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e006      	b.n	8002a1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe faf2 	bl	8000ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a1a:	e01e      	b.n	8002a5a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	bf00      	nop
    return;
 8002a1e:	e01c      	b.n	8002a5a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_UART_IRQHandler+0x1cc>
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f945 	bl	8002cc4 <UART_Transmit_IT>
    return;
 8002a3a:	e00f      	b.n	8002a5c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_UART_IRQHandler+0x1ec>
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f98b 	bl	8002d6c <UART_EndTransmit_IT>
    return;
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002a5a:	bf00      	nop
  }
}
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08002c9d 	.word	0x08002c9d

08002a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11e      	bne.n	8002ae6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	68d2      	ldr	r2, [r2, #12]
 8002ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002abc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	6952      	ldr	r2, [r2, #20]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	6952      	ldr	r2, [r2, #20]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002adc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7fe fa74 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff ffb9 	bl	8002a7a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b21      	cmp	r3, #33	; 0x21
 8002b42:	d108      	bne.n	8002b56 <UART_DMAError+0x46>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f000 f871 	bl	8002c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b22      	cmp	r3, #34	; 0x22
 8002b76:	d108      	bne.n	8002b8a <UART_DMAError+0x7a>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2200      	movs	r2, #0
 8002b82:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002b84:	68b8      	ldr	r0, [r7, #8]
 8002b86:	f000 f86c 	bl	8002c62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b96:	68b8      	ldr	r0, [r7, #8]
 8002b98:	f7fe fa2e 	bl	8000ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb4:	e02c      	b.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d028      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bc4:	f7fe fb62 	bl	800128c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d91d      	bls.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002be2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	6952      	ldr	r2, [r2, #20]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e00f      	b.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	401a      	ands	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d0c3      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c4e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	68d2      	ldr	r2, [r2, #12]
 8002c74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c78:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	6952      	ldr	r2, [r2, #20]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7fe f99e 	bl	8000ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b21      	cmp	r3, #33	; 0x21
 8002cd6:	d143      	bne.n	8002d60 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce0:	d119      	bne.n	8002d16 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	8812      	ldrh	r2, [r2, #0]
 8002cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	1c9a      	adds	r2, r3, #2
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	621a      	str	r2, [r3, #32]
 8002d08:	e00e      	b.n	8002d28 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	621a      	str	r2, [r3, #32]
 8002d14:	e008      	b.n	8002d28 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	1c58      	adds	r0, r3, #1
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	6208      	str	r0, [r1, #32]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4619      	mov	r1, r3
 8002d36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	68d2      	ldr	r2, [r2, #12]
 8002d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fe6b 	bl	8002a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b22      	cmp	r3, #34	; 0x22
 8002dae:	d171      	bne.n	8002e94 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d123      	bne.n	8002e02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10e      	bne.n	8002de6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	1c9a      	adds	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
 8002de4:	e029      	b.n	8002e3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8002e00:	e01b      	b.n	8002e3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6291      	str	r1, [r2, #40]	; 0x28
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	6852      	ldr	r2, [r2, #4]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e00c      	b.n	8002e3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	1c59      	adds	r1, r3, #1
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6291      	str	r1, [r2, #40]	; 0x28
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	6852      	ldr	r2, [r2, #4]
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4619      	mov	r1, r3
 8002e48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d120      	bne.n	8002e90 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	68d2      	ldr	r2, [r2, #12]
 8002e58:	f022 0220 	bic.w	r2, r2, #32
 8002e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	68d2      	ldr	r2, [r2, #12]
 8002e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6952      	ldr	r2, [r2, #20]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f8a4 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e002      	b.n	8002e96 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	6912      	ldr	r2, [r2, #16]
 8002eb2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68d2      	ldr	r2, [r2, #12]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ede:	f023 030c 	bic.w	r3, r3, #12
 8002ee2:	68f9      	ldr	r1, [r7, #12]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	6952      	ldr	r2, [r2, #20]
 8002ef2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6992      	ldr	r2, [r2, #24]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <UART_SetConfig+0x1ac>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d14e      	bne.n	8002fa6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7ff fa9a 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8002f0c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	4a49      	ldr	r2, [pc, #292]	; (8003050 <UART_SetConfig+0x1b0>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	0118      	lsls	r0, r3, #4
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009a      	lsls	r2, r3, #2
 8002f3c:	441a      	add	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <UART_SetConfig+0x1b0>)
 8002f4a:	fba3 4302 	umull	r4, r3, r3, r2
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	2464      	movs	r4, #100	; 0x64
 8002f52:	fb04 f303 	mul.w	r3, r4, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	3332      	adds	r3, #50	; 0x32
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <UART_SetConfig+0x1b0>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f68:	4418      	add	r0, r3
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009a      	lsls	r2, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f80:	4b33      	ldr	r3, [pc, #204]	; (8003050 <UART_SetConfig+0x1b0>)
 8002f82:	fba3 4302 	umull	r4, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2464      	movs	r4, #100	; 0x64
 8002f8a:	fb04 f303 	mul.w	r3, r4, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	4a2e      	ldr	r2, [pc, #184]	; (8003050 <UART_SetConfig+0x1b0>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	4403      	add	r3, r0
 8002fa2:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002fa4:	e04d      	b.n	8003042 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fa6:	f7ff fa37 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002faa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009a      	lsls	r2, r3, #2
 8002fba:	441a      	add	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <UART_SetConfig+0x1b0>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	0118      	lsls	r0, r3, #4
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009a      	lsls	r2, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <UART_SetConfig+0x1b0>)
 8002fe8:	fba3 4302 	umull	r4, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2464      	movs	r4, #100	; 0x64
 8002ff0:	fb04 f303 	mul.w	r3, r4, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <UART_SetConfig+0x1b0>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003006:	4418      	add	r0, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009a      	lsls	r2, r3, #2
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	fbb2 f2f3 	udiv	r2, r2, r3
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <UART_SetConfig+0x1b0>)
 8003020:	fba3 4302 	umull	r4, r3, r3, r2
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	2464      	movs	r4, #100	; 0x64
 8003028:	fb04 f303 	mul.w	r3, r4, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	3332      	adds	r3, #50	; 0x32
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <UART_SetConfig+0x1b0>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4403      	add	r3, r0
 8003040:	608b      	str	r3, [r1, #8]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	40013800 	.word	0x40013800
 8003050:	51eb851f 	.word	0x51eb851f

08003054 <main>:
 */


#include "main.h"

int main(void){
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  hwInit();
 8003058:	f7fe f8a4 	bl	80011a4 <hwInit>
  apInit();
 800305c:	f7fd f882 	bl	8000164 <apInit>

  apMain();
 8003060:	f7fd f8a2 	bl	80001a8 <apMain>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <__libc_init_array>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	2500      	movs	r5, #0
 8003070:	4e0c      	ldr	r6, [pc, #48]	; (80030a4 <__libc_init_array+0x38>)
 8003072:	4c0d      	ldr	r4, [pc, #52]	; (80030a8 <__libc_init_array+0x3c>)
 8003074:	1ba4      	subs	r4, r4, r6
 8003076:	10a4      	asrs	r4, r4, #2
 8003078:	42a5      	cmp	r5, r4
 800307a:	d109      	bne.n	8003090 <__libc_init_array+0x24>
 800307c:	f000 fc72 	bl	8003964 <_init>
 8003080:	2500      	movs	r5, #0
 8003082:	4e0a      	ldr	r6, [pc, #40]	; (80030ac <__libc_init_array+0x40>)
 8003084:	4c0a      	ldr	r4, [pc, #40]	; (80030b0 <__libc_init_array+0x44>)
 8003086:	1ba4      	subs	r4, r4, r6
 8003088:	10a4      	asrs	r4, r4, #2
 800308a:	42a5      	cmp	r5, r4
 800308c:	d105      	bne.n	800309a <__libc_init_array+0x2e>
 800308e:	bd70      	pop	{r4, r5, r6, pc}
 8003090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003094:	4798      	blx	r3
 8003096:	3501      	adds	r5, #1
 8003098:	e7ee      	b.n	8003078 <__libc_init_array+0xc>
 800309a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800309e:	4798      	blx	r3
 80030a0:	3501      	adds	r5, #1
 80030a2:	e7f2      	b.n	800308a <__libc_init_array+0x1e>
 80030a4:	08003a1c 	.word	0x08003a1c
 80030a8:	08003a1c 	.word	0x08003a1c
 80030ac:	08003a1c 	.word	0x08003a1c
 80030b0:	08003a20 	.word	0x08003a20

080030b4 <memset>:
 80030b4:	4603      	mov	r3, r0
 80030b6:	4402      	add	r2, r0
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d100      	bne.n	80030be <memset+0xa>
 80030bc:	4770      	bx	lr
 80030be:	f803 1b01 	strb.w	r1, [r3], #1
 80030c2:	e7f9      	b.n	80030b8 <memset+0x4>

080030c4 <_vsniprintf_r>:
 80030c4:	b530      	push	{r4, r5, lr}
 80030c6:	1e14      	subs	r4, r2, #0
 80030c8:	4605      	mov	r5, r0
 80030ca:	b09b      	sub	sp, #108	; 0x6c
 80030cc:	4618      	mov	r0, r3
 80030ce:	da05      	bge.n	80030dc <_vsniprintf_r+0x18>
 80030d0:	238b      	movs	r3, #139	; 0x8b
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	b01b      	add	sp, #108	; 0x6c
 80030da:	bd30      	pop	{r4, r5, pc}
 80030dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80030e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80030e4:	bf0c      	ite	eq
 80030e6:	4623      	moveq	r3, r4
 80030e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	9305      	str	r3, [sp, #20]
 80030f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030f4:	9100      	str	r1, [sp, #0]
 80030f6:	9104      	str	r1, [sp, #16]
 80030f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80030fc:	4602      	mov	r2, r0
 80030fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003100:	4669      	mov	r1, sp
 8003102:	4628      	mov	r0, r5
 8003104:	f000 f874 	bl	80031f0 <_svfiprintf_r>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	bfbc      	itt	lt
 800310c:	238b      	movlt	r3, #139	; 0x8b
 800310e:	602b      	strlt	r3, [r5, #0]
 8003110:	2c00      	cmp	r4, #0
 8003112:	d0e1      	beq.n	80030d8 <_vsniprintf_r+0x14>
 8003114:	2200      	movs	r2, #0
 8003116:	9b00      	ldr	r3, [sp, #0]
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e7dd      	b.n	80030d8 <_vsniprintf_r+0x14>

0800311c <vsniprintf>:
 800311c:	b507      	push	{r0, r1, r2, lr}
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	460a      	mov	r2, r1
 8003124:	4601      	mov	r1, r0
 8003126:	4803      	ldr	r0, [pc, #12]	; (8003134 <vsniprintf+0x18>)
 8003128:	6800      	ldr	r0, [r0, #0]
 800312a:	f7ff ffcb 	bl	80030c4 <_vsniprintf_r>
 800312e:	b003      	add	sp, #12
 8003130:	f85d fb04 	ldr.w	pc, [sp], #4
 8003134:	2000000c 	.word	0x2000000c

08003138 <__ssputs_r>:
 8003138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800313c:	688e      	ldr	r6, [r1, #8]
 800313e:	4682      	mov	sl, r0
 8003140:	429e      	cmp	r6, r3
 8003142:	460c      	mov	r4, r1
 8003144:	4691      	mov	r9, r2
 8003146:	4698      	mov	r8, r3
 8003148:	d835      	bhi.n	80031b6 <__ssputs_r+0x7e>
 800314a:	898a      	ldrh	r2, [r1, #12]
 800314c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003150:	d031      	beq.n	80031b6 <__ssputs_r+0x7e>
 8003152:	2302      	movs	r3, #2
 8003154:	6825      	ldr	r5, [r4, #0]
 8003156:	6909      	ldr	r1, [r1, #16]
 8003158:	1a6f      	subs	r7, r5, r1
 800315a:	6965      	ldr	r5, [r4, #20]
 800315c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003160:	fb95 f5f3 	sdiv	r5, r5, r3
 8003164:	f108 0301 	add.w	r3, r8, #1
 8003168:	443b      	add	r3, r7
 800316a:	429d      	cmp	r5, r3
 800316c:	bf38      	it	cc
 800316e:	461d      	movcc	r5, r3
 8003170:	0553      	lsls	r3, r2, #21
 8003172:	d531      	bpl.n	80031d8 <__ssputs_r+0xa0>
 8003174:	4629      	mov	r1, r5
 8003176:	f000 fb47 	bl	8003808 <_malloc_r>
 800317a:	4606      	mov	r6, r0
 800317c:	b950      	cbnz	r0, 8003194 <__ssputs_r+0x5c>
 800317e:	230c      	movs	r3, #12
 8003180:	f8ca 3000 	str.w	r3, [sl]
 8003184:	89a3      	ldrh	r3, [r4, #12]
 8003186:	f04f 30ff 	mov.w	r0, #4294967295
 800318a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318e:	81a3      	strh	r3, [r4, #12]
 8003190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003194:	463a      	mov	r2, r7
 8003196:	6921      	ldr	r1, [r4, #16]
 8003198:	f000 fac4 	bl	8003724 <memcpy>
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a6:	81a3      	strh	r3, [r4, #12]
 80031a8:	6126      	str	r6, [r4, #16]
 80031aa:	443e      	add	r6, r7
 80031ac:	6026      	str	r6, [r4, #0]
 80031ae:	4646      	mov	r6, r8
 80031b0:	6165      	str	r5, [r4, #20]
 80031b2:	1bed      	subs	r5, r5, r7
 80031b4:	60a5      	str	r5, [r4, #8]
 80031b6:	4546      	cmp	r6, r8
 80031b8:	bf28      	it	cs
 80031ba:	4646      	movcs	r6, r8
 80031bc:	4649      	mov	r1, r9
 80031be:	4632      	mov	r2, r6
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	f000 faba 	bl	800373a <memmove>
 80031c6:	68a3      	ldr	r3, [r4, #8]
 80031c8:	2000      	movs	r0, #0
 80031ca:	1b9b      	subs	r3, r3, r6
 80031cc:	60a3      	str	r3, [r4, #8]
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	441e      	add	r6, r3
 80031d2:	6026      	str	r6, [r4, #0]
 80031d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d8:	462a      	mov	r2, r5
 80031da:	f000 fb73 	bl	80038c4 <_realloc_r>
 80031de:	4606      	mov	r6, r0
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d1e1      	bne.n	80031a8 <__ssputs_r+0x70>
 80031e4:	6921      	ldr	r1, [r4, #16]
 80031e6:	4650      	mov	r0, sl
 80031e8:	f000 fac2 	bl	8003770 <_free_r>
 80031ec:	e7c7      	b.n	800317e <__ssputs_r+0x46>
	...

080031f0 <_svfiprintf_r>:
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	b09d      	sub	sp, #116	; 0x74
 80031f6:	9303      	str	r3, [sp, #12]
 80031f8:	898b      	ldrh	r3, [r1, #12]
 80031fa:	4680      	mov	r8, r0
 80031fc:	061c      	lsls	r4, r3, #24
 80031fe:	460d      	mov	r5, r1
 8003200:	4616      	mov	r6, r2
 8003202:	d50f      	bpl.n	8003224 <_svfiprintf_r+0x34>
 8003204:	690b      	ldr	r3, [r1, #16]
 8003206:	b96b      	cbnz	r3, 8003224 <_svfiprintf_r+0x34>
 8003208:	2140      	movs	r1, #64	; 0x40
 800320a:	f000 fafd 	bl	8003808 <_malloc_r>
 800320e:	6028      	str	r0, [r5, #0]
 8003210:	6128      	str	r0, [r5, #16]
 8003212:	b928      	cbnz	r0, 8003220 <_svfiprintf_r+0x30>
 8003214:	230c      	movs	r3, #12
 8003216:	f8c8 3000 	str.w	r3, [r8]
 800321a:	f04f 30ff 	mov.w	r0, #4294967295
 800321e:	e0c4      	b.n	80033aa <_svfiprintf_r+0x1ba>
 8003220:	2340      	movs	r3, #64	; 0x40
 8003222:	616b      	str	r3, [r5, #20]
 8003224:	2300      	movs	r3, #0
 8003226:	9309      	str	r3, [sp, #36]	; 0x24
 8003228:	2320      	movs	r3, #32
 800322a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800322e:	2330      	movs	r3, #48	; 0x30
 8003230:	f04f 0b01 	mov.w	fp, #1
 8003234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003238:	4637      	mov	r7, r6
 800323a:	463c      	mov	r4, r7
 800323c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d13c      	bne.n	80032be <_svfiprintf_r+0xce>
 8003244:	ebb7 0a06 	subs.w	sl, r7, r6
 8003248:	d00b      	beq.n	8003262 <_svfiprintf_r+0x72>
 800324a:	4653      	mov	r3, sl
 800324c:	4632      	mov	r2, r6
 800324e:	4629      	mov	r1, r5
 8003250:	4640      	mov	r0, r8
 8003252:	f7ff ff71 	bl	8003138 <__ssputs_r>
 8003256:	3001      	adds	r0, #1
 8003258:	f000 80a2 	beq.w	80033a0 <_svfiprintf_r+0x1b0>
 800325c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800325e:	4453      	add	r3, sl
 8003260:	9309      	str	r3, [sp, #36]	; 0x24
 8003262:	783b      	ldrb	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 809b 	beq.w	80033a0 <_svfiprintf_r+0x1b0>
 800326a:	2300      	movs	r3, #0
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	9304      	str	r3, [sp, #16]
 8003272:	9307      	str	r3, [sp, #28]
 8003274:	9205      	str	r2, [sp, #20]
 8003276:	9306      	str	r3, [sp, #24]
 8003278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800327c:	931a      	str	r3, [sp, #104]	; 0x68
 800327e:	2205      	movs	r2, #5
 8003280:	7821      	ldrb	r1, [r4, #0]
 8003282:	4850      	ldr	r0, [pc, #320]	; (80033c4 <_svfiprintf_r+0x1d4>)
 8003284:	f000 fa40 	bl	8003708 <memchr>
 8003288:	1c67      	adds	r7, r4, #1
 800328a:	9b04      	ldr	r3, [sp, #16]
 800328c:	b9d8      	cbnz	r0, 80032c6 <_svfiprintf_r+0xd6>
 800328e:	06d9      	lsls	r1, r3, #27
 8003290:	bf44      	itt	mi
 8003292:	2220      	movmi	r2, #32
 8003294:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003298:	071a      	lsls	r2, r3, #28
 800329a:	bf44      	itt	mi
 800329c:	222b      	movmi	r2, #43	; 0x2b
 800329e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032a2:	7822      	ldrb	r2, [r4, #0]
 80032a4:	2a2a      	cmp	r2, #42	; 0x2a
 80032a6:	d016      	beq.n	80032d6 <_svfiprintf_r+0xe6>
 80032a8:	2100      	movs	r1, #0
 80032aa:	200a      	movs	r0, #10
 80032ac:	9a07      	ldr	r2, [sp, #28]
 80032ae:	4627      	mov	r7, r4
 80032b0:	783b      	ldrb	r3, [r7, #0]
 80032b2:	3401      	adds	r4, #1
 80032b4:	3b30      	subs	r3, #48	; 0x30
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	d950      	bls.n	800335c <_svfiprintf_r+0x16c>
 80032ba:	b1c9      	cbz	r1, 80032f0 <_svfiprintf_r+0x100>
 80032bc:	e011      	b.n	80032e2 <_svfiprintf_r+0xf2>
 80032be:	2b25      	cmp	r3, #37	; 0x25
 80032c0:	d0c0      	beq.n	8003244 <_svfiprintf_r+0x54>
 80032c2:	4627      	mov	r7, r4
 80032c4:	e7b9      	b.n	800323a <_svfiprintf_r+0x4a>
 80032c6:	4a3f      	ldr	r2, [pc, #252]	; (80033c4 <_svfiprintf_r+0x1d4>)
 80032c8:	463c      	mov	r4, r7
 80032ca:	1a80      	subs	r0, r0, r2
 80032cc:	fa0b f000 	lsl.w	r0, fp, r0
 80032d0:	4318      	orrs	r0, r3
 80032d2:	9004      	str	r0, [sp, #16]
 80032d4:	e7d3      	b.n	800327e <_svfiprintf_r+0x8e>
 80032d6:	9a03      	ldr	r2, [sp, #12]
 80032d8:	1d11      	adds	r1, r2, #4
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	9103      	str	r1, [sp, #12]
 80032de:	2a00      	cmp	r2, #0
 80032e0:	db01      	blt.n	80032e6 <_svfiprintf_r+0xf6>
 80032e2:	9207      	str	r2, [sp, #28]
 80032e4:	e004      	b.n	80032f0 <_svfiprintf_r+0x100>
 80032e6:	4252      	negs	r2, r2
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	9207      	str	r2, [sp, #28]
 80032ee:	9304      	str	r3, [sp, #16]
 80032f0:	783b      	ldrb	r3, [r7, #0]
 80032f2:	2b2e      	cmp	r3, #46	; 0x2e
 80032f4:	d10d      	bne.n	8003312 <_svfiprintf_r+0x122>
 80032f6:	787b      	ldrb	r3, [r7, #1]
 80032f8:	1c79      	adds	r1, r7, #1
 80032fa:	2b2a      	cmp	r3, #42	; 0x2a
 80032fc:	d132      	bne.n	8003364 <_svfiprintf_r+0x174>
 80032fe:	9b03      	ldr	r3, [sp, #12]
 8003300:	3702      	adds	r7, #2
 8003302:	1d1a      	adds	r2, r3, #4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	9203      	str	r2, [sp, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	bfb8      	it	lt
 800330c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003310:	9305      	str	r3, [sp, #20]
 8003312:	4c2d      	ldr	r4, [pc, #180]	; (80033c8 <_svfiprintf_r+0x1d8>)
 8003314:	2203      	movs	r2, #3
 8003316:	7839      	ldrb	r1, [r7, #0]
 8003318:	4620      	mov	r0, r4
 800331a:	f000 f9f5 	bl	8003708 <memchr>
 800331e:	b138      	cbz	r0, 8003330 <_svfiprintf_r+0x140>
 8003320:	2340      	movs	r3, #64	; 0x40
 8003322:	1b00      	subs	r0, r0, r4
 8003324:	fa03 f000 	lsl.w	r0, r3, r0
 8003328:	9b04      	ldr	r3, [sp, #16]
 800332a:	3701      	adds	r7, #1
 800332c:	4303      	orrs	r3, r0
 800332e:	9304      	str	r3, [sp, #16]
 8003330:	7839      	ldrb	r1, [r7, #0]
 8003332:	2206      	movs	r2, #6
 8003334:	4825      	ldr	r0, [pc, #148]	; (80033cc <_svfiprintf_r+0x1dc>)
 8003336:	1c7e      	adds	r6, r7, #1
 8003338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800333c:	f000 f9e4 	bl	8003708 <memchr>
 8003340:	2800      	cmp	r0, #0
 8003342:	d035      	beq.n	80033b0 <_svfiprintf_r+0x1c0>
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <_svfiprintf_r+0x1e0>)
 8003346:	b9fb      	cbnz	r3, 8003388 <_svfiprintf_r+0x198>
 8003348:	9b03      	ldr	r3, [sp, #12]
 800334a:	3307      	adds	r3, #7
 800334c:	f023 0307 	bic.w	r3, r3, #7
 8003350:	3308      	adds	r3, #8
 8003352:	9303      	str	r3, [sp, #12]
 8003354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003356:	444b      	add	r3, r9
 8003358:	9309      	str	r3, [sp, #36]	; 0x24
 800335a:	e76d      	b.n	8003238 <_svfiprintf_r+0x48>
 800335c:	fb00 3202 	mla	r2, r0, r2, r3
 8003360:	2101      	movs	r1, #1
 8003362:	e7a4      	b.n	80032ae <_svfiprintf_r+0xbe>
 8003364:	2300      	movs	r3, #0
 8003366:	240a      	movs	r4, #10
 8003368:	4618      	mov	r0, r3
 800336a:	9305      	str	r3, [sp, #20]
 800336c:	460f      	mov	r7, r1
 800336e:	783a      	ldrb	r2, [r7, #0]
 8003370:	3101      	adds	r1, #1
 8003372:	3a30      	subs	r2, #48	; 0x30
 8003374:	2a09      	cmp	r2, #9
 8003376:	d903      	bls.n	8003380 <_svfiprintf_r+0x190>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ca      	beq.n	8003312 <_svfiprintf_r+0x122>
 800337c:	9005      	str	r0, [sp, #20]
 800337e:	e7c8      	b.n	8003312 <_svfiprintf_r+0x122>
 8003380:	fb04 2000 	mla	r0, r4, r0, r2
 8003384:	2301      	movs	r3, #1
 8003386:	e7f1      	b.n	800336c <_svfiprintf_r+0x17c>
 8003388:	ab03      	add	r3, sp, #12
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	462a      	mov	r2, r5
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <_svfiprintf_r+0x1e4>)
 8003390:	a904      	add	r1, sp, #16
 8003392:	4640      	mov	r0, r8
 8003394:	f3af 8000 	nop.w
 8003398:	f1b0 3fff 	cmp.w	r0, #4294967295
 800339c:	4681      	mov	r9, r0
 800339e:	d1d9      	bne.n	8003354 <_svfiprintf_r+0x164>
 80033a0:	89ab      	ldrh	r3, [r5, #12]
 80033a2:	065b      	lsls	r3, r3, #25
 80033a4:	f53f af39 	bmi.w	800321a <_svfiprintf_r+0x2a>
 80033a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033aa:	b01d      	add	sp, #116	; 0x74
 80033ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b0:	ab03      	add	r3, sp, #12
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	462a      	mov	r2, r5
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <_svfiprintf_r+0x1e4>)
 80033b8:	a904      	add	r1, sp, #16
 80033ba:	4640      	mov	r0, r8
 80033bc:	f000 f884 	bl	80034c8 <_printf_i>
 80033c0:	e7ea      	b.n	8003398 <_svfiprintf_r+0x1a8>
 80033c2:	bf00      	nop
 80033c4:	080039e8 	.word	0x080039e8
 80033c8:	080039ee 	.word	0x080039ee
 80033cc:	080039f2 	.word	0x080039f2
 80033d0:	00000000 	.word	0x00000000
 80033d4:	08003139 	.word	0x08003139

080033d8 <_printf_common>:
 80033d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033dc:	4691      	mov	r9, r2
 80033de:	461f      	mov	r7, r3
 80033e0:	688a      	ldr	r2, [r1, #8]
 80033e2:	690b      	ldr	r3, [r1, #16]
 80033e4:	4606      	mov	r6, r0
 80033e6:	4293      	cmp	r3, r2
 80033e8:	bfb8      	it	lt
 80033ea:	4613      	movlt	r3, r2
 80033ec:	f8c9 3000 	str.w	r3, [r9]
 80033f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033f4:	460c      	mov	r4, r1
 80033f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033fa:	b112      	cbz	r2, 8003402 <_printf_common+0x2a>
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8c9 3000 	str.w	r3, [r9]
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	0699      	lsls	r1, r3, #26
 8003406:	bf42      	ittt	mi
 8003408:	f8d9 3000 	ldrmi.w	r3, [r9]
 800340c:	3302      	addmi	r3, #2
 800340e:	f8c9 3000 	strmi.w	r3, [r9]
 8003412:	6825      	ldr	r5, [r4, #0]
 8003414:	f015 0506 	ands.w	r5, r5, #6
 8003418:	d107      	bne.n	800342a <_printf_common+0x52>
 800341a:	f104 0a19 	add.w	sl, r4, #25
 800341e:	68e3      	ldr	r3, [r4, #12]
 8003420:	f8d9 2000 	ldr.w	r2, [r9]
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	429d      	cmp	r5, r3
 8003428:	db2a      	blt.n	8003480 <_printf_common+0xa8>
 800342a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	3300      	adds	r3, #0
 8003432:	bf18      	it	ne
 8003434:	2301      	movne	r3, #1
 8003436:	0692      	lsls	r2, r2, #26
 8003438:	d42f      	bmi.n	800349a <_printf_common+0xc2>
 800343a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800343e:	4639      	mov	r1, r7
 8003440:	4630      	mov	r0, r6
 8003442:	47c0      	blx	r8
 8003444:	3001      	adds	r0, #1
 8003446:	d022      	beq.n	800348e <_printf_common+0xb6>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	68e5      	ldr	r5, [r4, #12]
 800344c:	f003 0306 	and.w	r3, r3, #6
 8003450:	2b04      	cmp	r3, #4
 8003452:	bf18      	it	ne
 8003454:	2500      	movne	r5, #0
 8003456:	f8d9 2000 	ldr.w	r2, [r9]
 800345a:	f04f 0900 	mov.w	r9, #0
 800345e:	bf08      	it	eq
 8003460:	1aad      	subeq	r5, r5, r2
 8003462:	68a3      	ldr	r3, [r4, #8]
 8003464:	6922      	ldr	r2, [r4, #16]
 8003466:	bf08      	it	eq
 8003468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800346c:	4293      	cmp	r3, r2
 800346e:	bfc4      	itt	gt
 8003470:	1a9b      	subgt	r3, r3, r2
 8003472:	18ed      	addgt	r5, r5, r3
 8003474:	341a      	adds	r4, #26
 8003476:	454d      	cmp	r5, r9
 8003478:	d11b      	bne.n	80034b2 <_printf_common+0xda>
 800347a:	2000      	movs	r0, #0
 800347c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003480:	2301      	movs	r3, #1
 8003482:	4652      	mov	r2, sl
 8003484:	4639      	mov	r1, r7
 8003486:	4630      	mov	r0, r6
 8003488:	47c0      	blx	r8
 800348a:	3001      	adds	r0, #1
 800348c:	d103      	bne.n	8003496 <_printf_common+0xbe>
 800348e:	f04f 30ff 	mov.w	r0, #4294967295
 8003492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003496:	3501      	adds	r5, #1
 8003498:	e7c1      	b.n	800341e <_printf_common+0x46>
 800349a:	2030      	movs	r0, #48	; 0x30
 800349c:	18e1      	adds	r1, r4, r3
 800349e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034a8:	4422      	add	r2, r4
 80034aa:	3302      	adds	r3, #2
 80034ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034b0:	e7c3      	b.n	800343a <_printf_common+0x62>
 80034b2:	2301      	movs	r3, #1
 80034b4:	4622      	mov	r2, r4
 80034b6:	4639      	mov	r1, r7
 80034b8:	4630      	mov	r0, r6
 80034ba:	47c0      	blx	r8
 80034bc:	3001      	adds	r0, #1
 80034be:	d0e6      	beq.n	800348e <_printf_common+0xb6>
 80034c0:	f109 0901 	add.w	r9, r9, #1
 80034c4:	e7d7      	b.n	8003476 <_printf_common+0x9e>
	...

080034c8 <_printf_i>:
 80034c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034cc:	4617      	mov	r7, r2
 80034ce:	7e0a      	ldrb	r2, [r1, #24]
 80034d0:	b085      	sub	sp, #20
 80034d2:	2a6e      	cmp	r2, #110	; 0x6e
 80034d4:	4698      	mov	r8, r3
 80034d6:	4606      	mov	r6, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80034e0:	f000 80bc 	beq.w	800365c <_printf_i+0x194>
 80034e4:	d81a      	bhi.n	800351c <_printf_i+0x54>
 80034e6:	2a63      	cmp	r2, #99	; 0x63
 80034e8:	d02e      	beq.n	8003548 <_printf_i+0x80>
 80034ea:	d80a      	bhi.n	8003502 <_printf_i+0x3a>
 80034ec:	2a00      	cmp	r2, #0
 80034ee:	f000 80c8 	beq.w	8003682 <_printf_i+0x1ba>
 80034f2:	2a58      	cmp	r2, #88	; 0x58
 80034f4:	f000 808a 	beq.w	800360c <_printf_i+0x144>
 80034f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003500:	e02a      	b.n	8003558 <_printf_i+0x90>
 8003502:	2a64      	cmp	r2, #100	; 0x64
 8003504:	d001      	beq.n	800350a <_printf_i+0x42>
 8003506:	2a69      	cmp	r2, #105	; 0x69
 8003508:	d1f6      	bne.n	80034f8 <_printf_i+0x30>
 800350a:	6821      	ldr	r1, [r4, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003512:	d023      	beq.n	800355c <_printf_i+0x94>
 8003514:	1d11      	adds	r1, r2, #4
 8003516:	6019      	str	r1, [r3, #0]
 8003518:	6813      	ldr	r3, [r2, #0]
 800351a:	e027      	b.n	800356c <_printf_i+0xa4>
 800351c:	2a73      	cmp	r2, #115	; 0x73
 800351e:	f000 80b4 	beq.w	800368a <_printf_i+0x1c2>
 8003522:	d808      	bhi.n	8003536 <_printf_i+0x6e>
 8003524:	2a6f      	cmp	r2, #111	; 0x6f
 8003526:	d02a      	beq.n	800357e <_printf_i+0xb6>
 8003528:	2a70      	cmp	r2, #112	; 0x70
 800352a:	d1e5      	bne.n	80034f8 <_printf_i+0x30>
 800352c:	680a      	ldr	r2, [r1, #0]
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	600a      	str	r2, [r1, #0]
 8003534:	e003      	b.n	800353e <_printf_i+0x76>
 8003536:	2a75      	cmp	r2, #117	; 0x75
 8003538:	d021      	beq.n	800357e <_printf_i+0xb6>
 800353a:	2a78      	cmp	r2, #120	; 0x78
 800353c:	d1dc      	bne.n	80034f8 <_printf_i+0x30>
 800353e:	2278      	movs	r2, #120	; 0x78
 8003540:	496f      	ldr	r1, [pc, #444]	; (8003700 <_printf_i+0x238>)
 8003542:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003546:	e064      	b.n	8003612 <_printf_i+0x14a>
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800354e:	1d11      	adds	r1, r2, #4
 8003550:	6019      	str	r1, [r3, #0]
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003558:	2301      	movs	r3, #1
 800355a:	e0a3      	b.n	80036a4 <_printf_i+0x1dc>
 800355c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003560:	f102 0104 	add.w	r1, r2, #4
 8003564:	6019      	str	r1, [r3, #0]
 8003566:	d0d7      	beq.n	8003518 <_printf_i+0x50>
 8003568:	f9b2 3000 	ldrsh.w	r3, [r2]
 800356c:	2b00      	cmp	r3, #0
 800356e:	da03      	bge.n	8003578 <_printf_i+0xb0>
 8003570:	222d      	movs	r2, #45	; 0x2d
 8003572:	425b      	negs	r3, r3
 8003574:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003578:	4962      	ldr	r1, [pc, #392]	; (8003704 <_printf_i+0x23c>)
 800357a:	220a      	movs	r2, #10
 800357c:	e017      	b.n	80035ae <_printf_i+0xe6>
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003586:	d003      	beq.n	8003590 <_printf_i+0xc8>
 8003588:	1d08      	adds	r0, r1, #4
 800358a:	6018      	str	r0, [r3, #0]
 800358c:	680b      	ldr	r3, [r1, #0]
 800358e:	e006      	b.n	800359e <_printf_i+0xd6>
 8003590:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003594:	f101 0004 	add.w	r0, r1, #4
 8003598:	6018      	str	r0, [r3, #0]
 800359a:	d0f7      	beq.n	800358c <_printf_i+0xc4>
 800359c:	880b      	ldrh	r3, [r1, #0]
 800359e:	2a6f      	cmp	r2, #111	; 0x6f
 80035a0:	bf14      	ite	ne
 80035a2:	220a      	movne	r2, #10
 80035a4:	2208      	moveq	r2, #8
 80035a6:	4957      	ldr	r1, [pc, #348]	; (8003704 <_printf_i+0x23c>)
 80035a8:	2000      	movs	r0, #0
 80035aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80035ae:	6865      	ldr	r5, [r4, #4]
 80035b0:	2d00      	cmp	r5, #0
 80035b2:	60a5      	str	r5, [r4, #8]
 80035b4:	f2c0 809c 	blt.w	80036f0 <_printf_i+0x228>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	f020 0004 	bic.w	r0, r0, #4
 80035be:	6020      	str	r0, [r4, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d13f      	bne.n	8003644 <_printf_i+0x17c>
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	f040 8095 	bne.w	80036f4 <_printf_i+0x22c>
 80035ca:	4675      	mov	r5, lr
 80035cc:	2a08      	cmp	r2, #8
 80035ce:	d10b      	bne.n	80035e8 <_printf_i+0x120>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	07da      	lsls	r2, r3, #31
 80035d4:	d508      	bpl.n	80035e8 <_printf_i+0x120>
 80035d6:	6923      	ldr	r3, [r4, #16]
 80035d8:	6862      	ldr	r2, [r4, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	bfde      	ittt	le
 80035de:	2330      	movle	r3, #48	; 0x30
 80035e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035e8:	ebae 0305 	sub.w	r3, lr, r5
 80035ec:	6123      	str	r3, [r4, #16]
 80035ee:	f8cd 8000 	str.w	r8, [sp]
 80035f2:	463b      	mov	r3, r7
 80035f4:	aa03      	add	r2, sp, #12
 80035f6:	4621      	mov	r1, r4
 80035f8:	4630      	mov	r0, r6
 80035fa:	f7ff feed 	bl	80033d8 <_printf_common>
 80035fe:	3001      	adds	r0, #1
 8003600:	d155      	bne.n	80036ae <_printf_i+0x1e6>
 8003602:	f04f 30ff 	mov.w	r0, #4294967295
 8003606:	b005      	add	sp, #20
 8003608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800360c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003610:	493c      	ldr	r1, [pc, #240]	; (8003704 <_printf_i+0x23c>)
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f012 0f80 	tst.w	r2, #128	; 0x80
 800361a:	f100 0504 	add.w	r5, r0, #4
 800361e:	601d      	str	r5, [r3, #0]
 8003620:	d001      	beq.n	8003626 <_printf_i+0x15e>
 8003622:	6803      	ldr	r3, [r0, #0]
 8003624:	e002      	b.n	800362c <_printf_i+0x164>
 8003626:	0655      	lsls	r5, r2, #25
 8003628:	d5fb      	bpl.n	8003622 <_printf_i+0x15a>
 800362a:	8803      	ldrh	r3, [r0, #0]
 800362c:	07d0      	lsls	r0, r2, #31
 800362e:	bf44      	itt	mi
 8003630:	f042 0220 	orrmi.w	r2, r2, #32
 8003634:	6022      	strmi	r2, [r4, #0]
 8003636:	b91b      	cbnz	r3, 8003640 <_printf_i+0x178>
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	f022 0220 	bic.w	r2, r2, #32
 800363e:	6022      	str	r2, [r4, #0]
 8003640:	2210      	movs	r2, #16
 8003642:	e7b1      	b.n	80035a8 <_printf_i+0xe0>
 8003644:	4675      	mov	r5, lr
 8003646:	fbb3 f0f2 	udiv	r0, r3, r2
 800364a:	fb02 3310 	mls	r3, r2, r0, r3
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003654:	4603      	mov	r3, r0
 8003656:	2800      	cmp	r0, #0
 8003658:	d1f5      	bne.n	8003646 <_printf_i+0x17e>
 800365a:	e7b7      	b.n	80035cc <_printf_i+0x104>
 800365c:	6808      	ldr	r0, [r1, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003664:	6949      	ldr	r1, [r1, #20]
 8003666:	d004      	beq.n	8003672 <_printf_i+0x1aa>
 8003668:	1d10      	adds	r0, r2, #4
 800366a:	6018      	str	r0, [r3, #0]
 800366c:	6813      	ldr	r3, [r2, #0]
 800366e:	6019      	str	r1, [r3, #0]
 8003670:	e007      	b.n	8003682 <_printf_i+0x1ba>
 8003672:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003676:	f102 0004 	add.w	r0, r2, #4
 800367a:	6018      	str	r0, [r3, #0]
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	d0f6      	beq.n	800366e <_printf_i+0x1a6>
 8003680:	8019      	strh	r1, [r3, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	4675      	mov	r5, lr
 8003686:	6123      	str	r3, [r4, #16]
 8003688:	e7b1      	b.n	80035ee <_printf_i+0x126>
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	1d11      	adds	r1, r2, #4
 800368e:	6019      	str	r1, [r3, #0]
 8003690:	6815      	ldr	r5, [r2, #0]
 8003692:	2100      	movs	r1, #0
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f836 	bl	8003708 <memchr>
 800369c:	b108      	cbz	r0, 80036a2 <_printf_i+0x1da>
 800369e:	1b40      	subs	r0, r0, r5
 80036a0:	6060      	str	r0, [r4, #4]
 80036a2:	6863      	ldr	r3, [r4, #4]
 80036a4:	6123      	str	r3, [r4, #16]
 80036a6:	2300      	movs	r3, #0
 80036a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ac:	e79f      	b.n	80035ee <_printf_i+0x126>
 80036ae:	6923      	ldr	r3, [r4, #16]
 80036b0:	462a      	mov	r2, r5
 80036b2:	4639      	mov	r1, r7
 80036b4:	4630      	mov	r0, r6
 80036b6:	47c0      	blx	r8
 80036b8:	3001      	adds	r0, #1
 80036ba:	d0a2      	beq.n	8003602 <_printf_i+0x13a>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	079b      	lsls	r3, r3, #30
 80036c0:	d507      	bpl.n	80036d2 <_printf_i+0x20a>
 80036c2:	2500      	movs	r5, #0
 80036c4:	f104 0919 	add.w	r9, r4, #25
 80036c8:	68e3      	ldr	r3, [r4, #12]
 80036ca:	9a03      	ldr	r2, [sp, #12]
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	429d      	cmp	r5, r3
 80036d0:	db05      	blt.n	80036de <_printf_i+0x216>
 80036d2:	68e0      	ldr	r0, [r4, #12]
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	4298      	cmp	r0, r3
 80036d8:	bfb8      	it	lt
 80036da:	4618      	movlt	r0, r3
 80036dc:	e793      	b.n	8003606 <_printf_i+0x13e>
 80036de:	2301      	movs	r3, #1
 80036e0:	464a      	mov	r2, r9
 80036e2:	4639      	mov	r1, r7
 80036e4:	4630      	mov	r0, r6
 80036e6:	47c0      	blx	r8
 80036e8:	3001      	adds	r0, #1
 80036ea:	d08a      	beq.n	8003602 <_printf_i+0x13a>
 80036ec:	3501      	adds	r5, #1
 80036ee:	e7eb      	b.n	80036c8 <_printf_i+0x200>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1a7      	bne.n	8003644 <_printf_i+0x17c>
 80036f4:	780b      	ldrb	r3, [r1, #0]
 80036f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036fe:	e765      	b.n	80035cc <_printf_i+0x104>
 8003700:	08003a0a 	.word	0x08003a0a
 8003704:	080039f9 	.word	0x080039f9

08003708 <memchr>:
 8003708:	b510      	push	{r4, lr}
 800370a:	b2c9      	uxtb	r1, r1
 800370c:	4402      	add	r2, r0
 800370e:	4290      	cmp	r0, r2
 8003710:	4603      	mov	r3, r0
 8003712:	d101      	bne.n	8003718 <memchr+0x10>
 8003714:	2000      	movs	r0, #0
 8003716:	bd10      	pop	{r4, pc}
 8003718:	781c      	ldrb	r4, [r3, #0]
 800371a:	3001      	adds	r0, #1
 800371c:	428c      	cmp	r4, r1
 800371e:	d1f6      	bne.n	800370e <memchr+0x6>
 8003720:	4618      	mov	r0, r3
 8003722:	bd10      	pop	{r4, pc}

08003724 <memcpy>:
 8003724:	b510      	push	{r4, lr}
 8003726:	1e43      	subs	r3, r0, #1
 8003728:	440a      	add	r2, r1
 800372a:	4291      	cmp	r1, r2
 800372c:	d100      	bne.n	8003730 <memcpy+0xc>
 800372e:	bd10      	pop	{r4, pc}
 8003730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003738:	e7f7      	b.n	800372a <memcpy+0x6>

0800373a <memmove>:
 800373a:	4288      	cmp	r0, r1
 800373c:	b510      	push	{r4, lr}
 800373e:	eb01 0302 	add.w	r3, r1, r2
 8003742:	d803      	bhi.n	800374c <memmove+0x12>
 8003744:	1e42      	subs	r2, r0, #1
 8003746:	4299      	cmp	r1, r3
 8003748:	d10c      	bne.n	8003764 <memmove+0x2a>
 800374a:	bd10      	pop	{r4, pc}
 800374c:	4298      	cmp	r0, r3
 800374e:	d2f9      	bcs.n	8003744 <memmove+0xa>
 8003750:	1881      	adds	r1, r0, r2
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	42d3      	cmn	r3, r2
 8003756:	d100      	bne.n	800375a <memmove+0x20>
 8003758:	bd10      	pop	{r4, pc}
 800375a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800375e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003762:	e7f7      	b.n	8003754 <memmove+0x1a>
 8003764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003768:	f802 4f01 	strb.w	r4, [r2, #1]!
 800376c:	e7eb      	b.n	8003746 <memmove+0xc>
	...

08003770 <_free_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4605      	mov	r5, r0
 8003774:	2900      	cmp	r1, #0
 8003776:	d043      	beq.n	8003800 <_free_r+0x90>
 8003778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377c:	1f0c      	subs	r4, r1, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	bfb8      	it	lt
 8003782:	18e4      	addlt	r4, r4, r3
 8003784:	f000 f8d4 	bl	8003930 <__malloc_lock>
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <_free_r+0x94>)
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	4610      	mov	r0, r2
 800378e:	b933      	cbnz	r3, 800379e <_free_r+0x2e>
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	6014      	str	r4, [r2, #0]
 8003794:	4628      	mov	r0, r5
 8003796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379a:	f000 b8ca 	b.w	8003932 <__malloc_unlock>
 800379e:	42a3      	cmp	r3, r4
 80037a0:	d90b      	bls.n	80037ba <_free_r+0x4a>
 80037a2:	6821      	ldr	r1, [r4, #0]
 80037a4:	1862      	adds	r2, r4, r1
 80037a6:	4293      	cmp	r3, r2
 80037a8:	bf01      	itttt	eq
 80037aa:	681a      	ldreq	r2, [r3, #0]
 80037ac:	685b      	ldreq	r3, [r3, #4]
 80037ae:	1852      	addeq	r2, r2, r1
 80037b0:	6022      	streq	r2, [r4, #0]
 80037b2:	6063      	str	r3, [r4, #4]
 80037b4:	6004      	str	r4, [r0, #0]
 80037b6:	e7ed      	b.n	8003794 <_free_r+0x24>
 80037b8:	4613      	mov	r3, r2
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	b10a      	cbz	r2, 80037c2 <_free_r+0x52>
 80037be:	42a2      	cmp	r2, r4
 80037c0:	d9fa      	bls.n	80037b8 <_free_r+0x48>
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	1858      	adds	r0, r3, r1
 80037c6:	42a0      	cmp	r0, r4
 80037c8:	d10b      	bne.n	80037e2 <_free_r+0x72>
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	4401      	add	r1, r0
 80037ce:	1858      	adds	r0, r3, r1
 80037d0:	4282      	cmp	r2, r0
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	d1de      	bne.n	8003794 <_free_r+0x24>
 80037d6:	6810      	ldr	r0, [r2, #0]
 80037d8:	6852      	ldr	r2, [r2, #4]
 80037da:	4401      	add	r1, r0
 80037dc:	6019      	str	r1, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	e7d8      	b.n	8003794 <_free_r+0x24>
 80037e2:	d902      	bls.n	80037ea <_free_r+0x7a>
 80037e4:	230c      	movs	r3, #12
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	e7d4      	b.n	8003794 <_free_r+0x24>
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	1821      	adds	r1, r4, r0
 80037ee:	428a      	cmp	r2, r1
 80037f0:	bf01      	itttt	eq
 80037f2:	6811      	ldreq	r1, [r2, #0]
 80037f4:	6852      	ldreq	r2, [r2, #4]
 80037f6:	1809      	addeq	r1, r1, r0
 80037f8:	6021      	streq	r1, [r4, #0]
 80037fa:	6062      	str	r2, [r4, #4]
 80037fc:	605c      	str	r4, [r3, #4]
 80037fe:	e7c9      	b.n	8003794 <_free_r+0x24>
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	20000150 	.word	0x20000150

08003808 <_malloc_r>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	1ccd      	adds	r5, r1, #3
 800380c:	f025 0503 	bic.w	r5, r5, #3
 8003810:	3508      	adds	r5, #8
 8003812:	2d0c      	cmp	r5, #12
 8003814:	bf38      	it	cc
 8003816:	250c      	movcc	r5, #12
 8003818:	2d00      	cmp	r5, #0
 800381a:	4606      	mov	r6, r0
 800381c:	db01      	blt.n	8003822 <_malloc_r+0x1a>
 800381e:	42a9      	cmp	r1, r5
 8003820:	d903      	bls.n	800382a <_malloc_r+0x22>
 8003822:	230c      	movs	r3, #12
 8003824:	6033      	str	r3, [r6, #0]
 8003826:	2000      	movs	r0, #0
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	f000 f881 	bl	8003930 <__malloc_lock>
 800382e:	4a23      	ldr	r2, [pc, #140]	; (80038bc <_malloc_r+0xb4>)
 8003830:	6814      	ldr	r4, [r2, #0]
 8003832:	4621      	mov	r1, r4
 8003834:	b991      	cbnz	r1, 800385c <_malloc_r+0x54>
 8003836:	4c22      	ldr	r4, [pc, #136]	; (80038c0 <_malloc_r+0xb8>)
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	b91b      	cbnz	r3, 8003844 <_malloc_r+0x3c>
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f867 	bl	8003910 <_sbrk_r>
 8003842:	6020      	str	r0, [r4, #0]
 8003844:	4629      	mov	r1, r5
 8003846:	4630      	mov	r0, r6
 8003848:	f000 f862 	bl	8003910 <_sbrk_r>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d126      	bne.n	800389e <_malloc_r+0x96>
 8003850:	230c      	movs	r3, #12
 8003852:	4630      	mov	r0, r6
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	f000 f86c 	bl	8003932 <__malloc_unlock>
 800385a:	e7e4      	b.n	8003826 <_malloc_r+0x1e>
 800385c:	680b      	ldr	r3, [r1, #0]
 800385e:	1b5b      	subs	r3, r3, r5
 8003860:	d41a      	bmi.n	8003898 <_malloc_r+0x90>
 8003862:	2b0b      	cmp	r3, #11
 8003864:	d90f      	bls.n	8003886 <_malloc_r+0x7e>
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	18cc      	adds	r4, r1, r3
 800386a:	50cd      	str	r5, [r1, r3]
 800386c:	4630      	mov	r0, r6
 800386e:	f000 f860 	bl	8003932 <__malloc_unlock>
 8003872:	f104 000b 	add.w	r0, r4, #11
 8003876:	1d23      	adds	r3, r4, #4
 8003878:	f020 0007 	bic.w	r0, r0, #7
 800387c:	1ac3      	subs	r3, r0, r3
 800387e:	d01b      	beq.n	80038b8 <_malloc_r+0xb0>
 8003880:	425a      	negs	r2, r3
 8003882:	50e2      	str	r2, [r4, r3]
 8003884:	bd70      	pop	{r4, r5, r6, pc}
 8003886:	428c      	cmp	r4, r1
 8003888:	bf0b      	itete	eq
 800388a:	6863      	ldreq	r3, [r4, #4]
 800388c:	684b      	ldrne	r3, [r1, #4]
 800388e:	6013      	streq	r3, [r2, #0]
 8003890:	6063      	strne	r3, [r4, #4]
 8003892:	bf18      	it	ne
 8003894:	460c      	movne	r4, r1
 8003896:	e7e9      	b.n	800386c <_malloc_r+0x64>
 8003898:	460c      	mov	r4, r1
 800389a:	6849      	ldr	r1, [r1, #4]
 800389c:	e7ca      	b.n	8003834 <_malloc_r+0x2c>
 800389e:	1cc4      	adds	r4, r0, #3
 80038a0:	f024 0403 	bic.w	r4, r4, #3
 80038a4:	42a0      	cmp	r0, r4
 80038a6:	d005      	beq.n	80038b4 <_malloc_r+0xac>
 80038a8:	1a21      	subs	r1, r4, r0
 80038aa:	4630      	mov	r0, r6
 80038ac:	f000 f830 	bl	8003910 <_sbrk_r>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d0cd      	beq.n	8003850 <_malloc_r+0x48>
 80038b4:	6025      	str	r5, [r4, #0]
 80038b6:	e7d9      	b.n	800386c <_malloc_r+0x64>
 80038b8:	bd70      	pop	{r4, r5, r6, pc}
 80038ba:	bf00      	nop
 80038bc:	20000150 	.word	0x20000150
 80038c0:	20000154 	.word	0x20000154

080038c4 <_realloc_r>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	4607      	mov	r7, r0
 80038c8:	4614      	mov	r4, r2
 80038ca:	460e      	mov	r6, r1
 80038cc:	b921      	cbnz	r1, 80038d8 <_realloc_r+0x14>
 80038ce:	4611      	mov	r1, r2
 80038d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038d4:	f7ff bf98 	b.w	8003808 <_malloc_r>
 80038d8:	b922      	cbnz	r2, 80038e4 <_realloc_r+0x20>
 80038da:	f7ff ff49 	bl	8003770 <_free_r>
 80038de:	4625      	mov	r5, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e4:	f000 f826 	bl	8003934 <_malloc_usable_size_r>
 80038e8:	4284      	cmp	r4, r0
 80038ea:	d90f      	bls.n	800390c <_realloc_r+0x48>
 80038ec:	4621      	mov	r1, r4
 80038ee:	4638      	mov	r0, r7
 80038f0:	f7ff ff8a 	bl	8003808 <_malloc_r>
 80038f4:	4605      	mov	r5, r0
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d0f2      	beq.n	80038e0 <_realloc_r+0x1c>
 80038fa:	4631      	mov	r1, r6
 80038fc:	4622      	mov	r2, r4
 80038fe:	f7ff ff11 	bl	8003724 <memcpy>
 8003902:	4631      	mov	r1, r6
 8003904:	4638      	mov	r0, r7
 8003906:	f7ff ff33 	bl	8003770 <_free_r>
 800390a:	e7e9      	b.n	80038e0 <_realloc_r+0x1c>
 800390c:	4635      	mov	r5, r6
 800390e:	e7e7      	b.n	80038e0 <_realloc_r+0x1c>

08003910 <_sbrk_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	2300      	movs	r3, #0
 8003914:	4c05      	ldr	r4, [pc, #20]	; (800392c <_sbrk_r+0x1c>)
 8003916:	4605      	mov	r5, r0
 8003918:	4608      	mov	r0, r1
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	f000 f814 	bl	8003948 <_sbrk>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_sbrk_r+0x1a>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	b103      	cbz	r3, 800392a <_sbrk_r+0x1a>
 8003928:	602b      	str	r3, [r5, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	20000220 	.word	0x20000220

08003930 <__malloc_lock>:
 8003930:	4770      	bx	lr

08003932 <__malloc_unlock>:
 8003932:	4770      	bx	lr

08003934 <_malloc_usable_size_r>:
 8003934:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003938:	2800      	cmp	r0, #0
 800393a:	f1a0 0004 	sub.w	r0, r0, #4
 800393e:	bfbc      	itt	lt
 8003940:	580b      	ldrlt	r3, [r1, r0]
 8003942:	18c0      	addlt	r0, r0, r3
 8003944:	4770      	bx	lr
	...

08003948 <_sbrk>:
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <_sbrk+0x14>)
 800394a:	4602      	mov	r2, r0
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	b909      	cbnz	r1, 8003954 <_sbrk+0xc>
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <_sbrk+0x18>)
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	4402      	add	r2, r0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4770      	bx	lr
 800395c:	20000158 	.word	0x20000158
 8003960:	20000228 	.word	0x20000228

08003964 <_init>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr

08003970 <_fini>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr
