
04_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e0  2000000c  08002620  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000ec  08002620  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000066f3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001866  00000000  00000000  00026728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007b8  00000000  00000000  00027f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00028748  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004426  00000000  00000000  00028df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000023a3  00000000  00000000  0002d21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f5c1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c88  00000000  00000000  0002f640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080025c8 	.word	0x080025c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080025c8 	.word	0x080025c8

0800014c <apInit>:
 */


#include "ap.h"

void apInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8000150:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000154:	2000      	movs	r0, #0
 8000156:	f000 f9bf 	bl	80004d8 <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}

0800015e <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 800015e:	b580      	push	{r7, lr}
 8000160:	b090      	sub	sp, #64	; 0x40
 8000162:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
 800016c:	605a      	str	r2, [r3, #4]
 800016e:	609a      	str	r2, [r3, #8]
 8000170:	60da      	str	r2, [r3, #12]
 8000172:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000174:	1d3b      	adds	r3, r7, #4
 8000176:	2228      	movs	r2, #40	; 0x28
 8000178:	2100      	movs	r1, #0
 800017a:	4618      	mov	r0, r3
 800017c:	f002 fa1c 	bl	80025b8 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000180:	2302      	movs	r3, #2
 8000182:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 8000188:	2300      	movs	r3, #0
 800018a:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 800018c:	2301      	movs	r3, #1
 800018e:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000190:	2310      	movs	r3, #16
 8000192:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 8000194:	2300      	movs	r3, #0
 8000196:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 8000198:	2302      	movs	r3, #2
 800019a:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 800019c:	2300      	movs	r3, #0
 800019e:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80001a0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 f8c5 	bl	8001338 <HAL_RCC_OscConfig>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d000      	beq.n	80001b6 <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 80001b4:	e7fe      	b.n	80001b4 <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001b6:	230f      	movs	r3, #15
 80001b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ba:	2302      	movs	r3, #2
 80001bc:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001be:	2300      	movs	r3, #0
 80001c0:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80001d0:	2102      	movs	r1, #2
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fb30 	bl	8001838 <HAL_RCC_ClockConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d000      	beq.n	80001e0 <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 80001de:	e7fe      	b.n	80001de <SystemClock_Config+0x80>
  }
}
 80001e0:	bf00      	nop
 80001e2:	3740      	adds	r7, #64	; 0x40
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <bspInit>:




void bspInit(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
    HAL_Init();
 80001ee:	f000 fb85 	bl	80008fc <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 80001f2:	f7ff ffb4 	bl	800015e <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f6:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <bspInit+0x48>)
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <bspInit+0x48>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f043 0304 	orr.w	r3, r3, #4
 8000200:	6193      	str	r3, [r2, #24]
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <bspInit+0x48>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	f003 0304 	and.w	r3, r3, #4
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800020e:	4a08      	ldr	r2, [pc, #32]	; (8000230 <bspInit+0x48>)
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <bspInit+0x48>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f043 0310 	orr.w	r3, r3, #16
 8000218:	6193      	str	r3, [r2, #24]
 800021a:	4b05      	ldr	r3, [pc, #20]	; (8000230 <bspInit+0x48>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	f003 0310 	and.w	r3, r3, #16
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]
}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000

08000234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <SystemInit+0x5c>)
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <SystemInit+0x5c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000244:	4912      	ldr	r1, [pc, #72]	; (8000290 <SystemInit+0x5c>)
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <SystemInit+0x5c>)
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <SystemInit+0x60>)
 800024c:	4013      	ands	r3, r2
 800024e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <SystemInit+0x5c>)
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <SystemInit+0x5c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800025a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800025e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000260:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <SystemInit+0x5c>)
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <SystemInit+0x5c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800026a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800026c:	4a08      	ldr	r2, [pc, #32]	; (8000290 <SystemInit+0x5c>)
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <SystemInit+0x5c>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000276:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <SystemInit+0x5c>)
 800027a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800027e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <SystemInit+0x64>)
 8000282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000286:	609a      	str	r2, [r3, #8]
#endif 
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40021000 	.word	0x40021000
 8000294:	f8ff0000 	.word	0xf8ff0000
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800029c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800029e:	e003      	b.n	80002a8 <LoopCopyDataInit>

080002a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80002a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80002a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80002a6:	3104      	adds	r1, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80002a8:	480a      	ldr	r0, [pc, #40]	; (80002d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80002ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80002ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80002b0:	d3f6      	bcc.n	80002a0 <CopyDataInit>
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80002b4:	e002      	b.n	80002bc <LoopFillZerobss>

080002b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80002b8:	f842 3b04 	str.w	r3, [r2], #4

080002bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80002be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002c0:	d3f9      	bcc.n	80002b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002c2:	f7ff ffb7 	bl	8000234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002c6:	f002 f953 	bl	8002570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f002 f947 	bl	800255c <main>
  bx lr
 80002ce:	4770      	bx	lr
  ldr r3, =_sidata
 80002d0:	08002614 	.word	0x08002614
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80002dc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80002e0:	200000ec 	.word	0x200000ec

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>

080002e6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr

080002f2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <HardFault_Handler+0x4>

080002f8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  Noned
  * @retval None
  */
void MemManage_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <MemManage_Handler+0x4>

080002fe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000302:	e7fe      	b.n	8000302 <BusFault_Handler+0x4>

08000304 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler+0x4>

0800030a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr

08000316 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000332:	f000 fb2f 	bl	8000994 <HAL_IncTick>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}

0800033a <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 800033a:	b480      	push	{r7}
 800033c:	b087      	sub	sp, #28
 800033e:	af00      	add	r7, sp, #0
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	60b9      	str	r1, [r7, #8]
 8000344:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000346:	2301      	movs	r3, #1
 8000348:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d104      	bne.n	8000374 <qbufferCreate+0x3a>
    p_node->length = 0;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
    ret = false;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 8000380:	b480      	push	{r7}
 8000382:	b089      	sub	sp, #36	; 0x24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800038c:	2301      	movs	r3, #1
 800038e:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d101      	bne.n	800039c <qbufferWrite+0x1c>
 8000398:	2300      	movs	r3, #0
 800039a:	e02d      	b.n	80003f8 <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	e025      	b.n	80003ee <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d101      	bne.n	80003be <qbufferWrite+0x3e>
      next_index = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	69bb      	ldr	r3, [r7, #24]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d00c      	beq.n	80003e2 <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	4413      	add	r3, r2
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	440a      	add	r2, r1
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	69ba      	ldr	r2, [r7, #24]
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	e002      	b.n	80003e8 <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 80003e2:	2300      	movs	r3, #0
 80003e4:	77fb      	strb	r3, [r7, #31]
      break;
 80003e6:	e006      	b.n	80003f6 <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d3d5      	bcc.n	80003a2 <qbufferWrite+0x22>
    }
  }
  return ret;
 80003f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3724      	adds	r7, #36	; 0x24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <qbufferFlush>:
  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;

  return length;
}

void qbufferFlush(qbuffer_t *p_node){
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <buttonInit>:


#include "button.h"

void buttonInit(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000436:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	463b      	mov	r3, r7
 800043a:	4619      	mov	r1, r3
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <buttonInit+0x2c>)
 800043e:	f000 fd65 	bl	8000f0c <HAL_GPIO_Init>
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40011000 	.word	0x40011000

08000450 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800045a:	2301      	movs	r3, #1
 800045c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	2303      	movs	r3, #3
 8000460:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 8000462:	2320      	movs	r3, #32
 8000464:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	463b      	mov	r3, r7
 8000468:	4619      	mov	r1, r3
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <ledInit+0x28>)
 800046c:	f000 fd4e 	bl	8000f0c <HAL_GPIO_Init>
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010800 	.word	0x40010800

0800047c <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e01c      	b.n	80004c2 <uartInit+0x46>
  {
    uart_tbl[i].is_open = false;
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <uartInit+0x58>)
 800048c:	21b0      	movs	r1, #176	; 0xb0
 800048e:	fb01 f303 	mul.w	r3, r1, r3
 8000492:	4413      	add	r3, r2
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <uartInit+0x58>)
 800049c:	21b0      	movs	r1, #176	; 0xb0
 800049e:	fb01 f303 	mul.w	r3, r1, r3
 80004a2:	4413      	add	r3, r2
 80004a4:	3309      	adds	r3, #9
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4a09      	ldr	r2, [pc, #36]	; (80004d4 <uartInit+0x58>)
 80004ae:	21b0      	movs	r1, #176	; 0xb0
 80004b0:	fb01 f303 	mul.w	r3, r1, r3
 80004b4:	4413      	add	r3, r2
 80004b6:	3308      	adds	r3, #8
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	3301      	adds	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0df      	beq.n	8000488 <uartInit+0xc>
  }
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000028 	.word	0x20000028

080004d8 <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;

  switch(channel){
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d14a      	bne.n	8000584 <uartOpen+0xac>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	22b0      	movs	r2, #176	; 0xb0
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
 80004f6:	4a26      	ldr	r2, [pc, #152]	; (8000590 <uartOpen+0xb8>)
 80004f8:	4413      	add	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	4a25      	ldr	r2, [pc, #148]	; (8000594 <uartOpen+0xbc>)
 8000500:	671a      	str	r2, [r3, #112]	; 0x70
      p_uart->handle.Init.BaudRate   = baud;
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	675a      	str	r2, [r3, #116]	; 0x74
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	2200      	movs	r2, #0
 800050c:	679a      	str	r2, [r3, #120]	; 0x78
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	2200      	movs	r2, #0
 8000512:	67da      	str	r2, [r3, #124]	; 0x7c
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2200      	movs	r2, #0
 8000518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2200      	movs	r2, #0
 8000520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	220c      	movs	r2, #12
 8000528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      p_uart->rx_mode                = UART_MODE_DMA;       // RX mode change to DMA.
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	2202      	movs	r2, #2
 8000530:	725a      	strb	r2, [r3, #9]

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	3370      	adds	r3, #112	; 0x70
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fb67 	bl	8001c0a <HAL_UART_DeInit>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d11d      	bne.n	800057e <uartOpen+0xa6>
        break;
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	3370      	adds	r3, #112	; 0x70
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fb12 	bl	8001b70 <HAL_UART_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d117      	bne.n	8000582 <uartOpen+0xaa>
        break;
      }
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	f103 001c 	add.w	r0, r3, #28
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <uartOpen+0xc0>)
 800055e:	4413      	add	r3, r2
 8000560:	2210      	movs	r2, #16
 8000562:	4619      	mov	r1, r3
 8000564:	f7ff fee9 	bl	800033a <qbufferCreate>

      //p_uart->rx_mode = UART_MODE_INTERRUPT;
      p_uart->baud    = baud;
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f810 	bl	800059c <uartStartRx>
      break;
 800057c:	e002      	b.n	8000584 <uartOpen+0xac>
        break;
 800057e:	bf00      	nop
 8000580:	e000      	b.n	8000584 <uartOpen+0xac>
        break;
 8000582:	bf00      	nop
  }
  return ret;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028
 8000594:	40004400 	.word	0x40004400
 8000598:	200000d8 	.word	0x200000d8

0800059c <uartStartRx>:

void uartStartRx(uint8_t channel){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel for UART.
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	22b0      	movs	r2, #176	; 0xb0
 80005aa:	fb02 f303 	mul.w	r3, r2, r3
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <uartStartRx+0x58>)
 80005b0:	4413      	add	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){  // UART Start When the UART's mode is Interrupt.
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d108      	bne.n	80005ce <uartStartRx+0x32>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	330a      	adds	r3, #10
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f001 fb4a 	bl	8001c62 <HAL_UART_Receive_IT>
  }
  if(p_uart->rx_mode == UART_MODE_DMA){        // UART Start When the UART's mode is DMA.
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	7a5b      	ldrb	r3, [r3, #9]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d10a      	bne.n	80005ec <uartStartRx+0x50>
    HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	f001 fb90 	bl	8001d0c <HAL_UART_Receive_DMA>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000028 	.word	0x20000028

080005f8 <uartFlush>:

  return ret;
}


void uartFlush(uint8_t channel){
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

  if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT){
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <uartFlush+0xa4>)
 8000606:	21b0      	movs	r1, #176	; 0xb0
 8000608:	fb01 f303 	mul.w	r3, r1, r3
 800060c:	4413      	add	r3, r2
 800060e:	3309      	adds	r3, #9
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d10a      	bne.n	800062c <uartFlush+0x34>
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	22b0      	movs	r2, #176	; 0xb0
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	3318      	adds	r3, #24
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <uartFlush+0xa4>)
 8000622:	4413      	add	r3, r2
 8000624:	3304      	adds	r3, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff feeb 	bl	8000402 <qbufferFlush>
  }

  if(uart_tbl[channel].rx_mode == UART_MODE_DMA){
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4a1b      	ldr	r2, [pc, #108]	; (800069c <uartFlush+0xa4>)
 8000630:	21b0      	movs	r1, #176	; 0xb0
 8000632:	fb01 f303 	mul.w	r3, r1, r3
 8000636:	4413      	add	r3, r2
 8000638:	3309      	adds	r3, #9
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d129      	bne.n	8000694 <uartFlush+0x9c>
    uart_tbl[channel].qbuffer_rx.ptr_in  = uart_tbl[channel].qbuffer_rx.length - uart_tbl[channel].hdma_rx.Instance->CNDTR;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	79fa      	ldrb	r2, [r7, #7]
 8000644:	4915      	ldr	r1, [pc, #84]	; (800069c <uartFlush+0xa4>)
 8000646:	20b0      	movs	r0, #176	; 0xb0
 8000648:	fb00 f202 	mul.w	r2, r0, r2
 800064c:	440a      	add	r2, r1
 800064e:	3224      	adds	r2, #36	; 0x24
 8000650:	6811      	ldr	r1, [r2, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4811      	ldr	r0, [pc, #68]	; (800069c <uartFlush+0xa4>)
 8000656:	24b0      	movs	r4, #176	; 0xb0
 8000658:	fb04 f202 	mul.w	r2, r4, r2
 800065c:	4402      	add	r2, r0
 800065e:	322c      	adds	r2, #44	; 0x2c
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	6852      	ldr	r2, [r2, #4]
 8000664:	1a8a      	subs	r2, r1, r2
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <uartFlush+0xa4>)
 8000668:	20b0      	movs	r0, #176	; 0xb0
 800066a:	fb00 f303 	mul.w	r3, r0, r3
 800066e:	440b      	add	r3, r1
 8000670:	331c      	adds	r3, #28
 8000672:	601a      	str	r2, [r3, #0]
    uart_tbl[channel].qbuffer_rx.ptr_out = uart_tbl[channel].qbuffer_rx.ptr_in;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	79fa      	ldrb	r2, [r7, #7]
 8000678:	4908      	ldr	r1, [pc, #32]	; (800069c <uartFlush+0xa4>)
 800067a:	20b0      	movs	r0, #176	; 0xb0
 800067c:	fb00 f202 	mul.w	r2, r0, r2
 8000680:	440a      	add	r2, r1
 8000682:	321c      	adds	r2, #28
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	4905      	ldr	r1, [pc, #20]	; (800069c <uartFlush+0xa4>)
 8000688:	20b0      	movs	r0, #176	; 0xb0
 800068a:	fb00 f303 	mul.w	r3, r0, r3
 800068e:	440b      	add	r3, r1
 8000690:	3320      	adds	r3, #32
 8000692:	601a      	str	r2, [r3, #0]
  }
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	20000028 	.word	0x20000028

080006a0 <uartRxHandler>:

  return ret;
}

void uartRxHandler(uint8_t channel)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	22b0      	movs	r2, #176	; 0xb0
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <uartRxHandler+0x4c>)
 80006b4:	4413      	add	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	7a5b      	ldrb	r3, [r3, #9]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d110      	bne.n	80006e2 <uartRxHandler+0x42>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f103 001c 	add.w	r0, r3, #28
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	330a      	adds	r3, #10
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	f7ff fe57 	bl	8000380 <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
      uartStartRx(channel);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff5d 	bl	800059c <uartStartRx>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028

080006f0 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff7b 	bl	80005f8 <uartFlush>
  uartStartRx(channel);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff49 	bl	800059c <uartStartRx>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_UART_RxCpltCallback+0x20>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d102      	bne.n	800072c <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff ffba 	bl	80006a0 <uartRxHandler>
  }
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40004400 	.word	0x40004400

08000738 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f001 fa62 	bl	8001c0a <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f001 fa12 	bl	8001b70 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_UART_ErrorCallback+0x2c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d102      	bne.n	800075c <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ffca 	bl	80006f0 <uartErrHandler>
  }
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40004400 	.word	0x40004400

08000768 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <USART2_IRQHandler+0x10>)
 800076e:	f001 fb4d 	bl	8001e0c <HAL_UART_IRQHandler>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000098 	.word	0x20000098

0800077c <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a3c      	ldr	r2, [pc, #240]	; (800087c <HAL_UART_MspInit+0x100>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d172      	bne.n	8000874 <HAL_UART_MspInit+0xf8>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <HAL_UART_MspInit+0x104>)
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <HAL_UART_MspInit+0x104>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b39      	ldr	r3, [pc, #228]	; (8000880 <HAL_UART_MspInit+0x104>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a6:	4a36      	ldr	r2, [pc, #216]	; (8000880 <HAL_UART_MspInit+0x104>)
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <HAL_UART_MspInit+0x104>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <HAL_UART_MspInit+0x104>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80007be:	2304      	movs	r3, #4
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	482b      	ldr	r0, [pc, #172]	; (8000884 <HAL_UART_MspInit+0x108>)
 80007d6:	f000 fb99 	bl	8000f0c <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 80007da:	2308      	movs	r3, #8
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4826      	ldr	r0, [pc, #152]	; (8000884 <HAL_UART_MspInit+0x108>)
 80007ea:	f000 fb8f 	bl	8000f0c <HAL_GPIO_Init>


    if (uart_tbl[_DEF_UART1].rx_mode == UART_MODE_DMA)
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <HAL_UART_MspInit+0x10c>)
 80007f0:	7a5b      	ldrb	r3, [r3, #9]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d136      	bne.n	8000864 <HAL_UART_MspInit+0xe8>
    {
         uart_t *p_uart = &uart_tbl[_DEF_UART1];
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <HAL_UART_MspInit+0x10c>)
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24


         __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <HAL_UART_MspInit+0x104>)
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <HAL_UART_MspInit+0x104>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <HAL_UART_MspInit+0x104>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]


         /* Configure the DMA handler for reception process */
         p_uart->hdma_rx.Instance                 = DMA1_Channel6;
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <HAL_UART_MspInit+0x110>)
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
         p_uart->hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	2200      	movs	r2, #0
 800081c:	631a      	str	r2, [r3, #48]	; 0x30
         p_uart->hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	2200      	movs	r2, #0
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
         p_uart->hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	639a      	str	r2, [r3, #56]	; 0x38
         p_uart->hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	63da      	str	r2, [r3, #60]	; 0x3c
         p_uart->hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	2200      	movs	r2, #0
 8000834:	641a      	str	r2, [r3, #64]	; 0x40
         p_uart->hdma_rx.Init.Mode                = DMA_CIRCULAR;
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	2220      	movs	r2, #32
 800083a:	645a      	str	r2, [r3, #68]	; 0x44
         p_uart->hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000842:	649a      	str	r2, [r3, #72]	; 0x48


         HAL_DMA_Init(&p_uart->hdma_rx);
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	332c      	adds	r3, #44	; 0x2c
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f9fb 	bl	8000c44 <HAL_DMA_Init>

         /* Associate the initialized DMA handle to the the UART handle */
         __HAL_LINKDMA((&p_uart->handle), hdmarx, (p_uart->hdma_rx));
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	2100      	movs	r1, #0
 8000868:	2026      	movs	r0, #38	; 0x26
 800086a:	f000 f9a6 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800086e:	2026      	movs	r0, #38	; 0x26
 8000870:	f000 f9bf 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
  }
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40004400 	.word	0x40004400
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800
 8000888:	20000028 	.word	0x20000028
 800088c:	4002006c 	.word	0x4002006c

08000890 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_UART_MspDeInit+0x48>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d116      	bne.n	80008d0 <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_UART_MspDeInit+0x4c>)
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_UART_MspDeInit+0x4c>)
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <HAL_UART_MspDeInit+0x4c>)
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_UART_MspDeInit+0x4c>)
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008b8:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80008ba:	2104      	movs	r1, #4
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <HAL_UART_MspDeInit+0x50>)
 80008be:	f000 fc7f 	bl	80011c0 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 80008c2:	2108      	movs	r1, #8
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_UART_MspDeInit+0x50>)
 80008c6:	f000 fc7b 	bl	80011c0 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80008ca:	2026      	movs	r0, #38	; 0x26
 80008cc:	f000 f99f 	bl	8000c0e <HAL_NVIC_DisableIRQ>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010800 	.word	0x40010800

080008e4 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  bspInit();
 80008e8:	f7ff fc7e 	bl	80001e8 <bspInit>

  ledInit();
 80008ec:	f7ff fdb0 	bl	8000450 <ledInit>
  buttonInit();
 80008f0:	f7ff fd96 	bl	8000420 <buttonInit>
  uartInit();
 80008f4:	f7ff fdc2 	bl	800047c <uartInit>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_Init+0x28>)
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_Init+0x28>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f949 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f80e 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f000 f806 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f969 	bl	8000c2a <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f923 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x1c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x20>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_IncTick+0x20>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000008 	.word	0x20000008
 80009b4:	200000e8 	.word	0x200000e8

080009b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <HAL_GetTick+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	200000e8 	.word	0x200000e8

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_EnableIRQ+0x34>)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	095b      	lsrs	r3, r3, #5
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	f002 021f 	and.w	r2, r2, #31
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db10      	blt.n	8000a9c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	490b      	ldr	r1, [pc, #44]	; (8000aa8 <__NVIC_DisableIRQ+0x40>)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	f002 021f 	and.w	r2, r2, #31
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	3320      	adds	r3, #32
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	490d      	ldr	r1, [pc, #52]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	4909      	ldr	r1, [pc, #36]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	2201      	movs	r2, #1
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	401a      	ands	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b46:	2101      	movs	r1, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	1e59      	subs	r1, r3, #1
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff92 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff0d 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff22 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff92 	bl	8000b00 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff61 	bl	8000aac <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff15 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff23 	bl	8000a68 <__NVIC_DisableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff94 	bl	8000b60 <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e043      	b.n	8000ce2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_DMA_Init+0xa8>)
 8000c62:	4413      	add	r3, r2
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_DMA_Init+0xac>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <HAL_DMA_Init+0xb0>)
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	bffdfff8 	.word	0xbffdfff8
 8000cf0:	cccccccd 	.word	0xcccccccd
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <HAL_DMA_Start_IT+0x20>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e04a      	b.n	8000dae <HAL_DMA_Start_IT+0xb6>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d13a      	bne.n	8000da0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2200      	movs	r2, #0
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f000 f8ae 	bl	8000eb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	f042 020e 	orr.w	r2, r2, #14
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e00f      	b.n	8000d8e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	f022 0204 	bic.w	r2, r2, #4
 8000d7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	f042 020a 	orr.w	r2, r2, #10
 8000d8c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	f042 0201 	orr.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e005      	b.n	8000dac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000da8:	2302      	movs	r3, #2
 8000daa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d005      	beq.n	8000dda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e057      	b.n	8000e8a <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	6812      	ldr	r2, [r2, #0]
 8000de4:	f022 020e 	bic.w	r2, r2, #14
 8000de8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <HAL_DMA_Abort_IT+0xdc>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <HAL_DMA_Abort_IT+0xe0>)
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d02e      	beq.n	8000e66 <HAL_DMA_Abort_IT+0xae>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_DMA_Abort_IT+0xe4>)
 8000e10:	4299      	cmp	r1, r3
 8000e12:	d026      	beq.n	8000e62 <HAL_DMA_Abort_IT+0xaa>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <HAL_DMA_Abort_IT+0xe8>)
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d01d      	beq.n	8000e5c <HAL_DMA_Abort_IT+0xa4>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HAL_DMA_Abort_IT+0xec>)
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d014      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x9e>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_DMA_Abort_IT+0xf0>)
 8000e34:	4299      	cmp	r1, r3
 8000e36:	d00b      	beq.n	8000e50 <HAL_DMA_Abort_IT+0x98>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_DMA_Abort_IT+0xf4>)
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d102      	bne.n	8000e4a <HAL_DMA_Abort_IT+0x92>
 8000e44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e48:	e00e      	b.n	8000e68 <HAL_DMA_Abort_IT+0xb0>
 8000e4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e4e:	e00b      	b.n	8000e68 <HAL_DMA_Abort_IT+0xb0>
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e008      	b.n	8000e68 <HAL_DMA_Abort_IT+0xb0>
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	e005      	b.n	8000e68 <HAL_DMA_Abort_IT+0xb0>
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	e002      	b.n	8000e68 <HAL_DMA_Abort_IT+0xb0>
 8000e62:	2310      	movs	r3, #16
 8000e64:	e000      	b.n	8000e68 <HAL_DMA_Abort_IT+0xb0>
 8000e66:	2301      	movs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	4798      	blx	r3
    } 
  }
  return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020008 	.word	0x40020008
 8000e9c:	4002001c 	.word	0x4002001c
 8000ea0:	40020030 	.word	0x40020030
 8000ea4:	40020044 	.word	0x40020044
 8000ea8:	40020058 	.word	0x40020058
 8000eac:	4002006c 	.word	0x4002006c

08000eb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d108      	bne.n	8000ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000eee:	e007      	b.n	8000f00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	60da      	str	r2, [r3, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b08b      	sub	sp, #44	; 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1e:	e127      	b.n	8001170 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f20:	2201      	movs	r2, #1
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8116 	bne.w	800116a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d034      	beq.n	8000fb0 <HAL_GPIO_Init+0xa4>
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d80d      	bhi.n	8000f66 <HAL_GPIO_Init+0x5a>
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d02b      	beq.n	8000fa6 <HAL_GPIO_Init+0x9a>
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d804      	bhi.n	8000f5c <HAL_GPIO_Init+0x50>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d031      	beq.n	8000fba <HAL_GPIO_Init+0xae>
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d01c      	beq.n	8000f94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f5a:	e048      	b.n	8000fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d043      	beq.n	8000fe8 <HAL_GPIO_Init+0xdc>
 8000f60:	2b11      	cmp	r3, #17
 8000f62:	d01b      	beq.n	8000f9c <HAL_GPIO_Init+0x90>
          break;
 8000f64:	e043      	b.n	8000fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f66:	4a89      	ldr	r2, [pc, #548]	; (800118c <HAL_GPIO_Init+0x280>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d026      	beq.n	8000fba <HAL_GPIO_Init+0xae>
 8000f6c:	4a87      	ldr	r2, [pc, #540]	; (800118c <HAL_GPIO_Init+0x280>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d806      	bhi.n	8000f80 <HAL_GPIO_Init+0x74>
 8000f72:	4a87      	ldr	r2, [pc, #540]	; (8001190 <HAL_GPIO_Init+0x284>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d020      	beq.n	8000fba <HAL_GPIO_Init+0xae>
 8000f78:	4a86      	ldr	r2, [pc, #536]	; (8001194 <HAL_GPIO_Init+0x288>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01d      	beq.n	8000fba <HAL_GPIO_Init+0xae>
          break;
 8000f7e:	e036      	b.n	8000fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f80:	4a85      	ldr	r2, [pc, #532]	; (8001198 <HAL_GPIO_Init+0x28c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0xae>
 8000f86:	4a85      	ldr	r2, [pc, #532]	; (800119c <HAL_GPIO_Init+0x290>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d016      	beq.n	8000fba <HAL_GPIO_Init+0xae>
 8000f8c:	4a84      	ldr	r2, [pc, #528]	; (80011a0 <HAL_GPIO_Init+0x294>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0xae>
          break;
 8000f92:	e02c      	b.n	8000fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e028      	b.n	8000fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	e023      	b.n	8000fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	3308      	adds	r3, #8
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e01e      	b.n	8000fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	330c      	adds	r3, #12
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	e019      	b.n	8000fee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e012      	b.n	8000fee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	611a      	str	r2, [r3, #16]
          break;
 8000fda:	e008      	b.n	8000fee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	615a      	str	r2, [r3, #20]
          break;
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	2bff      	cmp	r3, #255	; 0xff
 8000ff2:	d801      	bhi.n	8000ff8 <HAL_GPIO_Init+0xec>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	e001      	b.n	8000ffc <HAL_GPIO_Init+0xf0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d802      	bhi.n	800100a <HAL_GPIO_Init+0xfe>
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x104>
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3b08      	subs	r3, #8
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	210f      	movs	r1, #15
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	401a      	ands	r2, r3
 8001022:	6a39      	ldr	r1, [r7, #32]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	431a      	orrs	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8096 	beq.w	800116a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800103e:	4a59      	ldr	r2, [pc, #356]	; (80011a4 <HAL_GPIO_Init+0x298>)
 8001040:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <HAL_GPIO_Init+0x298>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <HAL_GPIO_Init+0x298>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001056:	4a54      	ldr	r2, [pc, #336]	; (80011a8 <HAL_GPIO_Init+0x29c>)
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4013      	ands	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_GPIO_Init+0x2a0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x19e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4a      	ldr	r2, [pc, #296]	; (80011b0 <HAL_GPIO_Init+0x2a4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x19a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x2a8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x196>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <HAL_GPIO_Init+0x2ac>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x192>
 800109a:	2303      	movs	r3, #3
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x1a0>
 800109e:	2304      	movs	r3, #4
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x1a0>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x1a0>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x1a0>
 80010aa:	2300      	movs	r3, #0
 80010ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ae:	f002 0203 	and.w	r2, r2, #3
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	4093      	lsls	r3, r2
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010bc:	493a      	ldr	r1, [pc, #232]	; (80011a8 <HAL_GPIO_Init+0x29c>)
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d6:	4939      	ldr	r1, [pc, #228]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
 80010e2:	e006      	b.n	80010f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e4:	4935      	ldr	r1, [pc, #212]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4013      	ands	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010fe:	492f      	ldr	r1, [pc, #188]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
 800110a:	e006      	b.n	800111a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110c:	492b      	ldr	r1, [pc, #172]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	43db      	mvns	r3, r3
 8001116:	4013      	ands	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001126:	4925      	ldr	r1, [pc, #148]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	608b      	str	r3, [r1, #8]
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001134:	4921      	ldr	r1, [pc, #132]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	43db      	mvns	r3, r3
 800113e:	4013      	ands	r3, r2
 8001140:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800114e:	491b      	ldr	r1, [pc, #108]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	60cb      	str	r3, [r1, #12]
 800115a:	e006      	b.n	800116a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800115c:	4917      	ldr	r1, [pc, #92]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	4013      	ands	r3, r2
 8001168:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3301      	adds	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	fa22 f303 	lsr.w	r3, r2, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	f47f aed0 	bne.w	8000f20 <HAL_GPIO_Init+0x14>
  }
}
 8001180:	bf00      	nop
 8001182:	372c      	adds	r7, #44	; 0x2c
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	10210000 	.word	0x10210000
 8001190:	10110000 	.word	0x10110000
 8001194:	10120000 	.word	0x10120000
 8001198:	10310000 	.word	0x10310000
 800119c:	10320000 	.word	0x10320000
 80011a0:	10220000 	.word	0x10220000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40011400 	.word	0x40011400
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80011ce:	e09a      	b.n	8001306 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	409a      	lsls	r2, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 808e 	beq.w	8001300 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_GPIO_DeInit+0x160>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4013      	ands	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a46      	ldr	r2, [pc, #280]	; (8001324 <HAL_GPIO_DeInit+0x164>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_DeInit+0x76>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a45      	ldr	r2, [pc, #276]	; (8001328 <HAL_GPIO_DeInit+0x168>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_DeInit+0x72>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a44      	ldr	r2, [pc, #272]	; (800132c <HAL_GPIO_DeInit+0x16c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_DeInit+0x6e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a43      	ldr	r2, [pc, #268]	; (8001330 <HAL_GPIO_DeInit+0x170>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_DeInit+0x6a>
 8001226:	2303      	movs	r3, #3
 8001228:	e006      	b.n	8001238 <HAL_GPIO_DeInit+0x78>
 800122a:	2304      	movs	r3, #4
 800122c:	e004      	b.n	8001238 <HAL_GPIO_DeInit+0x78>
 800122e:	2302      	movs	r3, #2
 8001230:	e002      	b.n	8001238 <HAL_GPIO_DeInit+0x78>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_GPIO_DeInit+0x78>
 8001236:	2300      	movs	r3, #0
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	f002 0203 	and.w	r2, r2, #3
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	fa03 f202 	lsl.w	r2, r3, r2
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	429a      	cmp	r2, r3
 8001248:	d132      	bne.n	80012b0 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800125a:	4831      	ldr	r0, [pc, #196]	; (8001320 <HAL_GPIO_DeInit+0x160>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	492f      	ldr	r1, [pc, #188]	; (8001320 <HAL_GPIO_DeInit+0x160>)
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	0892      	lsrs	r2, r2, #2
 8001266:	3202      	adds	r2, #2
 8001268:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	43d2      	mvns	r2, r2
 8001270:	400a      	ands	r2, r1
 8001272:	3302      	adds	r3, #2
 8001274:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001278:	492e      	ldr	r1, [pc, #184]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	4013      	ands	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001286:	492b      	ldr	r1, [pc, #172]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	43db      	mvns	r3, r3
 8001290:	4013      	ands	r3, r2
 8001292:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001294:	4927      	ldr	r1, [pc, #156]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 8001296:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4013      	ands	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80012a2:	4924      	ldr	r1, [pc, #144]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_DeInit+0x174>)
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d801      	bhi.n	80012ba <HAL_GPIO_DeInit+0xfa>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_DeInit+0xfe>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d802      	bhi.n	80012cc <HAL_GPIO_DeInit+0x10c>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_DeInit+0x112>
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	3b08      	subs	r3, #8
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	210f      	movs	r1, #15
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	401a      	ands	r2, r3
 80012e4:	2104      	movs	r1, #4
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	3301      	adds	r3, #1
 8001304:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	f47f af5e 	bne.w	80011d0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001314:	bf00      	nop
 8001316:	3724      	adds	r7, #36	; 0x24
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40010000 	.word	0x40010000
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40011000 	.word	0x40011000
 8001330:	40011400 	.word	0x40011400
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e26c      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001358:	4b92      	ldr	r3, [pc, #584]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00c      	beq.n	800137e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001364:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d112      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
 8001370:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d10b      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137e:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d06c      	beq.n	8001464 <HAL_RCC_OscConfig+0x12c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d168      	bne.n	8001464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e246      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x76>
 80013a0:	4a80      	ldr	r2, [pc, #512]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e02e      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4a7b      	ldr	r2, [pc, #492]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	4b7a      	ldr	r3, [pc, #488]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4a78      	ldr	r2, [pc, #480]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0xbc>
 80013da:	4a72      	ldr	r2, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4a6f      	ldr	r2, [pc, #444]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013f4:	4a6b      	ldr	r2, [pc, #428]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4a68      	ldr	r2, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001402:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fad0 	bl	80009b8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff facc 	bl	80009b8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1fa      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b5d      	ldr	r3, [pc, #372]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xe4>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fabc 	bl	80009b8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fab8 	bl	80009b8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1e6      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x10c>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001472:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147e:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
 800148a:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1ba      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	493d      	ldr	r1, [pc, #244]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fa71 	bl	80009b8 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fa6d 	bl	80009b8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e19b      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	492a      	ldr	r1, [pc, #168]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fa50 	bl	80009b8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fa4c 	bl	80009b8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e17a      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d03a      	beq.n	80015bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fa30 	bl	80009b8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fa2c 	bl	80009b8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e15a      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 fada 	bl	8001b34 <RCC_Delay>
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fa16 	bl	80009b8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	e00f      	b.n	80015b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff fa12 	bl	80009b8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d908      	bls.n	80015b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e140      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	42420000 	.word	0x42420000
 80015ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b9e      	ldr	r3, [pc, #632]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e9      	bne.n	8001590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a6 	beq.w	8001716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b97      	ldr	r3, [pc, #604]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4a94      	ldr	r2, [pc, #592]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	4b93      	ldr	r3, [pc, #588]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b8e      	ldr	r3, [pc, #568]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4a8b      	ldr	r2, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff f9d3 	bl	80009b8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff f9cf 	bl	80009b8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0fd      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b81      	ldr	r3, [pc, #516]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x312>
 800163c:	4a7b      	ldr	r2, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800163e:	4b7b      	ldr	r3, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e02d      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x334>
 8001652:	4a76      	ldr	r2, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001654:	4b75      	ldr	r3, [pc, #468]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4a73      	ldr	r2, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001660:	4b72      	ldr	r3, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	e01c      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x356>
 8001674:	4a6d      	ldr	r2, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001676:	4b6d      	ldr	r3, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	4a6a      	ldr	r2, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001682:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800168e:	4a67      	ldr	r2, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001690:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4a64      	ldr	r2, [pc, #400]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800169c:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f983 	bl	80009b8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f97f 	bl	80009b8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0ab      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ee      	beq.n	80016b6 <HAL_RCC_OscConfig+0x37e>
 80016d8:	e014      	b.n	8001704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff f96d 	bl	80009b8 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff f969 	bl	80009b8 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e095      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d105      	bne.n	8001716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170a:	4a48      	ldr	r2, [pc, #288]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800170c:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8081 	beq.w	8001822 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d061      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d146      	bne.n	80017c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_OscConfig+0x4fc>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff f93d 	bl	80009b8 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff f939 	bl	80009b8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e067      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800176a:	4930      	ldr	r1, [pc, #192]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177c:	482b      	ldr	r0, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a19      	ldr	r1, [r3, #32]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	430b      	orrs	r3, r1
 8001790:	4313      	orrs	r3, r2
 8001792:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x4fc>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff f90d 	bl	80009b8 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff f909 	bl	80009b8 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e037      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x46a>
 80017c0:	e02f      	b.n	8001822 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_RCC_OscConfig+0x4fc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff f8f6 	bl	80009b8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f8f2 	bl	80009b8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e020      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x498>
 80017ee:	e018      	b.n	8001822 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e013      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	429a      	cmp	r2, r3
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	40007000 	.word	0x40007000
 8001834:	42420060 	.word	0x42420060

08001838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0d0      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0207 	and.w	r2, r3, #7
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d210      	bcs.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4967      	ldr	r1, [pc, #412]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 0207 	bic.w	r2, r3, #7
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0207 	and.w	r2, r3, #7
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4a59      	ldr	r2, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800189e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4a53      	ldr	r2, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4950      	ldr	r1, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d040      	beq.n	8001958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d115      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e073      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06b      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001916:	4939      	ldr	r1, [pc, #228]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 0203 	bic.w	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff f846 	bl	80009b8 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	e00a      	b.n	8001946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff f842 	bl	80009b8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e053      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 020c 	and.w	r2, r3, #12
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	429a      	cmp	r2, r3
 8001956:	d1eb      	bne.n	8001930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0207 	and.w	r2, r3, #7
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4924      	ldr	r1, [pc, #144]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 0207 	bic.w	r2, r3, #7
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0207 	and.w	r2, r3, #7
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4919      	ldr	r1, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b2:	4912      	ldr	r1, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	fa21 f303 	lsr.w	r3, r1, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1cc>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe ffa4 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	080025f4 	.word	0x080025f4
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b490      	push	{r4, r7}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a14:	1d3c      	adds	r4, r7, #4
 8001a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x40>
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x46>
 8001a4a:	e02d      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a4e:	623b      	str	r3, [r7, #32]
      break;
 8001a50:	e02d      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a5e:	4413      	add	r3, r2
 8001a60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	0c5b      	lsrs	r3, r3, #17
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a7e:	4413      	add	r3, r2
 8001a80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a8a:	fb02 f203 	mul.w	r2, r2, r3
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	e004      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	623b      	str	r3, [r7, #32]
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aaa:	623b      	str	r3, [r7, #32]
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	6a3b      	ldr	r3, [r7, #32]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc90      	pop	{r4, r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	080025e0 	.word	0x080025e0
 8001ac0:	080025f0 	.word	0x080025f0
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	003d0900 	.word	0x003d0900

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff2 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001aec:	4601      	mov	r1, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08002604 	.word	0x08002604

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001b14:	4601      	mov	r1, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0adb      	lsrs	r3, r3, #11
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08002604 	.word	0x08002604

08001b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <RCC_Delay+0x34>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <RCC_Delay+0x38>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0a5b      	lsrs	r3, r3, #9
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b50:	bf00      	nop
  }
  while (Delay --);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <RCC_Delay+0x1c>
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e03f      	b.n	8001c02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fdf0 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	68d2      	ldr	r2, [r2, #12]
 8001bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fbf7 	bl	80023a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	6912      	ldr	r2, [r2, #16]
 8001bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	6952      	ldr	r2, [r2, #20]
 8001bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	68d2      	ldr	r2, [r2, #12]
 8001be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e01e      	b.n	8001c5a <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	68d2      	ldr	r2, [r2, #12]
 8001c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c32:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7fe fe2b 	bl	8000890 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d140      	bne.n	8001cfe <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_UART_Receive_IT+0x26>
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e039      	b.n	8001d00 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_UART_Receive_IT+0x38>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e032      	b.n	8001d00 <HAL_UART_Receive_IT+0x9e>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	88fa      	ldrh	r2, [r7, #6]
 8001cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2222      	movs	r2, #34	; 0x22
 8001cbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	68d2      	ldr	r2, [r2, #12]
 8001cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	6952      	ldr	r2, [r2, #20]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	68d2      	ldr	r2, [r2, #12]
 8001cf4:	f042 0220 	orr.w	r2, r2, #32
 8001cf8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d166      	bne.n	8001df4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_UART_Receive_DMA+0x26>
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e05f      	b.n	8001df6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_UART_Receive_DMA+0x38>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e058      	b.n	8001df6 <HAL_UART_Receive_DMA+0xea>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2222      	movs	r2, #34	; 0x22
 8001d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <HAL_UART_Receive_DMA+0xf4>)
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_UART_Receive_DMA+0xf8>)
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7a:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <HAL_UART_Receive_DMA+0xfc>)
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	2200      	movs	r2, #0
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3304      	adds	r3, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f7fe ffab 	bl	8000cf8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	6952      	ldr	r2, [r2, #20]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	6952      	ldr	r2, [r2, #20]
 8001dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	08002029 	.word	0x08002029
 8001e04:	08002091 	.word	0x08002091
 8001e08:	080020ad 	.word	0x080020ad

08001e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_UART_IRQHandler+0x52>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fa24 	bl	80022a4 <UART_Receive_IT>
      return;
 8001e5c:	e0cc      	b.n	8001ff8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80ab 	beq.w	8001fbc <HAL_UART_IRQHandler+0x1b0>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_UART_IRQHandler+0x70>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80a0 	beq.w	8001fbc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <HAL_UART_IRQHandler+0x90>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_UART_IRQHandler+0xb0>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	f043 0202 	orr.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_UART_IRQHandler+0xd0>
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_UART_IRQHandler+0xf0>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	f043 0208 	orr.w	r2, r3, #8
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d078      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_UART_IRQHandler+0x112>
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f9c3 	bl	80022a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <HAL_UART_IRQHandler+0x13a>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d031      	beq.n	8001faa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f90f 	bl	800216a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d023      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	6952      	ldr	r2, [r2, #20]
 8001f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d013      	beq.n	8001f9a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_UART_IRQHandler+0x1f4>)
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe ff1a 	bl	8000db8 <HAL_DMA_Abort_IT>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f94:	4610      	mov	r0, r2
 8001f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f98:	e00e      	b.n	8001fb8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fbcc 	bl	8000738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	e00a      	b.n	8001fb8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fbc8 	bl	8000738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	e006      	b.n	8001fb8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fbc4 	bl	8000738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001fb6:	e01e      	b.n	8001ff6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	bf00      	nop
    return;
 8001fba:	e01c      	b.n	8001ff6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_UART_IRQHandler+0x1cc>
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f8fb 	bl	80021cc <UART_Transmit_IT>
    return;
 8001fd6:	e00f      	b.n	8001ff8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x1ec>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f941 	bl	8002274 <UART_EndTransmit_IT>
    return;
 8001ff2:	bf00      	nop
 8001ff4:	e000      	b.n	8001ff8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001ff6:	bf00      	nop
  }
}
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	080021a5 	.word	0x080021a5

08002004 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d11e      	bne.n	8002082 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	68d2      	ldr	r2, [r2, #12]
 8002054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002058:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	6952      	ldr	r2, [r2, #20]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	6952      	ldr	r2, [r2, #20]
 8002074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002078:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe fb46 	bl	8000714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff ffb9 	bl	8002016 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b21      	cmp	r3, #33	; 0x21
 80020de:	d108      	bne.n	80020f2 <UART_DMAError+0x46>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2200      	movs	r2, #0
 80020ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f000 f827 	bl	8002140 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b22      	cmp	r3, #34	; 0x22
 8002112:	d108      	bne.n	8002126 <UART_DMAError+0x7a>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2200      	movs	r2, #0
 800211e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002120:	68b8      	ldr	r0, [r7, #8]
 8002122:	f000 f822 	bl	800216a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	f043 0210 	orr.w	r2, r3, #16
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002132:	68b8      	ldr	r0, [r7, #8]
 8002134:	f7fe fb00 	bl	8000738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	68d2      	ldr	r2, [r2, #12]
 8002152:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002156:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	68d2      	ldr	r2, [r2, #12]
 800217c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002180:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	6952      	ldr	r2, [r2, #20]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7fe faba 	bl	8000738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b21      	cmp	r3, #33	; 0x21
 80021de:	d143      	bne.n	8002268 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	d119      	bne.n	800221e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021fc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	1c9a      	adds	r2, r3, #2
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	621a      	str	r2, [r3, #32]
 8002210:	e00e      	b.n	8002230 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	621a      	str	r2, [r3, #32]
 800221c:	e008      	b.n	8002230 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	1c58      	adds	r0, r3, #1
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	6208      	str	r0, [r1, #32]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29b      	uxth	r3, r3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4619      	mov	r1, r3
 800223e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10f      	bne.n	8002264 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	68d2      	ldr	r2, [r2, #12]
 800224e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002252:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	68d2      	ldr	r2, [r2, #12]
 800225e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002262:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	68d2      	ldr	r2, [r2, #12]
 8002286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff feb5 	bl	8002004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b22      	cmp	r3, #34	; 0x22
 80022b6:	d171      	bne.n	800239c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d123      	bne.n	800230a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10e      	bne.n	80022ee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	1c9a      	adds	r2, r3, #2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
 80022ec:	e029      	b.n	8002342 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
 8002308:	e01b      	b.n	8002342 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	1c59      	adds	r1, r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6291      	str	r1, [r2, #40]	; 0x28
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	6852      	ldr	r2, [r2, #4]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e00c      	b.n	8002342 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	1c59      	adds	r1, r3, #1
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6291      	str	r1, [r2, #40]	; 0x28
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6852      	ldr	r2, [r2, #4]
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29b      	uxth	r3, r3
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4619      	mov	r1, r3
 8002350:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002352:	2b00      	cmp	r3, #0
 8002354:	d120      	bne.n	8002398 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	68d2      	ldr	r2, [r2, #12]
 8002360:	f022 0220 	bic.w	r2, r2, #32
 8002364:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	68d2      	ldr	r2, [r2, #12]
 8002370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002374:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	6952      	ldr	r2, [r2, #20]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe f9c0 	bl	8000714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e002      	b.n	800239e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	6912      	ldr	r2, [r2, #16]
 80023ba:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68d2      	ldr	r2, [r2, #12]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023e6:	f023 030c 	bic.w	r3, r3, #12
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	6952      	ldr	r2, [r2, #20]
 80023fa:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6992      	ldr	r2, [r2, #24]
 8002402:	430a      	orrs	r2, r1
 8002404:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a52      	ldr	r2, [pc, #328]	; (8002554 <UART_SetConfig+0x1ac>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d14e      	bne.n	80024ae <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002410:	f7ff fb7c 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8002414:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	009a      	lsls	r2, r3, #2
 8002424:	441a      	add	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	4a49      	ldr	r2, [pc, #292]	; (8002558 <UART_SetConfig+0x1b0>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	0118      	lsls	r0, r3, #4
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <UART_SetConfig+0x1b0>)
 8002452:	fba3 4302 	umull	r4, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2464      	movs	r4, #100	; 0x64
 800245a:	fb04 f303 	mul.w	r3, r4, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	; 0x32
 8002464:	4a3c      	ldr	r2, [pc, #240]	; (8002558 <UART_SetConfig+0x1b0>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	4418      	add	r0, r3
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009a      	lsls	r2, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fbb2 f2f3 	udiv	r2, r2, r3
 8002488:	4b33      	ldr	r3, [pc, #204]	; (8002558 <UART_SetConfig+0x1b0>)
 800248a:	fba3 4302 	umull	r4, r3, r3, r2
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2464      	movs	r4, #100	; 0x64
 8002492:	fb04 f303 	mul.w	r3, r4, r3
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	3332      	adds	r3, #50	; 0x32
 800249c:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <UART_SetConfig+0x1b0>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	4403      	add	r3, r0
 80024aa:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80024ac:	e04d      	b.n	800254a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80024ae:	f7ff fb19 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 80024b2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	441a      	add	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <UART_SetConfig+0x1b0>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	0118      	lsls	r0, r3, #4
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009a      	lsls	r2, r3, #2
 80024e2:	441a      	add	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <UART_SetConfig+0x1b0>)
 80024f0:	fba3 4302 	umull	r4, r3, r3, r2
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	2464      	movs	r4, #100	; 0x64
 80024f8:	fb04 f303 	mul.w	r3, r4, r3
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	3332      	adds	r3, #50	; 0x32
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <UART_SetConfig+0x1b0>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250e:	4418      	add	r0, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	009a      	lsls	r2, r3, #2
 800251a:	441a      	add	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	fbb2 f2f3 	udiv	r2, r2, r3
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <UART_SetConfig+0x1b0>)
 8002528:	fba3 4302 	umull	r4, r3, r3, r2
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	2464      	movs	r4, #100	; 0x64
 8002530:	fb04 f303 	mul.w	r3, r4, r3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	3332      	adds	r3, #50	; 0x32
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <UART_SetConfig+0x1b0>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4403      	add	r3, r0
 8002548:	608b      	str	r3, [r1, #8]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}
 8002552:	bf00      	nop
 8002554:	40013800 	.word	0x40013800
 8002558:	51eb851f 	.word	0x51eb851f

0800255c <main>:
 */


#include "main.h"

int main(void){
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  hwInit();
 8002560:	f7fe f9c0 	bl	80008e4 <hwInit>
  apInit();
 8002564:	f7fd fdf2 	bl	800014c <apInit>
 8002568:	2300      	movs	r3, #0

  //apMain();
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <__libc_init_array>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	2500      	movs	r5, #0
 8002574:	4e0c      	ldr	r6, [pc, #48]	; (80025a8 <__libc_init_array+0x38>)
 8002576:	4c0d      	ldr	r4, [pc, #52]	; (80025ac <__libc_init_array+0x3c>)
 8002578:	1ba4      	subs	r4, r4, r6
 800257a:	10a4      	asrs	r4, r4, #2
 800257c:	42a5      	cmp	r5, r4
 800257e:	d109      	bne.n	8002594 <__libc_init_array+0x24>
 8002580:	f000 f822 	bl	80025c8 <_init>
 8002584:	2500      	movs	r5, #0
 8002586:	4e0a      	ldr	r6, [pc, #40]	; (80025b0 <__libc_init_array+0x40>)
 8002588:	4c0a      	ldr	r4, [pc, #40]	; (80025b4 <__libc_init_array+0x44>)
 800258a:	1ba4      	subs	r4, r4, r6
 800258c:	10a4      	asrs	r4, r4, #2
 800258e:	42a5      	cmp	r5, r4
 8002590:	d105      	bne.n	800259e <__libc_init_array+0x2e>
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002598:	4798      	blx	r3
 800259a:	3501      	adds	r5, #1
 800259c:	e7ee      	b.n	800257c <__libc_init_array+0xc>
 800259e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025a2:	4798      	blx	r3
 80025a4:	3501      	adds	r5, #1
 80025a6:	e7f2      	b.n	800258e <__libc_init_array+0x1e>
 80025a8:	0800260c 	.word	0x0800260c
 80025ac:	0800260c 	.word	0x0800260c
 80025b0:	0800260c 	.word	0x0800260c
 80025b4:	08002610 	.word	0x08002610

080025b8 <memset>:
 80025b8:	4603      	mov	r3, r0
 80025ba:	4402      	add	r2, r0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d100      	bne.n	80025c2 <memset+0xa>
 80025c0:	4770      	bx	lr
 80025c2:	f803 1b01 	strb.w	r1, [r3], #1
 80025c6:	e7f9      	b.n	80025bc <memset+0x4>

080025c8 <_init>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr

080025d4 <_fini>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr
