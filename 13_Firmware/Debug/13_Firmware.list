
13_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f44  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800c050  0800c050  0000c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c088  0800c088  0000c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c08c  0800c08c  0000c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800c090  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001978  20000010  0800c09c  00010010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001988  0800c09c  00011988  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008c07  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002406  00000000  00000000  00018c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a98  00000000  00000000  0001b048  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  0001bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f1b  00000000  00000000  0001c410  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ec6  00000000  00000000  0002232b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000251f1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000027b4  00000000  00000000  00025270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000010 	.word	0x20000010
 8008128:	00000000 	.word	0x00000000
 800812c:	0800c038 	.word	0x0800c038

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000014 	.word	0x20000014
 8008148:	0800c038 	.word	0x0800c038

0800814c <apInit>:
cmd_t cmd_mcu;



void apInit(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0


  cmdInit(&cmd_mcu);
 8008150:	4805      	ldr	r0, [pc, #20]	; (8008168 <apInit+0x1c>)
 8008152:	f000 f984 	bl	800845e <cmdInit>
  cmdBegin(&cmd_mcu, _DEF_UART1, 115200);
 8008156:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800815a:	2100      	movs	r1, #0
 800815c:	4802      	ldr	r0, [pc, #8]	; (8008168 <apInit+0x1c>)
 800815e:	f000 f994 	bl	800848a <cmdBegin>
}
 8008162:	bf00      	nop
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	200001f8 	.word	0x200001f8

0800816c <apMain>:

void apMain(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0

  while(1)
  {
    mcuLoop(&cmd_mcu);
 8008170:	4801      	ldr	r0, [pc, #4]	; (8008178 <apMain+0xc>)
 8008172:	f000 f803 	bl	800817c <mcuLoop>
 8008176:	e7fb      	b.n	8008170 <apMain+0x4>
 8008178:	200001f8 	.word	0x200001f8

0800817c <mcuLoop>:
  }
}

void mcuLoop(cmd_t *p_cmd)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]


  if (cmdReceivePacket(p_cmd) == true)
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f9b9 	bl	80084fc <cmdReceivePacket>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00f      	beq.n	80081b0 <mcuLoop+0x34>
  {
    switch(p_cmd->rx_packet.cmd)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3820 	ldrb.w	r3, [r3, #2080]	; 0x820
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <mcuLoop+0x24>
 800819a:	2b10      	cmp	r3, #16
 800819c:	d004      	beq.n	80081a8 <mcuLoop+0x2c>
      case BOOT_CMD_LED_CONTROL:
        mcuCmdLedControl(p_cmd);
        break;
    }
  }
}
 800819e:	e007      	b.n	80081b0 <mcuLoop+0x34>
        mcuCmdReadVersion(p_cmd);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f809 	bl	80081b8 <mcuCmdReadVersion>
        break;
 80081a6:	e003      	b.n	80081b0 <mcuLoop+0x34>
        mcuCmdLedControl(p_cmd);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f84b 	bl	8008244 <mcuCmdLedControl>
        break;
 80081ae:	bf00      	nop
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <mcuCmdReadVersion>:

void mcuCmdReadVersion(cmd_t *p_cmd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  char *fw_version = "V180824R1";
 80081c0:	4b1f      	ldr	r3, [pc, #124]	; (8008240 <mcuCmdReadVersion+0x88>)
 80081c2:	60fb      	str	r3, [r7, #12]


  p_cmd->tx_packet.data[0] = fw_version[0];
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	781a      	ldrb	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	771a      	strb	r2, [r3, #28]
  p_cmd->tx_packet.data[1] = fw_version[1];
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	775a      	strb	r2, [r3, #29]
  p_cmd->tx_packet.data[2] = fw_version[2];
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3302      	adds	r3, #2
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	779a      	strb	r2, [r3, #30]
  p_cmd->tx_packet.data[3] = fw_version[3];
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3303      	adds	r3, #3
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	77da      	strb	r2, [r3, #31]
  p_cmd->tx_packet.data[4] = fw_version[4];
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3304      	adds	r3, #4
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f883 2020 	strb.w	r2, [r3, #32]
  p_cmd->tx_packet.data[5] = fw_version[5];
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3305      	adds	r3, #5
 80081fa:	781a      	ldrb	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  p_cmd->tx_packet.data[6] = fw_version[6];
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3306      	adds	r3, #6
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  p_cmd->tx_packet.data[7] = fw_version[7];
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3307      	adds	r3, #7
 8008212:	781a      	ldrb	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  p_cmd->tx_packet.data[8] = fw_version[8];
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3308      	adds	r3, #8
 800821e:	781a      	ldrb	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  cmdSendResp(p_cmd, OK, p_cmd->tx_packet.data, 9);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f103 021c 	add.w	r2, r3, #28
 800822c:	2309      	movs	r3, #9
 800822e:	2100      	movs	r1, #0
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa6f 	bl	8008714 <cmdSendResp>
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	0800c050 	.word	0x0800c050

08008244 <mcuCmdLedControl>:

void mcuCmdLedControl(cmd_t *p_cmd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

  if (p_cmd->rx_packet.data[0] > 0)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3828 	ldrb.w	r3, [r3, #2088]	; 0x828
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <mcuCmdLedControl+0x1a>
  {
    ledOn(_DEF_LED1);
 8008256:	2000      	movs	r0, #0
 8008258:	f001 f884 	bl	8009364 <ledOn>
 800825c:	e002      	b.n	8008264 <mcuCmdLedControl+0x20>
  }
  else
  {
    ledOff(_DEF_LED1);
 800825e:	2000      	movs	r0, #0
 8008260:	f001 f890 	bl	8009384 <ledOff>
  }

  cmdSendResp(p_cmd, OK, NULL, 0);
 8008264:	2300      	movs	r3, #0
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa52 	bl	8008714 <cmdSendResp>
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b090      	sub	sp, #64	; 0x40
 800827c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800827e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	605a      	str	r2, [r3, #4]
 8008288:	609a      	str	r2, [r3, #8]
 800828a:	60da      	str	r2, [r3, #12]
 800828c:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 800828e:	1d3b      	adds	r3, r7, #4
 8008290:	2228      	movs	r2, #40	; 0x28
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f003 fec7 	bl	800c028 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 800829a:	2302      	movs	r3, #2
 800829c:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 80082a2:	2300      	movs	r3, #0
 80082a4:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 80082a6:	2301      	movs	r3, #1
 80082a8:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80082aa:	2310      	movs	r3, #16
 80082ac:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80082b2:	2302      	movs	r3, #2
 80082b4:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 80082b6:	2300      	movs	r3, #0
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80082ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 fc8c 	bl	800abe0 <HAL_RCC_OscConfig>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d000      	beq.n	80082d0 <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 80082ce:	e7fe      	b.n	80082ce <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80082d0:	230f      	movs	r3, #15
 80082d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082d4:	2302      	movs	r3, #2
 80082d6:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082d8:	2300      	movs	r3, #0
 80082da:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082dc:	2300      	movs	r3, #0
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80082e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80082e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082ea:	2102      	movs	r1, #2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f002 fef7 	bl	800b0e0 <HAL_RCC_ClockConfig>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d000      	beq.n	80082fa <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 80082f8:	e7fe      	b.n	80082f8 <SystemClock_Config+0x80>
  }
}
 80082fa:	bf00      	nop
 80082fc:	3740      	adds	r7, #64	; 0x40
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <bspInit>:




void bspInit(void){
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
    HAL_Init();
 800830a:	f001 fd2b 	bl	8009d64 <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 800830e:	f7ff ffb3 	bl	8008278 <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008312:	4a0e      	ldr	r2, [pc, #56]	; (800834c <bspInit+0x48>)
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <bspInit+0x48>)
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f043 0304 	orr.w	r3, r3, #4
 800831c:	6193      	str	r3, [r2, #24]
 800831e:	4b0b      	ldr	r3, [pc, #44]	; (800834c <bspInit+0x48>)
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	607b      	str	r3, [r7, #4]
 8008328:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800832a:	4a08      	ldr	r2, [pc, #32]	; (800834c <bspInit+0x48>)
 800832c:	4b07      	ldr	r3, [pc, #28]	; (800834c <bspInit+0x48>)
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	f043 0310 	orr.w	r3, r3, #16
 8008334:	6193      	str	r3, [r2, #24]
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <bspInit+0x48>)
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40021000 	.word	0x40021000

08008350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <SystemInit+0x5c>)
 8008356:	4b15      	ldr	r3, [pc, #84]	; (80083ac <SystemInit+0x5c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008360:	4912      	ldr	r1, [pc, #72]	; (80083ac <SystemInit+0x5c>)
 8008362:	4b12      	ldr	r3, [pc, #72]	; (80083ac <SystemInit+0x5c>)
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <SystemInit+0x60>)
 8008368:	4013      	ands	r3, r2
 800836a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800836c:	4a0f      	ldr	r2, [pc, #60]	; (80083ac <SystemInit+0x5c>)
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <SystemInit+0x5c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800837c:	4a0b      	ldr	r2, [pc, #44]	; (80083ac <SystemInit+0x5c>)
 800837e:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <SystemInit+0x5c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008386:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008388:	4a08      	ldr	r2, [pc, #32]	; (80083ac <SystemInit+0x5c>)
 800838a:	4b08      	ldr	r3, [pc, #32]	; (80083ac <SystemInit+0x5c>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008392:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <SystemInit+0x5c>)
 8008396:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800839a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <SystemInit+0x64>)
 800839e:	4a06      	ldr	r2, [pc, #24]	; (80083b8 <SystemInit+0x68>)
 80083a0:	609a      	str	r2, [r3, #8]
#endif 
}
 80083a2:	bf00      	nop
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	40021000 	.word	0x40021000
 80083b0:	f8ff0000 	.word	0xf8ff0000
 80083b4:	e000ed00 	.word	0xe000ed00
 80083b8:	08008000 	.word	0x08008000

080083bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80083bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80083be:	e003      	b.n	80083c8 <LoopCopyDataInit>

080083c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80083c0:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80083c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80083c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80083c6:	3104      	adds	r1, #4

080083c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80083c8:	480a      	ldr	r0, [pc, #40]	; (80083f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80083ca:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80083cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80083ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80083d0:	d3f6      	bcc.n	80083c0 <CopyDataInit>
  ldr r2, =_sbss
 80083d2:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80083d4:	e002      	b.n	80083dc <LoopFillZerobss>

080083d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80083d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80083d8:	f842 3b04 	str.w	r3, [r2], #4

080083dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80083dc:	4b08      	ldr	r3, [pc, #32]	; (8008400 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80083de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80083e0:	d3f9      	bcc.n	80083d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083e2:	f7ff ffb5 	bl	8008350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083e6:	f003 fdfb 	bl	800bfe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80083ea:	f003 fded 	bl	800bfc8 <main>
  bx lr
 80083ee:	4770      	bx	lr
  ldr r3, =_sidata
 80083f0:	0800c090 	.word	0x0800c090
  ldr r0, =_sdata
 80083f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80083f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80083fc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8008400:	20001988 	.word	0x20001988

08008404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008404:	e7fe      	b.n	8008404 <ADC1_2_IRQHandler>

08008406 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8008406:	b480      	push	{r7}
 8008408:	af00      	add	r7, sp, #0
}
 800840a:	bf00      	nop
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr

08008412 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8008412:	b480      	push	{r7}
 8008414:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8008416:	e7fe      	b.n	8008416 <HardFault_Handler+0x4>

08008418 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  Noned
  * @retval None
  */
void MemManage_Handler(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800841c:	e7fe      	b.n	800841c <MemManage_Handler+0x4>

0800841e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800841e:	b480      	push	{r7}
 8008420:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8008422:	e7fe      	b.n	8008422 <BusFault_Handler+0x4>

08008424 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8008428:	e7fe      	b.n	8008428 <UsageFault_Handler+0x4>

0800842a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800842a:	b480      	push	{r7}
 800842c:	af00      	add	r7, sp, #0
}
 800842e:	bf00      	nop
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr

08008436 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8008436:	b480      	push	{r7}
 8008438:	af00      	add	r7, sp, #0
}
 800843a:	bf00      	nop
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr

08008442 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8008442:	b480      	push	{r7}
 8008444:	af00      	add	r7, sp, #0
}
 8008446:	bf00      	nop
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <SysTick_Handler>:
  * @param  None
  * @retval None
  */
extern void swtimerISR(void);
void SysTick_Handler(void)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8008452:	f001 fcd3 	bl	8009dfc <HAL_IncTick>
  swtimerISR();
 8008456:	f000 ffeb 	bl	8009430 <swtimerISR>
}
 800845a:	bf00      	nop
 800845c:	bd80      	pop	{r7, pc}

0800845e <cmdInit>:

static void cmdPutch(uint8_t ch, uint8_t data);


void cmdInit(cmd_t *p_cmd)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  p_cmd->init  = false;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	709a      	strb	r2, [r3, #2]

  p_cmd->rx_packet.error = 0;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822
  p_cmd->tx_packet.error = 0;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	759a      	strb	r2, [r3, #22]
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr

0800848a <cmdBegin>:

bool cmdBegin(cmd_t *p_cmd, uint8_t ch, uint32_t baud)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	460b      	mov	r3, r1
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	72fb      	strb	r3, [r7, #11]
  p_cmd->ch   = ch;     // channel.
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	7afa      	ldrb	r2, [r7, #11]
 800849c:	701a      	strb	r2, [r3, #0]
  p_cmd->baud = baud;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
  p_cmd->init = true;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	709a      	strb	r2, [r3, #2]

  p_cmd->save_time[0] = millis();
 80084b0:	f001 fc50 	bl	8009d54 <millis>
 80084b4:	4602      	mov	r2, r0
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	609a      	str	r2, [r3, #8]
  p_cmd->save_time[1] = millis();
 80084ba:	f001 fc4b 	bl	8009d54 <millis>
 80084be:	4602      	mov	r2, r0
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	60da      	str	r2, [r3, #12]

  return uartOpen(ch, baud);
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f8e9 	bl	80096a0 <uartOpen>
 80084ce:	4603      	mov	r3, r0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <cmdPutch>:

void cmdPutch(uint8_t ch, uint8_t data)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	460a      	mov	r2, r1
 80084e2:	71fb      	strb	r3, [r7, #7]
 80084e4:	4613      	mov	r3, r2
 80084e6:	71bb      	strb	r3, [r7, #6]
  uartPutch(ch, data);
 80084e8:	79ba      	ldrb	r2, [r7, #6]
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 fa66 	bl	80099c0 <uartPutch>
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <cmdReceivePacket>:

bool cmdReceivePacket(cmd_t *p_cmd)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  bool     ret = false;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  uint8_t  ch;
  uint32_t index;
  //-- 명령어 수신
  //
  if( uartAvailable(p_cmd->ch) )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f001 f987 	bl	8009820 <uartAvailable>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d010      	beq.n	800853a <cmdReceivePacket+0x3e>
  {
    ch = uartRead(p_cmd->ch);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fa9d 	bl	8009a5c <uartRead>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]
  {
    return false;
  }
 //-- 바이트간 타임아웃 설정(500ms)
  //
  if((millis()-p_cmd->save_time[0]) > 500)
 8008526:	f001 fc15 	bl	8009d54 <millis>
 800852a:	4602      	mov	r2, r0
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008536:	d905      	bls.n	8008544 <cmdReceivePacket+0x48>
 8008538:	e001      	b.n	800853e <cmdReceivePacket+0x42>
    return false;
 800853a:	2300      	movs	r3, #0
 800853c:	e0e6      	b.n	800870c <cmdReceivePacket+0x210>
  {
    p_cmd->state        = CMD_STATE_WAIT_STX;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	709a      	strb	r2, [r3, #2]
  }
  p_cmd->save_time[0] = millis();
 8008544:	f001 fc06 	bl	8009d54 <millis>
 8008548:	4602      	mov	r2, r0
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	609a      	str	r2, [r3, #8]
  //-- 명령어 상태
  //
  switch(p_cmd->state)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	789b      	ldrb	r3, [r3, #2]
 8008552:	2b08      	cmp	r3, #8
 8008554:	f200 80d9 	bhi.w	800870a <cmdReceivePacket+0x20e>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <cmdReceivePacket+0x64>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008585 	.word	0x08008585
 8008564:	080085a5 	.word	0x080085a5
 8008568:	080085c7 	.word	0x080085c7
 800856c:	0800870b 	.word	0x0800870b
 8008570:	080085f1 	.word	0x080085f1
 8008574:	08008615 	.word	0x08008615
 8008578:	0800867d 	.word	0x0800867d
 800857c:	080086d3 	.word	0x080086d3
 8008580:	080086e3 	.word	0x080086e3
    //-- STX 문자 기다리는 상태
    //
    case CMD_STATE_WAIT_STX:

      // 시작 문자를 기다림
      if( ch == CMD_STX )
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b02      	cmp	r3, #2
 8008588:	f040 80bc 	bne.w	8008704 <cmdReceivePacket+0x208>
      {
        p_cmd->state               = CMD_STATE_WAIT_CMD;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	709a      	strb	r2, [r3, #2]
        p_cmd->rx_packet.check_sum = 0x00;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
        p_cmd->rx_packet.length    = 0;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      }
      break;
 80085a2:	e0af      	b.n	8008704 <cmdReceivePacket+0x208>

    //-- 명령어 기다리는 상태
    //
    case CMD_STATE_WAIT_CMD:
      p_cmd->rx_packet.cmd        = ch;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	7bba      	ldrb	r2, [r7, #14]
 80085a8:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
      p_cmd->rx_packet.check_sum ^= ch;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	4053      	eors	r3, r2
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_OPTION_ERROR;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	709a      	strb	r2, [r3, #2]
      break;
 80085c4:	e0a1      	b.n	800870a <cmdReceivePacket+0x20e>

    case CMD_STATE_WAIT_OPTION_ERROR:
      p_cmd->rx_packet.option     = ch;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7bba      	ldrb	r2, [r7, #14]
 80085ca:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821
      p_cmd->rx_packet.error      = ch;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7bba      	ldrb	r2, [r7, #14]
 80085d2:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822
      p_cmd->rx_packet.check_sum ^= ch;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	4053      	eors	r3, r2
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_L;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2204      	movs	r2, #4
 80085ec:	709a      	strb	r2, [r3, #2]
      break;
 80085ee:	e08c      	b.n	800870a <cmdReceivePacket+0x20e>

    //-- 데이터 사이즈 기다리는 상태
    //
    case CMD_STATE_WAIT_LENGTH_L:
      p_cmd->rx_packet.length     = ch;
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      p_cmd->rx_packet.check_sum ^= ch;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	4053      	eors	r3, r2
 8008604:	b2da      	uxtb	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_H;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2205      	movs	r2, #5
 8008610:	709a      	strb	r2, [r3, #2]
      break;
 8008612:	e07a      	b.n	800870a <cmdReceivePacket+0x20e>

    case CMD_STATE_WAIT_LENGTH_H:
      p_cmd->rx_packet.length    |= ch<<8;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 800861a:	b21a      	sxth	r2, r3
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	021b      	lsls	r3, r3, #8
 8008620:	b21b      	sxth	r3, r3
 8008622:	4313      	orrs	r3, r2
 8008624:	b21b      	sxth	r3, r3
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      p_cmd->rx_packet.check_sum ^= ch;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	4053      	eors	r3, r2
 8008638:	b2da      	uxtb	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_H;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2205      	movs	r2, #5
 8008644:	709a      	strb	r2, [r3, #2]

      if (p_cmd->rx_packet.length <= CMD_MAX_DATA_LENGTH)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 800864c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008650:	d810      	bhi.n	8008674 <cmdReceivePacket+0x178>
      {
        if (p_cmd->rx_packet.length > 0)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <cmdReceivePacket+0x170>
        {
          p_cmd->rx_packet.index = 0;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
          p_cmd->state = CMD_STATE_WAIT_DATA;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2206      	movs	r2, #6
 8008668:	709a      	strb	r2, [r3, #2]
      }
      else
      {
        p_cmd->state = CMD_STATE_WAIT_STX;
      }
      break;
 800866a:	e04e      	b.n	800870a <cmdReceivePacket+0x20e>
          p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2207      	movs	r2, #7
 8008670:	709a      	strb	r2, [r3, #2]
      break;
 8008672:	e04a      	b.n	800870a <cmdReceivePacket+0x20e>
        p_cmd->state = CMD_STATE_WAIT_STX;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	709a      	strb	r2, [r3, #2]
      break;
 800867a:	e046      	b.n	800870a <cmdReceivePacket+0x20e>

    //-- 데이터를 기다리는 상태
    //
    case CMD_STATE_WAIT_DATA:

      index = p_cmd->rx_packet.index;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8008682:	60bb      	str	r3, [r7, #8]

      p_cmd->rx_packet.check_sum ^= ch;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	4053      	eors	r3, r2
 800868e:	b2da      	uxtb	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      index = p_cmd->rx_packet.index;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800869c:	60bb      	str	r3, [r7, #8]
      p_cmd->rx_packet.data[index] = ch;
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4413      	add	r3, r2
 80086a4:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80086a8:	7bba      	ldrb	r2, [r7, #14]
 80086aa:	701a      	strb	r2, [r3, #0]

      p_cmd->rx_packet.index++;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

      if (p_cmd->rx_packet.index >= p_cmd->rx_packet.length)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	f8b2 2824 	ldrh.w	r2, [r2, #2084]	; 0x824
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d31e      	bcc.n	8008708 <cmdReceivePacket+0x20c>
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2207      	movs	r2, #7
 80086ce:	709a      	strb	r2, [r3, #2]
      }
      break;
 80086d0:	e01a      	b.n	8008708 <cmdReceivePacket+0x20c>
    //-- 체크섬을 기다리는 상태
    //
    case CMD_STATE_WAIT_CHECKSUM:


      p_cmd->rx_packet.check_sum_recv = ch;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7bba      	ldrb	r2, [r7, #14]
 80086d6:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
      p_cmd->state                    = CMD_STATE_WAIT_ETX;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2208      	movs	r2, #8
 80086de:	709a      	strb	r2, [r3, #2]
      break;
 80086e0:	e013      	b.n	800870a <cmdReceivePacket+0x20e>

    //-- ETX 기다리는 상태
    //
    case CMD_STATE_WAIT_ETX:

      if (ch == CMD_ETX)
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d109      	bne.n	80086fc <cmdReceivePacket+0x200>
      {
        if (p_cmd->rx_packet.check_sum_recv == p_cmd->rx_packet.check_sum)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 2827 	ldrb.w	r2, [r3, #2087]	; 0x827
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3826 	ldrb.w	r3, [r3, #2086]	; 0x826
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d101      	bne.n	80086fc <cmdReceivePacket+0x200>
        {
          ret = true;
 80086f8:	2301      	movs	r3, #1
 80086fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      p_cmd->state = CMD_STATE_WAIT_STX;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	709a      	strb	r2, [r3, #2]
      break;
 8008702:	e002      	b.n	800870a <cmdReceivePacket+0x20e>
      break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <cmdReceivePacket+0x20e>
      break;
 8008708:	bf00      	nop
  }

  return ret;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <cmdSendResp>:

void cmdSendResp(cmd_t *p_cmd, uint8_t err_code, uint8_t *p_data, uint32_t length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	460b      	mov	r3, r1
 8008722:	72fb      	strb	r3, [r7, #11]
  uint32_t i;
  uint8_t  ch;
  uint8_t  check_sum = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	74fb      	strb	r3, [r7, #19]
  uint8_t  data;

  ch = p_cmd->ch;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	74bb      	strb	r3, [r7, #18]




  p_cmd->tx_packet.cmd   = p_cmd->rx_packet.cmd;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 2820 	ldrb.w	r2, [r3, #2080]	; 0x820
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	751a      	strb	r2, [r3, #20]
  p_cmd->tx_packet.error = err_code;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	7afa      	ldrb	r2, [r7, #11]
 800873c:	759a      	strb	r2, [r3, #22]

  if (p_data != NULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d013      	beq.n	800876c <cmdSendResp+0x58>
  {
    for(i=0; i<length; i++)
 8008744:	2300      	movs	r3, #0
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e00c      	b.n	8008764 <cmdSendResp+0x50>
    {
      p_cmd->tx_packet.data[i] = p_data[i];
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	4413      	add	r3, r2
 8008750:	7819      	ldrb	r1, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	4413      	add	r3, r2
 8008758:	331c      	adds	r3, #28
 800875a:	460a      	mov	r2, r1
 800875c:	701a      	strb	r2, [r3, #0]
    for(i=0; i<length; i++)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	3301      	adds	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d3ee      	bcc.n	800874a <cmdSendResp+0x36>
    }
  }
  p_cmd->tx_packet.length = length;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	b29a      	uxth	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	831a      	strh	r2, [r3, #24]


  cmdPutch(ch, CMD_STX);
 8008774:	7cbb      	ldrb	r3, [r7, #18]
 8008776:	2102      	movs	r1, #2
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fead 	bl	80084d8 <cmdPutch>
  cmdPutch(ch, p_cmd->tx_packet.cmd);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	7d1a      	ldrb	r2, [r3, #20]
 8008782:	7cbb      	ldrb	r3, [r7, #18]
 8008784:	4611      	mov	r1, r2
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff fea6 	bl	80084d8 <cmdPutch>
  check_sum ^= p_cmd->tx_packet.cmd;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	7d1a      	ldrb	r2, [r3, #20]
 8008790:	7cfb      	ldrb	r3, [r7, #19]
 8008792:	4053      	eors	r3, r2
 8008794:	74fb      	strb	r3, [r7, #19]

  cmdPutch(ch, p_cmd->tx_packet.error);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	7d9a      	ldrb	r2, [r3, #22]
 800879a:	7cbb      	ldrb	r3, [r7, #18]
 800879c:	4611      	mov	r1, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fe9a 	bl	80084d8 <cmdPutch>
  check_sum ^= p_cmd->tx_packet.error;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	7d9a      	ldrb	r2, [r3, #22]
 80087a8:	7cfb      	ldrb	r3, [r7, #19]
 80087aa:	4053      	eors	r3, r2
 80087ac:	74fb      	strb	r3, [r7, #19]

  data = p_cmd->tx_packet.length & 0xFF;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8b1b      	ldrh	r3, [r3, #24]
 80087b2:	747b      	strb	r3, [r7, #17]
  cmdPutch(ch, data); check_sum ^= data;
 80087b4:	7c7a      	ldrb	r2, [r7, #17]
 80087b6:	7cbb      	ldrb	r3, [r7, #18]
 80087b8:	4611      	mov	r1, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fe8c 	bl	80084d8 <cmdPutch>
 80087c0:	7cfa      	ldrb	r2, [r7, #19]
 80087c2:	7c7b      	ldrb	r3, [r7, #17]
 80087c4:	4053      	eors	r3, r2
 80087c6:	74fb      	strb	r3, [r7, #19]
  data = (p_cmd->tx_packet.length>>8) & 0xFF;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8b1b      	ldrh	r3, [r3, #24]
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	747b      	strb	r3, [r7, #17]
  cmdPutch(ch, data); check_sum ^= data;
 80087d2:	7c7a      	ldrb	r2, [r7, #17]
 80087d4:	7cbb      	ldrb	r3, [r7, #18]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff fe7d 	bl	80084d8 <cmdPutch>
 80087de:	7cfa      	ldrb	r2, [r7, #19]
 80087e0:	7c7b      	ldrb	r3, [r7, #17]
 80087e2:	4053      	eors	r3, r2
 80087e4:	74fb      	strb	r3, [r7, #19]


  for( i=0; i<p_cmd->tx_packet.length && i<CMD_MAX_DATA_LENGTH; i++ )
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	e014      	b.n	8008816 <cmdSendResp+0x102>
  {
    cmdPutch(ch, p_cmd->tx_packet.data[i]);
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	4413      	add	r3, r2
 80087f2:	331c      	adds	r3, #28
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	7cbb      	ldrb	r3, [r7, #18]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fe6c 	bl	80084d8 <cmdPutch>
    check_sum ^= p_cmd->tx_packet.data[i];
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	4413      	add	r3, r2
 8008806:	331c      	adds	r3, #28
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	7cfb      	ldrb	r3, [r7, #19]
 800880c:	4053      	eors	r3, r2
 800880e:	74fb      	strb	r3, [r7, #19]
  for( i=0; i<p_cmd->tx_packet.length && i<CMD_MAX_DATA_LENGTH; i++ )
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	3301      	adds	r3, #1
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8b1b      	ldrh	r3, [r3, #24]
 800881a:	461a      	mov	r2, r3
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	429a      	cmp	r2, r3
 8008820:	d903      	bls.n	800882a <cmdSendResp+0x116>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008828:	d3e0      	bcc.n	80087ec <cmdSendResp+0xd8>
  }

  cmdPutch(ch, check_sum);
 800882a:	7cfa      	ldrb	r2, [r7, #19]
 800882c:	7cbb      	ldrb	r3, [r7, #18]
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff fe51 	bl	80084d8 <cmdPutch>
  cmdPutch(ch, CMD_ETX);
 8008836:	7cbb      	ldrb	r3, [r7, #18]
 8008838:	2103      	movs	r1, #3
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff fe4c 	bl	80084d8 <cmdPutch>
}
 8008840:	bf00      	nop
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008854:	2301      	movs	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d104      	bne.n	8008882 <qbufferCreate+0x3a>
    p_node->length = 0;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	609a      	str	r2, [r3, #8]
    ret = false;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8008882:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 8008884:	4618      	mov	r0, r3
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr

0800888e <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 800888e:	b480      	push	{r7}
 8008890:	b089      	sub	sp, #36	; 0x24
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800889a:	2301      	movs	r3, #1
 800889c:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <qbufferWrite+0x1c>
 80088a6:	2300      	movs	r3, #0
 80088a8:	e02d      	b.n	8008906 <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
 80088ae:	e025      	b.n	80088fc <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d101      	bne.n	80088cc <qbufferWrite+0x3e>
      next_index = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d00c      	beq.n	80088f0 <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	4413      	add	r3, r2
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	440a      	add	r2, r1
 80088e4:	7812      	ldrb	r2, [r2, #0]
 80088e6:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e002      	b.n	80088f6 <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 80088f0:	2300      	movs	r3, #0
 80088f2:	77fb      	strb	r3, [r7, #31]
      break;
 80088f4:	e006      	b.n	8008904 <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	3301      	adds	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	429a      	cmp	r2, r3
 8008902:	d3d5      	bcc.n	80088b0 <qbufferWrite+0x22>
    }
  }
  return ret;
 8008904:	7ffb      	ldrb	r3, [r7, #31]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3724      	adds	r7, #36	; 0x24
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 8008910:	b480      	push	{r7}
 8008912:	b089      	sub	sp, #36	; 0x24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800891c:	2301      	movs	r3, #1
 800891e:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <qbufferRead+0x1c>
 8008928:	2300      	movs	r3, #0
 800892a:	e02d      	b.n	8008988 <qbufferRead+0x78>
  for(i=0; i<length; i++){
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e025      	b.n	800897e <qbufferRead+0x6e>
    index      = p_node->ptr_out;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_out + 1;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	3301      	adds	r3, #1
 800893e:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the out index is end of the buffer.
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	429a      	cmp	r2, r3
 8008948:	d101      	bne.n	800894e <qbufferRead+0x3e>
      next_index = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	61bb      	str	r3, [r7, #24]
    }
    if(index != p_node->ptr_in){      // if the buffer is not empty
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d00c      	beq.n	8008972 <qbufferRead+0x62>
      p_data[i]       = p_node->p_buf[index];
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	4413      	add	r3, r2
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	68d1      	ldr	r1, [r2, #12]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	440a      	add	r2, r1
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	701a      	strb	r2, [r3, #0]
      p_node->ptr_out = next_index;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	605a      	str	r2, [r3, #4]
 8008970:	e002      	b.n	8008978 <qbufferRead+0x68>
    }
    else{                             // if the buffer is empty ERR_EMPTY
      ret = false;
 8008972:	2300      	movs	r3, #0
 8008974:	77fb      	strb	r3, [r7, #31]
      break;
 8008976:	e006      	b.n	8008986 <qbufferRead+0x76>
  for(i=0; i<length; i++){
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	3301      	adds	r3, #1
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d3d5      	bcc.n	8008932 <qbufferRead+0x22>
    }
  }
  return ret;
 8008986:	7ffb      	ldrb	r3, [r7, #31]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3724      	adds	r7, #36	; 0x24
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node){  // How many is there the buffer elements could be used.
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	441a      	add	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6892      	ldr	r2, [r2, #8]
 80089ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80089b2:	fb02 f201 	mul.w	r2, r2, r1
 80089b6:	1a9b      	subs	r3, r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  return length;
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr

080089c6 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node){
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	605a      	str	r2, [r3, #4]
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <button_isr>:
  uint32_t released_end_time;
}button_t;

static button_t button_tbl[BUTTON_MAX_CH];

void button_isr(void *arg){
 80089e4:	b590      	push	{r4, r7, lr}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<BUTTON_MAX_CH; i++){
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]
 80089f0:	e09f      	b.n	8008b32 <button_isr+0x14e>
    if(buttonGetPressed(i)){
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f905 	bl	8008c04 <buttonGetPressed>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d056      	beq.n	8008aae <button_isr+0xca>
      if(button_tbl[i].pressed == false){
 8008a00:	7bfa      	ldrb	r2, [r7, #15]
 8008a02:	4950      	ldr	r1, [pc, #320]	; (8008b44 <button_isr+0x160>)
 8008a04:	4613      	mov	r3, r2
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	4413      	add	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	440b      	add	r3, r1
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f083 0301 	eor.w	r3, r3, #1
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d015      	beq.n	8008a46 <button_isr+0x62>
        button_tbl[i].pressed_event = true;
 8008a1a:	7bfa      	ldrb	r2, [r7, #15]
 8008a1c:	4949      	ldr	r1, [pc, #292]	; (8008b44 <button_isr+0x160>)
 8008a1e:	4613      	mov	r3, r2
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	4413      	add	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	440b      	add	r3, r1
 8008a28:	3301      	adds	r3, #1
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = millis();
 8008a2e:	7bfc      	ldrb	r4, [r7, #15]
 8008a30:	f001 f990 	bl	8009d54 <millis>
 8008a34:	4601      	mov	r1, r0
 8008a36:	4a43      	ldr	r2, [pc, #268]	; (8008b44 <button_isr+0x160>)
 8008a38:	4623      	mov	r3, r4
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	4423      	add	r3, r4
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	4413      	add	r3, r2
 8008a42:	3304      	adds	r3, #4
 8008a44:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = true;
 8008a46:	7bfa      	ldrb	r2, [r7, #15]
 8008a48:	493e      	ldr	r1, [pc, #248]	; (8008b44 <button_isr+0x160>)
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	4413      	add	r3, r2
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	440b      	add	r3, r1
 8008a54:	2201      	movs	r2, #1
 8008a56:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 8008a58:	7bfa      	ldrb	r2, [r7, #15]
 8008a5a:	493a      	ldr	r1, [pc, #232]	; (8008b44 <button_isr+0x160>)
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	4413      	add	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	440b      	add	r3, r1
 8008a66:	3302      	adds	r3, #2
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	b298      	uxth	r0, r3
 8008a6e:	4935      	ldr	r1, [pc, #212]	; (8008b44 <button_isr+0x160>)
 8008a70:	4613      	mov	r3, r2
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	4413      	add	r3, r2
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	440b      	add	r3, r1
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	801a      	strh	r2, [r3, #0]

      button_tbl[i].pressed_end_time = millis();
 8008a80:	7bfc      	ldrb	r4, [r7, #15]
 8008a82:	f001 f967 	bl	8009d54 <millis>
 8008a86:	4601      	mov	r1, r0
 8008a88:	4a2e      	ldr	r2, [pc, #184]	; (8008b44 <button_isr+0x160>)
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	4423      	add	r3, r4
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	4413      	add	r3, r2
 8008a94:	3308      	adds	r3, #8
 8008a96:	6019      	str	r1, [r3, #0]
      button_tbl[i].released = false;
 8008a98:	7bfa      	ldrb	r2, [r7, #15]
 8008a9a:	492a      	ldr	r1, [pc, #168]	; (8008b44 <button_isr+0x160>)
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	4413      	add	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	440b      	add	r3, r1
 8008aa6:	330c      	adds	r3, #12
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	701a      	strb	r2, [r3, #0]
 8008aac:	e03e      	b.n	8008b2c <button_isr+0x148>
    }
    else{                                   // not pressed
      if(button_tbl[i].pressed == true){
 8008aae:	7bfa      	ldrb	r2, [r7, #15]
 8008ab0:	4924      	ldr	r1, [pc, #144]	; (8008b44 <button_isr+0x160>)
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4413      	add	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	440b      	add	r3, r1
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d015      	beq.n	8008aee <button_isr+0x10a>
        button_tbl[i].released_event = true;
 8008ac2:	7bfa      	ldrb	r2, [r7, #15]
 8008ac4:	491f      	ldr	r1, [pc, #124]	; (8008b44 <button_isr+0x160>)
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	440b      	add	r3, r1
 8008ad0:	330d      	adds	r3, #13
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = millis();
 8008ad6:	7bfc      	ldrb	r4, [r7, #15]
 8008ad8:	f001 f93c 	bl	8009d54 <millis>
 8008adc:	4601      	mov	r1, r0
 8008ade:	4a19      	ldr	r2, [pc, #100]	; (8008b44 <button_isr+0x160>)
 8008ae0:	4623      	mov	r3, r4
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	4423      	add	r3, r4
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4413      	add	r3, r2
 8008aea:	3310      	adds	r3, #16
 8008aec:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = false;
 8008aee:	7bfa      	ldrb	r2, [r7, #15]
 8008af0:	4914      	ldr	r1, [pc, #80]	; (8008b44 <button_isr+0x160>)
 8008af2:	4613      	mov	r3, r2
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	4413      	add	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	440b      	add	r3, r1
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 8008b00:	7bfa      	ldrb	r2, [r7, #15]
 8008b02:	4910      	ldr	r1, [pc, #64]	; (8008b44 <button_isr+0x160>)
 8008b04:	4613      	mov	r3, r2
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	4413      	add	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	440b      	add	r3, r1
 8008b0e:	330c      	adds	r3, #12
 8008b10:	2201      	movs	r2, #1
 8008b12:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = millis();
 8008b14:	7bfc      	ldrb	r4, [r7, #15]
 8008b16:	f001 f91d 	bl	8009d54 <millis>
 8008b1a:	4601      	mov	r1, r0
 8008b1c:	4a09      	ldr	r2, [pc, #36]	; (8008b44 <button_isr+0x160>)
 8008b1e:	4623      	mov	r3, r4
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4423      	add	r3, r4
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	4413      	add	r3, r2
 8008b28:	3314      	adds	r3, #20
 8008b2a:	6019      	str	r1, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	73fb      	strb	r3, [r7, #15]
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f43f af5c 	beq.w	80089f2 <button_isr+0xe>
    }
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd90      	pop	{r4, r7, pc}
 8008b42:	bf00      	nop
 8008b44:	2000002c 	.word	0x2000002c

08008b48 <buttonInit>:

void buttonInit(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af02      	add	r7, sp, #8
  swtimer_handle_t h_button_timer;
  uint32_t i;

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b56:	2302      	movs	r3, #2
 8008b58:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b5e:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b60:	463b      	mov	r3, r7
 8008b62:	4619      	mov	r1, r3
 8008b64:	4824      	ldr	r0, [pc, #144]	; (8008bf8 <buttonInit+0xb0>)
 8008b66:	f001 fdf5 	bl	800a754 <HAL_GPIO_Init>

  for(i=0; i<BUTTON_MAX_CH; i++){
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e029      	b.n	8008bc4 <buttonInit+0x7c>
    button_tbl[i].pressed_cnt    = 0;
 8008b70:	4922      	ldr	r1, [pc, #136]	; (8008bfc <buttonInit+0xb4>)
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4613      	mov	r3, r2
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	4413      	add	r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	440b      	add	r3, r1
 8008b7e:	3302      	adds	r3, #2
 8008b80:	2200      	movs	r2, #0
 8008b82:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed        = 0;
 8008b84:	491d      	ldr	r1, [pc, #116]	; (8008bfc <buttonInit+0xb4>)
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	4413      	add	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	440b      	add	r3, r1
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released       = 0;
 8008b96:	4919      	ldr	r1, [pc, #100]	; (8008bfc <buttonInit+0xb4>)
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	4413      	add	r3, r2
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	440b      	add	r3, r1
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8008baa:	4914      	ldr	r1, [pc, #80]	; (8008bfc <buttonInit+0xb4>)
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4413      	add	r3, r2
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	440b      	add	r3, r1
 8008bb8:	330d      	adds	r3, #13
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0d2      	beq.n	8008b70 <buttonInit+0x28>
  }

  h_button_timer = swtimerGetHandle();
 8008bca:	f000 fd21 	bl	8009610 <swtimerGetHandle>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	827b      	strh	r3, [r7, #18]
  swtimerSet(h_button_timer, 1, LOOP_TIME, button_isr, NULL);
 8008bd2:	8a7b      	ldrh	r3, [r7, #18]
 8008bd4:	b2d8      	uxtb	r0, r3
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <buttonInit+0xb8>)
 8008bdc:	2202      	movs	r2, #2
 8008bde:	2101      	movs	r1, #1
 8008be0:	f000 fcaa 	bl	8009538 <swtimerSet>
  swtimerStart(h_button_timer);
 8008be4:	8a7b      	ldrh	r3, [r7, #18]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fce7 	bl	80095bc <swtimerStart>
}
 8008bee:	bf00      	nop
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	40011000 	.word	0x40011000
 8008bfc:	2000002c 	.word	0x2000002c
 8008c00:	080089e5 	.word	0x080089e5

08008c04 <buttonGetPressed>:
  button_tbl[ch].released_start_time   = 0;
  button_tbl[ch].released_end_time     = 0;
}

bool buttonGetPressed(uint8_t ch)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8008c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c12:	4806      	ldr	r0, [pc, #24]	; (8008c2c <buttonGetPressed+0x28>)
 8008c14:	f001 ffb4 	bl	800ab80 <HAL_GPIO_ReadPin>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <buttonGetPressed+0x1e>
  {
    return true;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e000      	b.n	8008c24 <buttonGetPressed+0x20>
  }
  else
  {
    return false;
 8008c22:	2300      	movs	r3, #0
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	40011000 	.word	0x40011000

08008c30 <eepromInit>:




bool eepromInit()
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
  uint16_t i;
  for( i=0; i<NB_OF_VAR; i++ )
 8008c36:	2300      	movs	r3, #0
 8008c38:	80fb      	strh	r3, [r7, #6]
 8008c3a:	e007      	b.n	8008c4c <eepromInit+0x1c>
  {
    VirtAddVarTab[i] = i;
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	490d      	ldr	r1, [pc, #52]	; (8008c74 <eepromInit+0x44>)
 8008c40:	88fa      	ldrh	r2, [r7, #6]
 8008c42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for( i=0; i<NB_OF_VAR; i++ )
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	80fb      	strh	r3, [r7, #6]
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c50:	d9f4      	bls.n	8008c3c <eepromInit+0xc>
  }
  HAL_FLASH_Unlock();         // Because Emulating EEPROM on the flash.
 8008c52:	f001 fbff 	bl	800a454 <HAL_FLASH_Unlock>
  if( EE_Init() == HAL_OK )
 8008c56:	f000 f811 	bl	8008c7c <EE_Init>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <eepromInit+0x36>
  {
    IsInit = true;
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <eepromInit+0x48>)
 8008c62:	2201      	movs	r2, #1
 8008c64:	701a      	strb	r2, [r3, #0]
  }
  return IsInit;
 8008c66:	4b04      	ldr	r3, [pc, #16]	; (8008c78 <eepromInit+0x48>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000048 	.word	0x20000048
 8008c78:	20000044 	.word	0x20000044

08008c7c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08a      	sub	sp, #40	; 0x28
 8008c80:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8008c82:	2306      	movs	r3, #6
 8008c84:	847b      	strh	r3, [r7, #34]	; 0x22
 8008c86:	2306      	movs	r3, #6
 8008c88:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	83fb      	strh	r3, [r7, #30]
 8008c92:	2300      	movs	r3, #0
 8008c94:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8008c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c9a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8008ca0:	4b9e      	ldr	r3, [pc, #632]	; (8008f1c <EE_Init+0x2a0>)
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8008ca6:	4b9e      	ldr	r3, [pc, #632]	; (8008f20 <EE_Init+0x2a4>)
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8008cac:	2300      	movs	r3, #0
 8008cae:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 8008cb0:	4b9a      	ldr	r3, [pc, #616]	; (8008f1c <EE_Init+0x2a0>)
 8008cb2:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8008cb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008cba:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d057      	beq.n	8008d72 <EE_Init+0xf6>
 8008cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <EE_Init+0x56>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 80f4 	beq.w	8008eb8 <EE_Init+0x23c>
 8008cd0:	e18d      	b.n	8008fee <EE_Init+0x372>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8008cd2:	8c3b      	ldrh	r3, [r7, #32]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d116      	bne.n	8008d06 <EE_Init+0x8a>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8008cd8:	4890      	ldr	r0, [pc, #576]	; (8008f1c <EE_Init+0x2a0>)
 8008cda:	f000 f9a9 	bl	8009030 <EE_VerifyPageFullyErased>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f040 818e 	bne.w	8009002 <EE_Init+0x386>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8008ce6:	f107 0214 	add.w	r2, r7, #20
 8008cea:	1d3b      	adds	r3, r7, #4
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f001 fc88 	bl	800a604 <HAL_FLASHEx_Erase>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8008cf8:	7efb      	ldrb	r3, [r7, #27]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8181 	beq.w	8009002 <EE_Init+0x386>
          {
            return flashstatus;
 8008d00:	7efb      	ldrb	r3, [r7, #27]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	e185      	b.n	8009012 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8008d06:	8c3b      	ldrh	r3, [r7, #32]
 8008d08:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d125      	bne.n	8008d5c <EE_Init+0xe0>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8008d10:	4882      	ldr	r0, [pc, #520]	; (8008f1c <EE_Init+0x2a0>)
 8008d12:	f000 f98d 	bl	8009030 <EE_VerifyPageFullyErased>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10e      	bne.n	8008d3a <EE_Init+0xbe>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8008d1c:	f107 0214 	add.w	r2, r7, #20
 8008d20:	1d3b      	adds	r3, r7, #4
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 fc6d 	bl	800a604 <HAL_FLASHEx_Erase>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8008d2e:	7efb      	ldrb	r3, [r7, #27]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <EE_Init+0xbe>
          {
            return flashstatus;
 8008d34:	7efb      	ldrb	r3, [r7, #27]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	e16b      	b.n	8009012 <EE_Init+0x396>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	4977      	ldr	r1, [pc, #476]	; (8008f20 <EE_Init+0x2a4>)
 8008d44:	2001      	movs	r0, #1
 8008d46:	f001 fb15 	bl	800a374 <HAL_FLASH_Program>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8008d4e:	7efb      	ldrb	r3, [r7, #27]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8156 	beq.w	8009002 <EE_Init+0x386>
        {
          return flashstatus;
 8008d56:	7efb      	ldrb	r3, [r7, #27]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	e15a      	b.n	8009012 <EE_Init+0x396>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8008d5c:	f000 f9d8 	bl	8009110 <EE_Format>
 8008d60:	4603      	mov	r3, r0
 8008d62:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8008d64:	7efb      	ldrb	r3, [r7, #27]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 814b 	beq.w	8009002 <EE_Init+0x386>
        {
          return flashstatus;
 8008d6c:	7efb      	ldrb	r3, [r7, #27]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	e14f      	b.n	8009012 <EE_Init+0x396>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8008d72:	8c3b      	ldrh	r3, [r7, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d163      	bne.n	8008e40 <EE_Init+0x1c4>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d7c:	e030      	b.n	8008de0 <EE_Init+0x164>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8008d7e:	4b69      	ldr	r3, [pc, #420]	; (8008f24 <EE_Init+0x2a8>)
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d86:	4968      	ldr	r1, [pc, #416]	; (8008f28 <EE_Init+0x2ac>)
 8008d88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d101      	bne.n	8008d94 <EE_Init+0x118>
          {
            x = varidx;
 8008d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d92:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8008d94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d96:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d01d      	beq.n	8008dda <EE_Init+0x15e>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8008d9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008da0:	4a61      	ldr	r2, [pc, #388]	; (8008f28 <EE_Init+0x2ac>)
 8008da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da6:	4961      	ldr	r1, [pc, #388]	; (8008f2c <EE_Init+0x2b0>)
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 f967 	bl	800907c <EE_ReadVariable>
 8008dae:	4603      	mov	r3, r0
 8008db0:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8008db2:	8bbb      	ldrh	r3, [r7, #28]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d010      	beq.n	8008dda <EE_Init+0x15e>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8008db8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dba:	4a5b      	ldr	r2, [pc, #364]	; (8008f28 <EE_Init+0x2ac>)
 8008dbc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008dc0:	4b5a      	ldr	r3, [pc, #360]	; (8008f2c <EE_Init+0x2b0>)
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f000 fa36 	bl	8009238 <EE_VerifyPageFullWriteVariable>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8008dd0:	8bfb      	ldrh	r3, [r7, #30]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <EE_Init+0x15e>
              {
                return eepromstatus;
 8008dd6:	8bfb      	ldrh	r3, [r7, #30]
 8008dd8:	e11b      	b.n	8009012 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8008dda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ddc:	3301      	adds	r3, #1
 8008dde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008de2:	2b7f      	cmp	r3, #127	; 0x7f
 8008de4:	d9cb      	bls.n	8008d7e <EE_Init+0x102>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8008de6:	f04f 0200 	mov.w	r2, #0
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	494b      	ldr	r1, [pc, #300]	; (8008f1c <EE_Init+0x2a0>)
 8008df0:	2001      	movs	r0, #1
 8008df2:	f001 fabf 	bl	800a374 <HAL_FLASH_Program>
 8008df6:	4603      	mov	r3, r0
 8008df8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8008dfa:	7efb      	ldrb	r3, [r7, #27]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <EE_Init+0x18a>
        {
          return flashstatus;
 8008e00:	7efb      	ldrb	r3, [r7, #27]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	e105      	b.n	8009012 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8008e06:	2300      	movs	r3, #0
 8008e08:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8008e0a:	4b45      	ldr	r3, [pc, #276]	; (8008f20 <EE_Init+0x2a4>)
 8008e0c:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8008e12:	4843      	ldr	r0, [pc, #268]	; (8008f20 <EE_Init+0x2a4>)
 8008e14:	f000 f90c 	bl	8009030 <EE_VerifyPageFullyErased>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 80f3 	bne.w	8009006 <EE_Init+0x38a>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8008e20:	f107 0214 	add.w	r2, r7, #20
 8008e24:	1d3b      	adds	r3, r7, #4
 8008e26:	4611      	mov	r1, r2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fbeb 	bl	800a604 <HAL_FLASHEx_Erase>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8008e32:	7efb      	ldrb	r3, [r7, #27]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80e6 	beq.w	8009006 <EE_Init+0x38a>
          {
            return flashstatus;
 8008e3a:	7efb      	ldrb	r3, [r7, #27]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	e0e8      	b.n	8009012 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8008e40:	8c3b      	ldrh	r3, [r7, #32]
 8008e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d12b      	bne.n	8008ea2 <EE_Init+0x226>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8008e4e:	4b34      	ldr	r3, [pc, #208]	; (8008f20 <EE_Init+0x2a4>)
 8008e50:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8008e52:	2301      	movs	r3, #1
 8008e54:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8008e56:	4832      	ldr	r0, [pc, #200]	; (8008f20 <EE_Init+0x2a4>)
 8008e58:	f000 f8ea 	bl	8009030 <EE_VerifyPageFullyErased>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10e      	bne.n	8008e80 <EE_Init+0x204>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8008e62:	f107 0214 	add.w	r2, r7, #20
 8008e66:	1d3b      	adds	r3, r7, #4
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 fbca 	bl	800a604 <HAL_FLASHEx_Erase>
 8008e70:	4603      	mov	r3, r0
 8008e72:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8008e74:	7efb      	ldrb	r3, [r7, #27]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <EE_Init+0x204>
          {
            return flashstatus;
 8008e7a:	7efb      	ldrb	r3, [r7, #27]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	e0c8      	b.n	8009012 <EE_Init+0x396>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	4924      	ldr	r1, [pc, #144]	; (8008f1c <EE_Init+0x2a0>)
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	f001 fa72 	bl	800a374 <HAL_FLASH_Program>
 8008e90:	4603      	mov	r3, r0
 8008e92:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8008e94:	7efb      	ldrb	r3, [r7, #27]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 80b5 	beq.w	8009006 <EE_Init+0x38a>
        {
          return flashstatus;
 8008e9c:	7efb      	ldrb	r3, [r7, #27]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	e0b7      	b.n	8009012 <EE_Init+0x396>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8008ea2:	f000 f935 	bl	8009110 <EE_Format>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8008eaa:	7efb      	ldrb	r3, [r7, #27]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80aa 	beq.w	8009006 <EE_Init+0x38a>
        {
          return flashstatus;
 8008eb2:	7efb      	ldrb	r3, [r7, #27]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	e0ac      	b.n	8009012 <EE_Init+0x396>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8008eb8:	8c3b      	ldrh	r3, [r7, #32]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10a      	bne.n	8008ed4 <EE_Init+0x258>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8008ebe:	f000 f927 	bl	8009110 <EE_Format>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8008ec6:	7efb      	ldrb	r3, [r7, #27]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 809e 	beq.w	800900a <EE_Init+0x38e>
        {
          return flashstatus;
 8008ece:	7efb      	ldrb	r3, [r7, #27]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	e09e      	b.n	8009012 <EE_Init+0x396>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8008ed4:	8c3b      	ldrh	r3, [r7, #32]
 8008ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d11b      	bne.n	8008f16 <EE_Init+0x29a>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <EE_Init+0x2a4>)
 8008ee4:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8008eea:	480d      	ldr	r0, [pc, #52]	; (8008f20 <EE_Init+0x2a4>)
 8008eec:	f000 f8a0 	bl	8009030 <EE_VerifyPageFullyErased>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f040 8089 	bne.w	800900a <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8008ef8:	f107 0214 	add.w	r2, r7, #20
 8008efc:	1d3b      	adds	r3, r7, #4
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fb7f 	bl	800a604 <HAL_FLASHEx_Erase>
 8008f06:	4603      	mov	r3, r0
 8008f08:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8008f0a:	7efb      	ldrb	r3, [r7, #27]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d07c      	beq.n	800900a <EE_Init+0x38e>
          {
            return flashstatus;
 8008f10:	7efb      	ldrb	r3, [r7, #27]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	e07d      	b.n	8009012 <EE_Init+0x396>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8008f16:	2300      	movs	r3, #0
 8008f18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008f1a:	e03a      	b.n	8008f92 <EE_Init+0x316>
 8008f1c:	08007800 	.word	0x08007800
 8008f20:	08007c00 	.word	0x08007c00
 8008f24:	08007806 	.word	0x08007806
 8008f28:	20000048 	.word	0x20000048
 8008f2c:	20000148 	.word	0x20000148
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8008f30:	4b3a      	ldr	r3, [pc, #232]	; (800901c <EE_Init+0x3a0>)
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f38:	4939      	ldr	r1, [pc, #228]	; (8009020 <EE_Init+0x3a4>)
 8008f3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d101      	bne.n	8008f46 <EE_Init+0x2ca>
          {
            x = varidx;
 8008f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f44:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8008f46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f48:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d01d      	beq.n	8008f8c <EE_Init+0x310>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8008f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f52:	4a33      	ldr	r2, [pc, #204]	; (8009020 <EE_Init+0x3a4>)
 8008f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f58:	4932      	ldr	r1, [pc, #200]	; (8009024 <EE_Init+0x3a8>)
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f88e 	bl	800907c <EE_ReadVariable>
 8008f60:	4603      	mov	r3, r0
 8008f62:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8008f64:	8bbb      	ldrh	r3, [r7, #28]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d010      	beq.n	8008f8c <EE_Init+0x310>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8008f6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f6c:	4a2c      	ldr	r2, [pc, #176]	; (8009020 <EE_Init+0x3a4>)
 8008f6e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008f72:	4b2c      	ldr	r3, [pc, #176]	; (8009024 <EE_Init+0x3a8>)
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	4619      	mov	r1, r3
 8008f78:	4610      	mov	r0, r2
 8008f7a:	f000 f95d 	bl	8009238 <EE_VerifyPageFullWriteVariable>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8008f82:	8bfb      	ldrh	r3, [r7, #30]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <EE_Init+0x310>
              {
                return eepromstatus;
 8008f88:	8bfb      	ldrh	r3, [r7, #30]
 8008f8a:	e042      	b.n	8009012 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8008f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f8e:	3301      	adds	r3, #1
 8008f90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008f92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f94:	2b7f      	cmp	r3, #127	; 0x7f
 8008f96:	d9cb      	bls.n	8008f30 <EE_Init+0x2b4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8008f98:	f04f 0200 	mov.w	r2, #0
 8008f9c:	f04f 0300 	mov.w	r3, #0
 8008fa0:	4921      	ldr	r1, [pc, #132]	; (8009028 <EE_Init+0x3ac>)
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f001 f9e6 	bl	800a374 <HAL_FLASH_Program>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8008fac:	7efb      	ldrb	r3, [r7, #27]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <EE_Init+0x33c>
        {
          return flashstatus;
 8008fb2:	7efb      	ldrb	r3, [r7, #27]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	e02c      	b.n	8009012 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8008fbc:	4b1b      	ldr	r3, [pc, #108]	; (800902c <EE_Init+0x3b0>)
 8008fbe:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8008fc4:	4819      	ldr	r0, [pc, #100]	; (800902c <EE_Init+0x3b0>)
 8008fc6:	f000 f833 	bl	8009030 <EE_VerifyPageFullyErased>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11c      	bne.n	800900a <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8008fd0:	f107 0214 	add.w	r2, r7, #20
 8008fd4:	1d3b      	adds	r3, r7, #4
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 fb13 	bl	800a604 <HAL_FLASHEx_Erase>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8008fe2:	7efb      	ldrb	r3, [r7, #27]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d010      	beq.n	800900a <EE_Init+0x38e>
          {
            return flashstatus;
 8008fe8:	7efb      	ldrb	r3, [r7, #27]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	e011      	b.n	8009012 <EE_Init+0x396>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 8008fee:	f000 f88f 	bl	8009110 <EE_Format>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8008ff6:	7efb      	ldrb	r3, [r7, #27]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d008      	beq.n	800900e <EE_Init+0x392>
      {
        return flashstatus;
 8008ffc:	7efb      	ldrb	r3, [r7, #27]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	e007      	b.n	8009012 <EE_Init+0x396>
      break;
 8009002:	bf00      	nop
 8009004:	e004      	b.n	8009010 <EE_Init+0x394>
      break;
 8009006:	bf00      	nop
 8009008:	e002      	b.n	8009010 <EE_Init+0x394>
      break;
 800900a:	bf00      	nop
 800900c:	e000      	b.n	8009010 <EE_Init+0x394>
      }
      break;
 800900e:	bf00      	nop
  }

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3728      	adds	r7, #40	; 0x28
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	08007c06 	.word	0x08007c06
 8009020:	20000048 	.word	0x20000048
 8009024:	20000148 	.word	0x20000148
 8009028:	08007c00 	.word	0x08007c00
 800902c:	08007800 	.word	0x08007800

08009030 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8009038:	2301      	movs	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 800903c:	f245 5355 	movw	r3, #21845	; 0x5555
 8009040:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8009042:	e00d      	b.n	8009060 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 800904a:	897b      	ldrh	r3, [r7, #10]
 800904c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009050:	4293      	cmp	r3, r2
 8009052:	d002      	beq.n	800905a <EE_VerifyPageFullyErased+0x2a>
    {
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]
      break;
 8009058:	e006      	b.n	8009068 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3304      	adds	r3, #4
 800905e:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a05      	ldr	r2, [pc, #20]	; (8009078 <EE_VerifyPageFullyErased+0x48>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d9ed      	bls.n	8009044 <EE_VerifyPageFullyErased+0x14>
  }
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	b29b      	uxth	r3, r3
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	08007bff 	.word	0x08007bff

0800907c <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8009088:	2300      	movs	r3, #0
 800908a:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 800908c:	f245 5355 	movw	r3, #21845	; 0x5555
 8009090:	81bb      	strh	r3, [r7, #12]
 8009092:	2301      	movs	r3, #1
 8009094:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8009096:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <EE_ReadVariable+0x8c>)
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <EE_ReadVariable+0x8c>)
 800909c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800909e:	2000      	movs	r0, #0
 80090a0:	f000 f886 	bl	80091b0 <EE_FindValidPage>
 80090a4:	4603      	mov	r3, r0
 80090a6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80090a8:	89fb      	ldrh	r3, [r7, #14]
 80090aa:	2bab      	cmp	r3, #171	; 0xab
 80090ac:	d101      	bne.n	80090b2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80090ae:	23ab      	movs	r3, #171	; 0xab
 80090b0:	e025      	b.n	80090fe <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80090b2:	89fb      	ldrh	r3, [r7, #14]
 80090b4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80090b8:	331e      	adds	r3, #30
 80090ba:	029b      	lsls	r3, r3, #10
 80090bc:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 80090be:	89fb      	ldrh	r3, [r7, #14]
 80090c0:	3301      	adds	r3, #1
 80090c2:	029a      	lsls	r2, r3, #10
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <EE_ReadVariable+0x90>)
 80090c6:	4413      	add	r3, r2
 80090c8:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 80090ca:	e012      	b.n	80090f2 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 80090d2:	89ba      	ldrh	r2, [r7, #12]
 80090d4:	88fb      	ldrh	r3, [r7, #6]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d108      	bne.n	80090ec <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3b02      	subs	r3, #2
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	82fb      	strh	r3, [r7, #22]

      break;
 80090ea:	e007      	b.n	80090fc <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3b04      	subs	r3, #4
 80090f0:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	1c9a      	adds	r2, r3, #2
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3e7      	bcc.n	80090cc <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 80090fc:	8afb      	ldrh	r3, [r7, #22]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	08007800 	.word	0x08007800
 800910c:	080077fe 	.word	0x080077fe

08009110 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800911e:	2300      	movs	r3, #0
 8009120:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 8009122:	4b21      	ldr	r3, [pc, #132]	; (80091a8 <EE_Format+0x98>)
 8009124:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 8009126:	2301      	movs	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800912a:	481f      	ldr	r0, [pc, #124]	; (80091a8 <EE_Format+0x98>)
 800912c:	f7ff ff80 	bl	8009030 <EE_VerifyPageFullyErased>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8009136:	f107 0210 	add.w	r2, r7, #16
 800913a:	463b      	mov	r3, r7
 800913c:	4611      	mov	r1, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f001 fa60 	bl	800a604 <HAL_FLASHEx_Erase>
 8009144:	4603      	mov	r3, r0
 8009146:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8009148:	7dfb      	ldrb	r3, [r7, #23]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <EE_Format+0x42>
    {
      return flashstatus;
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	e025      	b.n	800919e <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	4913      	ldr	r1, [pc, #76]	; (80091a8 <EE_Format+0x98>)
 800915c:	2001      	movs	r0, #1
 800915e:	f001 f909 	bl	800a374 <HAL_FLASH_Program>
 8009162:	4603      	mov	r3, r0
 8009164:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <EE_Format+0x60>
  {
    return flashstatus;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	e016      	b.n	800919e <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 8009170:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <EE_Format+0x9c>)
 8009172:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8009174:	480d      	ldr	r0, [pc, #52]	; (80091ac <EE_Format+0x9c>)
 8009176:	f7ff ff5b 	bl	8009030 <EE_VerifyPageFullyErased>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10d      	bne.n	800919c <EE_Format+0x8c>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8009180:	f107 0210 	add.w	r2, r7, #16
 8009184:	463b      	mov	r3, r7
 8009186:	4611      	mov	r1, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f001 fa3b 	bl	800a604 <HAL_FLASHEx_Erase>
 800918e:	4603      	mov	r3, r0
 8009190:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <EE_Format+0x8c>
    {
      return flashstatus;
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	e000      	b.n	800919e <EE_Format+0x8e>
    }
  }

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	08007800 	.word	0x08007800
 80091ac:	08007c00 	.word	0x08007c00

080091b0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 80091ba:	2306      	movs	r3, #6
 80091bc:	81fb      	strh	r3, [r7, #14]
 80091be:	2306      	movs	r3, #6
 80091c0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80091c2:	4b1b      	ldr	r3, [pc, #108]	; (8009230 <EE_FindValidPage+0x80>)
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80091c8:	4b1a      	ldr	r3, [pc, #104]	; (8009234 <EE_FindValidPage+0x84>)
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d01b      	beq.n	800920c <EE_FindValidPage+0x5c>
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d125      	bne.n	8009224 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 80091d8:	89bb      	ldrh	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d108      	bne.n	80091f0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 80091de:	89fb      	ldrh	r3, [r7, #14]
 80091e0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d101      	bne.n	80091ec <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80091e8:	2300      	movs	r3, #0
 80091ea:	e01c      	b.n	8009226 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	e01a      	b.n	8009226 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 80091f0:	89fb      	ldrh	r3, [r7, #14]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d108      	bne.n	8009208 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 80091f6:	89bb      	ldrh	r3, [r7, #12]
 80091f8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d101      	bne.n	8009204 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8009200:	2340      	movs	r3, #64	; 0x40
 8009202:	e010      	b.n	8009226 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8009204:	2300      	movs	r3, #0
 8009206:	e00e      	b.n	8009226 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8009208:	23ab      	movs	r3, #171	; 0xab
 800920a:	e00c      	b.n	8009226 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8009212:	2300      	movs	r3, #0
 8009214:	e007      	b.n	8009226 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8009216:	89bb      	ldrh	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	e002      	b.n	8009226 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8009220:	23ab      	movs	r3, #171	; 0xab
 8009222:	e000      	b.n	8009226 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8009224:	2300      	movs	r3, #0
  }
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr
 8009230:	08007800 	.word	0x08007800
 8009234:	08007c00 	.word	0x08007c00

08009238 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	460a      	mov	r2, r1
 8009242:	80fb      	strh	r3, [r7, #6]
 8009244:	4613      	mov	r3, r2
 8009246:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 800924c:	2300      	movs	r3, #0
 800924e:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <EE_VerifyPageFullWriteVariable+0xb0>)
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	4b25      	ldr	r3, [pc, #148]	; (80092ec <EE_VerifyPageFullWriteVariable+0xb4>)
 8009256:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8009258:	2001      	movs	r0, #1
 800925a:	f7ff ffa9 	bl	80091b0 <EE_FindValidPage>
 800925e:	4603      	mov	r3, r0
 8009260:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8009262:	8a3b      	ldrh	r3, [r7, #16]
 8009264:	2bab      	cmp	r3, #171	; 0xab
 8009266:	d101      	bne.n	800926c <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8009268:	23ab      	movs	r3, #171	; 0xab
 800926a:	e039      	b.n	80092e0 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800926c:	8a3b      	ldrh	r3, [r7, #16]
 800926e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8009272:	331e      	adds	r3, #30
 8009274:	029b      	lsls	r3, r3, #10
 8009276:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8009278:	8a3b      	ldrh	r3, [r7, #16]
 800927a:	3301      	adds	r3, #1
 800927c:	029a      	lsls	r2, r3, #10
 800927e:	4b1c      	ldr	r3, [pc, #112]	; (80092f0 <EE_VerifyPageFullWriteVariable+0xb8>)
 8009280:	4413      	add	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8009284:	e027      	b.n	80092d6 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928e:	d11f      	bne.n	80092d0 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 8009290:	88bb      	ldrh	r3, [r7, #4]
 8009292:	f04f 0400 	mov.w	r4, #0
 8009296:	461a      	mov	r2, r3
 8009298:	4623      	mov	r3, r4
 800929a:	6979      	ldr	r1, [r7, #20]
 800929c:	2001      	movs	r0, #1
 800929e:	f001 f869 	bl	800a374 <HAL_FLASH_Program>
 80092a2:	4603      	mov	r3, r0
 80092a4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80092a6:	7cfb      	ldrb	r3, [r7, #19]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return flashstatus;
 80092ac:	7cfb      	ldrb	r3, [r7, #19]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	e016      	b.n	80092e0 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	1c99      	adds	r1, r3, #2
 80092b6:	88fb      	ldrh	r3, [r7, #6]
 80092b8:	f04f 0400 	mov.w	r4, #0
 80092bc:	461a      	mov	r2, r3
 80092be:	4623      	mov	r3, r4
 80092c0:	2001      	movs	r0, #1
 80092c2:	f001 f857 	bl	800a374 <HAL_FLASH_Program>
 80092c6:	4603      	mov	r3, r0
 80092c8:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 80092ca:	7cfb      	ldrb	r3, [r7, #19]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	e007      	b.n	80092e0 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	3304      	adds	r3, #4
 80092d4:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d3d3      	bcc.n	8009286 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }
  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80092de:	2380      	movs	r3, #128	; 0x80
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	371c      	adds	r7, #28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd90      	pop	{r4, r7, pc}
 80092e8:	08007800 	.word	0x08007800
 80092ec:	08007c00 	.word	0x08007c00
 80092f0:	080077ff 	.word	0x080077ff

080092f4 <flashInit>:
static int32_t getPage(uint32_t Address);



void flashInit(void)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
  uint32_t i;


  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 80092fa:	2300      	movs	r3, #0
 80092fc:	607b      	str	r3, [r7, #4]
 80092fe:	e011      	b.n	8009324 <flashInit+0x30>
  {
    flash_tbl[i].address = 0x08000000 + ( i * FLASH_PAGE_SIZE ); // Main memory Flash module start at 0x08000000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8009306:	029a      	lsls	r2, r3, #10
 8009308:	490a      	ldr	r1, [pc, #40]	; (8009334 <flashInit+0x40>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    flash_tbl[i].length  = FLASH_PAGE_SIZE;                      // 0x400U = 1024 -> 1Kbyte = Page Size.
 8009310:	4a08      	ldr	r2, [pc, #32]	; (8009334 <flashInit+0x40>)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	4413      	add	r3, r2
 8009318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800931c:	605a      	str	r2, [r3, #4]
  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3301      	adds	r3, #1
 8009322:	607b      	str	r3, [r7, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b7f      	cmp	r3, #127	; 0x7f
 8009328:	d9ea      	bls.n	8009300 <flashInit+0xc>
  }
}
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr
 8009334:	20001220 	.word	0x20001220

08009338 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800933e:	2301      	movs	r3, #1
 8009340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8009342:	2301      	movs	r3, #1
 8009344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009346:	2303      	movs	r3, #3
 8009348:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 800934a:	2320      	movs	r3, #32
 800934c:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800934e:	463b      	mov	r3, r7
 8009350:	4619      	mov	r1, r3
 8009352:	4803      	ldr	r0, [pc, #12]	; (8009360 <ledInit+0x28>)
 8009354:	f001 f9fe 	bl	800a754 <HAL_GPIO_Init>
}
 8009358:	bf00      	nop
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40010800 	.word	0x40010800

08009364 <ledOn>:

void ledOn(uint8_t ch)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800936e:	2201      	movs	r2, #1
 8009370:	2120      	movs	r1, #32
 8009372:	4803      	ldr	r0, [pc, #12]	; (8009380 <ledOn+0x1c>)
 8009374:	f001 fc1b 	bl	800abae <HAL_GPIO_WritePin>
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	40010800 	.word	0x40010800

08009384 <ledOff>:

void ledOff(uint8_t ch)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800938e:	2200      	movs	r2, #0
 8009390:	2120      	movs	r1, #32
 8009392:	4803      	ldr	r0, [pc, #12]	; (80093a0 <ledOff+0x1c>)
 8009394:	f001 fc0b 	bl	800abae <HAL_GPIO_WritePin>
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	40010800 	.word	0x40010800

080093a4 <swtimerInit>:

static volatile uint32_t sw_timer_counter      = 0;     // SW Timer Counter
static volatile uint16_t sw_timer_handle_index = 0;
static swtimer_t swtimer_tbl[_HW_DEF_SW_TIMER_MAX];

bool swtimerInit(void){
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t execute = 0;

  if(execute == 1){  // if you have already run it,
 80093aa:	4b1f      	ldr	r3, [pc, #124]	; (8009428 <swtimerInit+0x84>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <swtimerInit+0x12>
    return false;    // return false.
 80093b2:	2300      	movs	r3, #0
 80093b4:	e033      	b.n	800941e <swtimerInit+0x7a>
  }

  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 80093b6:	2300      	movs	r3, #0
 80093b8:	71fb      	strb	r3, [r7, #7]
 80093ba:	e029      	b.n	8009410 <swtimerInit+0x6c>
    swtimer_tbl[i].Timer_En = OFF;
 80093bc:	79fa      	ldrb	r2, [r7, #7]
 80093be:	491b      	ldr	r1, [pc, #108]	; (800942c <swtimerInit+0x88>)
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	2200      	movs	r2, #0
 80093cc:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn = 0;
 80093ce:	79fa      	ldrb	r2, [r7, #7]
 80093d0:	4916      	ldr	r1, [pc, #88]	; (800942c <swtimerInit+0x88>)
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	3304      	adds	r3, #4
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 80093e2:	79fa      	ldrb	r2, [r7, #7]
 80093e4:	4911      	ldr	r1, [pc, #68]	; (800942c <swtimerInit+0x88>)
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	440b      	add	r3, r1
 80093f0:	3308      	adds	r3, #8
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct = NULL;
 80093f6:	79fa      	ldrb	r2, [r7, #7]
 80093f8:	490c      	ldr	r1, [pc, #48]	; (800942c <swtimerInit+0x88>)
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	330c      	adds	r3, #12
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	3301      	adds	r3, #1
 800940e:	71fb      	strb	r3, [r7, #7]
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	2b07      	cmp	r3, #7
 8009414:	d9d2      	bls.n	80093bc <swtimerInit+0x18>
  }

  execute = 1;
 8009416:	4b04      	ldr	r3, [pc, #16]	; (8009428 <swtimerInit+0x84>)
 8009418:	2201      	movs	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]
  return true;
 800941c:	2301      	movs	r3, #1
}
 800941e:	4618      	mov	r0, r3
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr
 8009428:	200001f4 	.word	0x200001f4
 800942c:	20000154 	.word	0x20000154

08009430 <swtimerISR>:


void swtimerISR(void){    // = Software Timer Interrupt Service Request = SW Timer Interrupt Handler
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
  uint8_t i;
  sw_timer_counter++;     // count up
 8009436:	4b3d      	ldr	r3, [pc, #244]	; (800952c <swtimerISR+0xfc>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	4a3b      	ldr	r2, [pc, #236]	; (800952c <swtimerISR+0xfc>)
 800943e:	6013      	str	r3, [r2, #0]

  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 8009440:	2300      	movs	r3, #0
 8009442:	71fb      	strb	r3, [r7, #7]
 8009444:	e063      	b.n	800950e <swtimerISR+0xde>
    if( swtimer_tbl[i].Timer_En == ON ){                               // If the Timer is enable
 8009446:	79fa      	ldrb	r2, [r7, #7]
 8009448:	4939      	ldr	r1, [pc, #228]	; (8009530 <swtimerISR+0x100>)
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d156      	bne.n	8009508 <swtimerISR+0xd8>
      swtimer_tbl[i].Timer_Ctn--;                                      // Decount the Timer counter
 800945a:	79fa      	ldrb	r2, [r7, #7]
 800945c:	4934      	ldr	r1, [pc, #208]	; (8009530 <swtimerISR+0x100>)
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	3304      	adds	r3, #4
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	1e59      	subs	r1, r3, #1
 800946e:	4830      	ldr	r0, [pc, #192]	; (8009530 <swtimerISR+0x100>)
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4403      	add	r3, r0
 800947a:	3304      	adds	r3, #4
 800947c:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Ctn == 0){                               // If the overflow happens ( because of the short of the timer )
 800947e:	79fa      	ldrb	r2, [r7, #7]
 8009480:	492b      	ldr	r1, [pc, #172]	; (8009530 <swtimerISR+0x100>)
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	3304      	adds	r3, #4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d139      	bne.n	8009508 <swtimerISR+0xd8>
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME){                     // If the Mode is ONE TIME
 8009494:	79fa      	ldrb	r2, [r7, #7]
 8009496:	4926      	ldr	r1, [pc, #152]	; (8009530 <swtimerISR+0x100>)
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	3301      	adds	r3, #1
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d108      	bne.n	80094bc <swtimerISR+0x8c>
          swtimer_tbl[i].Timer_En = OFF;                               // Timer is Unable
 80094aa:	79fa      	ldrb	r2, [r7, #7]
 80094ac:	4920      	ldr	r1, [pc, #128]	; (8009530 <swtimerISR+0x100>)
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	2200      	movs	r2, #0
 80094ba:	701a      	strb	r2, [r3, #0]
        }
        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;          // Initialize the Timer
 80094bc:	79fa      	ldrb	r2, [r7, #7]
 80094be:	79f9      	ldrb	r1, [r7, #7]
 80094c0:	481b      	ldr	r0, [pc, #108]	; (8009530 <swtimerISR+0x100>)
 80094c2:	460b      	mov	r3, r1
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4403      	add	r3, r0
 80094cc:	3308      	adds	r3, #8
 80094ce:	6819      	ldr	r1, [r3, #0]
 80094d0:	4817      	ldr	r0, [pc, #92]	; (8009530 <swtimerISR+0x100>)
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4403      	add	r3, r0
 80094dc:	3304      	adds	r3, #4
 80094de:	6019      	str	r1, [r3, #0]
        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);          // Run the Timer function
 80094e0:	79fa      	ldrb	r2, [r7, #7]
 80094e2:	4913      	ldr	r1, [pc, #76]	; (8009530 <swtimerISR+0x100>)
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	330c      	adds	r3, #12
 80094f0:	6819      	ldr	r1, [r3, #0]
 80094f2:	79fa      	ldrb	r2, [r7, #7]
 80094f4:	480e      	ldr	r0, [pc, #56]	; (8009530 <swtimerISR+0x100>)
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4403      	add	r3, r0
 8009500:	3310      	adds	r3, #16
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	4788      	blx	r1
  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	3301      	adds	r3, #1
 800950c:	71fb      	strb	r3, [r7, #7]
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b07      	cmp	r3, #7
 8009512:	d806      	bhi.n	8009522 <swtimerISR+0xf2>
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	b29a      	uxth	r2, r3
 8009518:	4b06      	ldr	r3, [pc, #24]	; (8009534 <swtimerISR+0x104>)
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	429a      	cmp	r2, r3
 8009520:	d391      	bcc.n	8009446 <swtimerISR+0x16>
      }
    }
  }
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	2000014c 	.word	0x2000014c
 8009530:	20000154 	.word	0x20000154
 8009534:	20000150 	.word	0x20000150

08009538 <swtimerSet>:


void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *), void *arg){
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607b      	str	r3, [r7, #4]
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
 8009546:	4613      	mov	r3, r2
 8009548:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;
 800954a:	7bfa      	ldrb	r2, [r7, #15]
 800954c:	491a      	ldr	r1, [pc, #104]	; (80095b8 <swtimerSet+0x80>)
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	3301      	adds	r3, #1
 800955a:	7bba      	ldrb	r2, [r7, #14]
 800955c:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;
 800955e:	7bfa      	ldrb	r2, [r7, #15]
 8009560:	4915      	ldr	r1, [pc, #84]	; (80095b8 <swtimerSet+0x80>)
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	330c      	adds	r3, #12
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;
 8009572:	7bfa      	ldrb	r2, [r7, #15]
 8009574:	4910      	ldr	r1, [pc, #64]	; (80095b8 <swtimerSet+0x80>)
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	3310      	adds	r3, #16
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 8009586:	7bfa      	ldrb	r2, [r7, #15]
 8009588:	490b      	ldr	r1, [pc, #44]	; (80095b8 <swtimerSet+0x80>)
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	440b      	add	r3, r1
 8009594:	3304      	adds	r3, #4
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 800959a:	7bfa      	ldrb	r2, [r7, #15]
 800959c:	4906      	ldr	r1, [pc, #24]	; (80095b8 <swtimerSet+0x80>)
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	3308      	adds	r3, #8
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	601a      	str	r2, [r3, #0]
}
 80095ae:	bf00      	nop
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bc80      	pop	{r7}
 80095b6:	4770      	bx	lr
 80095b8:	20000154 	.word	0x20000154

080095bc <swtimerStart>:



void swtimerStart(uint8_t TmrNum){
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
  if(TmrNum < _HW_DEF_SW_TIMER_MAX){
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	2b07      	cmp	r3, #7
 80095ca:	d81a      	bhi.n	8009602 <swtimerStart+0x46>
    swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 80095cc:	79fa      	ldrb	r2, [r7, #7]
 80095ce:	79f9      	ldrb	r1, [r7, #7]
 80095d0:	480e      	ldr	r0, [pc, #56]	; (800960c <swtimerStart+0x50>)
 80095d2:	460b      	mov	r3, r1
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4403      	add	r3, r0
 80095dc:	3308      	adds	r3, #8
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	480a      	ldr	r0, [pc, #40]	; (800960c <swtimerStart+0x50>)
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4403      	add	r3, r0
 80095ec:	3304      	adds	r3, #4
 80095ee:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En  = ON;
 80095f0:	79fa      	ldrb	r2, [r7, #7]
 80095f2:	4906      	ldr	r1, [pc, #24]	; (800960c <swtimerStart+0x50>)
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	2201      	movs	r2, #1
 8009600:	701a      	strb	r2, [r3, #0]
  }
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr
 800960c:	20000154 	.word	0x20000154

08009610 <swtimerGetHandle>:
void swtimerReset(uint8_t TmrNum){
  swtimer_tbl[TmrNum].Timer_En  = OFF;
  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void){
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 8009616:	4b09      	ldr	r3, [pc, #36]	; (800963c <swtimerGetHandle+0x2c>)
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	80fb      	strh	r3, [r7, #6]
  sw_timer_handle_index++;
 800961e:	4b07      	ldr	r3, [pc, #28]	; (800963c <swtimerGetHandle+0x2c>)
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	b29b      	uxth	r3, r3
 8009624:	3301      	adds	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	4b04      	ldr	r3, [pc, #16]	; (800963c <swtimerGetHandle+0x2c>)
 800962a:	801a      	strh	r2, [r3, #0]
  return TmrIndex;
 800962c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000150 	.word	0x20000150

08009640 <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8009646:	2300      	movs	r3, #0
 8009648:	71fb      	strb	r3, [r7, #7]
 800964a:	e01f      	b.n	800968c <uartInit+0x4c>
  {
    uart_tbl[i].is_open = false;
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	4a13      	ldr	r2, [pc, #76]	; (800969c <uartInit+0x5c>)
 8009650:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	4413      	add	r3, r2
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	4a0e      	ldr	r2, [pc, #56]	; (800969c <uartInit+0x5c>)
 8009662:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8009666:	fb01 f303 	mul.w	r3, r1, r3
 800966a:	4413      	add	r3, r2
 800966c:	3309      	adds	r3, #9
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	4a09      	ldr	r2, [pc, #36]	; (800969c <uartInit+0x5c>)
 8009676:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800967a:	fb01 f303 	mul.w	r3, r1, r3
 800967e:	4413      	add	r3, r2
 8009680:	3308      	adds	r3, #8
 8009682:	2200      	movs	r2, #0
 8009684:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	3301      	adds	r3, #1
 800968a:	71fb      	strb	r3, [r7, #7]
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d9dc      	bls.n	800964c <uartInit+0xc>
  }
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr
 800969c:	20001620 	.word	0x20001620

080096a0 <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 80096ac:	2301      	movs	r3, #1
 80096ae:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;
  switch(channel){
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <uartOpen+0x1c>
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d054      	beq.n	8009764 <uartOpen+0xc4>
 80096ba:	e076      	b.n	80097aa <uartOpen+0x10a>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
 80096c6:	4a3b      	ldr	r2, [pc, #236]	; (80097b4 <uartOpen+0x114>)
 80096c8:	4413      	add	r3, r2
 80096ca:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4a3a      	ldr	r2, [pc, #232]	; (80097b8 <uartOpen+0x118>)
 80096d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
      p_uart->handle.Init.BaudRate   = baud;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	220c      	movs	r2, #12
 8009700:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

      p_uart->rx_mode = UART_MODE_DMA;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2202      	movs	r2, #2
 8009708:	725a      	strb	r2, [r3, #9]
      //p_uart->rx_mode = UART_MODE_INTERRUPT;

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009710:	4618      	mov	r0, r3
 8009712:	f001 fece 	bl	800b4b2 <HAL_UART_DeInit>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <uartOpen+0x82>
        ret = false;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
        break;
 8009720:	e043      	b.n	80097aa <uartOpen+0x10a>
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009728:	4618      	mov	r0, r3
 800972a:	f001 fe75 	bl	800b418 <HAL_UART_Init>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <uartOpen+0x9a>
        ret = false;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]
        break;
 8009738:	e037      	b.n	80097aa <uartOpen+0x10a>
      }
      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	330a      	adds	r3, #10
 8009744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009748:	4619      	mov	r1, r3
 800974a:	f7ff f87d 	bl	8008848 <qbufferCreate>

     // p_uart->rx_mode = UART_MODE_INTERRUPT;
      p_uart->baud    = baud;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2201      	movs	r2, #1
 8009758:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f82d 	bl	80097bc <uartStartRx>
      break;
 8009762:	e022      	b.n	80097aa <uartOpen+0x10a>

    case _DEF_UART2 :
      p_uart = &uart_tbl[channel];
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800976a:	fb02 f303 	mul.w	r3, r2, r3
 800976e:	4a11      	ldr	r2, [pc, #68]	; (80097b4 <uartOpen+0x114>)
 8009770:	4413      	add	r3, r2
 8009772:	60bb      	str	r3, [r7, #8]
      p_uart->baud = baud;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2201      	movs	r2, #1
 800977e:	701a      	strb	r2, [r3, #0]
      p_uart->rx_mode = UART_MODE_LOOPBACK;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2204      	movs	r2, #4
 8009784:	725a      	strb	r2, [r3, #9]
      p_uart->tx_mode = UART_MODE_LOOPBACK;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2204      	movs	r2, #4
 800978a:	721a      	strb	r2, [r3, #8]

      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	330a      	adds	r3, #10
 8009796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800979a:	4619      	mov	r1, r3
 800979c:	f7ff f854 	bl	8008848 <qbufferCreate>
      uartStartRx(channel);
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f80a 	bl	80097bc <uartStartRx>
      break;
 80097a8:	bf00      	nop
  }
  return ret;
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20001620 	.word	0x20001620
 80097b8:	40004400 	.word	0x40004400

080097bc <uartStartRx>:

void uartStartRx(uint8_t channel){
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel to uart.
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80097cc:	fb02 f303 	mul.w	r3, r2, r3
 80097d0:	4a12      	ldr	r2, [pc, #72]	; (800981c <uartStartRx+0x60>)
 80097d2:	4413      	add	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	7a5b      	ldrb	r3, [r3, #9]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d108      	bne.n	80097f0 <uartStartRx+0x34>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	330a      	adds	r3, #10
 80097e8:	2201      	movs	r2, #1
 80097ea:	4619      	mov	r1, r3
 80097ec:	f001 ff25 	bl	800b63a <HAL_UART_Receive_IT>
  }

  if (p_uart->rx_mode == UART_MODE_DMA)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	7a5b      	ldrb	r3, [r3, #9]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d10c      	bne.n	8009812 <uartStartRx+0x56>
    {
      HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800980a:	b29b      	uxth	r3, r3
 800980c:	461a      	mov	r2, r3
 800980e:	f001 ff69 	bl	800b6e4 <HAL_UART_Receive_DMA>
    }
}
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20001620 	.word	0x20001620

08009820 <uartAvailable>:
    }
  }
  return ret;
}

uint32_t uartAvailable(uint8_t channel){
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;
  uart_t *p_uart = &uart_tbl[channel];
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	4a24      	ldr	r2, [pc, #144]	; (80098c8 <uartAvailable+0xa8>)
 8009836:	4413      	add	r3, r2
 8009838:	60bb      	str	r3, [r7, #8]

  if(channel >= UART_MAX_CH)
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d901      	bls.n	8009844 <uartAvailable+0x24>
    return 0;
 8009840:	2300      	movs	r3, #0
 8009842:	e03c      	b.n	80098be <uartAvailable+0x9e>

  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7a5b      	ldrb	r3, [r3, #9]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d10e      	bne.n	800986a <uartAvailable+0x4a>
  {
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009852:	fb02 f303 	mul.w	r3, r2, r3
 8009856:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800985a:	4a1b      	ldr	r2, [pc, #108]	; (80098c8 <uartAvailable+0xa8>)
 800985c:	4413      	add	r3, r2
 800985e:	3304      	adds	r3, #4
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff f896 	bl	8008992 <qbufferAvailable>
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	e028      	b.n	80098bc <uartAvailable+0x9c>
  }
  else if (p_uart->rx_mode == UART_MODE_DMA)
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	7a5b      	ldrb	r3, [r3, #9]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d112      	bne.n	8009898 <uartAvailable+0x78>
  {
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma_rx.Instance->CNDTR;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	1ad2      	subs	r2, r2, r3
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff f87f 	bl	8008992 <qbufferAvailable>
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	e011      	b.n	80098bc <uartAvailable+0x9c>

  }
  else if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	7a5b      	ldrb	r3, [r3, #9]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d10d      	bne.n	80098bc <uartAvailable+0x9c>
  {
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80098a6:	fb02 f303 	mul.w	r3, r2, r3
 80098aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80098ae:	4a06      	ldr	r2, [pc, #24]	; (80098c8 <uartAvailable+0xa8>)
 80098b0:	4413      	add	r3, r2
 80098b2:	3304      	adds	r3, #4
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff f86c 	bl	8008992 <qbufferAvailable>
 80098ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80098bc:	68fb      	ldr	r3, [r7, #12]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20001620 	.word	0x20001620

080098cc <uartFlush>:

void uartFlush(uint8_t channel){
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	71fb      	strb	r3, [r7, #7]
  if (uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	4a38      	ldr	r2, [pc, #224]	; (80099bc <uartFlush+0xf0>)
 80098da:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	3309      	adds	r3, #9
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d10c      	bne.n	8009906 <uartFlush+0x3a>
  {
      qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80098f2:	fb02 f303 	mul.w	r3, r2, r3
 80098f6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80098fa:	4a30      	ldr	r2, [pc, #192]	; (80099bc <uartFlush+0xf0>)
 80098fc:	4413      	add	r3, r2
 80098fe:	3304      	adds	r3, #4
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff f860 	bl	80089c6 <qbufferFlush>
  }
  if (uart_tbl[channel].rx_mode == UART_MODE_DMA)
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	4a2c      	ldr	r2, [pc, #176]	; (80099bc <uartFlush+0xf0>)
 800990a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800990e:	fb01 f303 	mul.w	r3, r1, r3
 8009912:	4413      	add	r3, r2
 8009914:	3309      	adds	r3, #9
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d133      	bne.n	8009984 <uartFlush+0xb8>
  {
      uart_tbl[channel].qbuffer_rx.ptr_in  = uart_tbl[channel].qbuffer_rx.length - uart_tbl[channel].hdma_rx.Instance->CNDTR;
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	79fa      	ldrb	r2, [r7, #7]
 8009920:	4926      	ldr	r1, [pc, #152]	; (80099bc <uartFlush+0xf0>)
 8009922:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8009926:	fb00 f202 	mul.w	r2, r0, r2
 800992a:	440a      	add	r2, r1
 800992c:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8009930:	6811      	ldr	r1, [r2, #0]
 8009932:	79fa      	ldrb	r2, [r7, #7]
 8009934:	4821      	ldr	r0, [pc, #132]	; (80099bc <uartFlush+0xf0>)
 8009936:	f44f 74d0 	mov.w	r4, #416	; 0x1a0
 800993a:	fb04 f202 	mul.w	r2, r4, r2
 800993e:	4402      	add	r2, r0
 8009940:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8009944:	6812      	ldr	r2, [r2, #0]
 8009946:	6852      	ldr	r2, [r2, #4]
 8009948:	1a8a      	subs	r2, r1, r2
 800994a:	491c      	ldr	r1, [pc, #112]	; (80099bc <uartFlush+0xf0>)
 800994c:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8009950:	fb00 f303 	mul.w	r3, r0, r3
 8009954:	440b      	add	r3, r1
 8009956:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800995a:	601a      	str	r2, [r3, #0]
      uart_tbl[channel].qbuffer_rx.ptr_out = uart_tbl[channel].qbuffer_rx.ptr_in;
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	79fa      	ldrb	r2, [r7, #7]
 8009960:	4916      	ldr	r1, [pc, #88]	; (80099bc <uartFlush+0xf0>)
 8009962:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8009966:	fb00 f202 	mul.w	r2, r0, r2
 800996a:	440a      	add	r2, r1
 800996c:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8009970:	6812      	ldr	r2, [r2, #0]
 8009972:	4912      	ldr	r1, [pc, #72]	; (80099bc <uartFlush+0xf0>)
 8009974:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8009978:	fb00 f303 	mul.w	r3, r0, r3
 800997c:	440b      	add	r3, r1
 800997e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009982:	601a      	str	r2, [r3, #0]
  }
  if (uart_tbl[channel].rx_mode == UART_MODE_LOOPBACK)
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	4a0d      	ldr	r2, [pc, #52]	; (80099bc <uartFlush+0xf0>)
 8009988:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800998c:	fb01 f303 	mul.w	r3, r1, r3
 8009990:	4413      	add	r3, r2
 8009992:	3309      	adds	r3, #9
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b04      	cmp	r3, #4
 8009998:	d10c      	bne.n	80099b4 <uartFlush+0xe8>
  {
      qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80099a0:	fb02 f303 	mul.w	r3, r2, r3
 80099a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80099a8:	4a04      	ldr	r2, [pc, #16]	; (80099bc <uartFlush+0xf0>)
 80099aa:	4413      	add	r3, r2
 80099ac:	3304      	adds	r3, #4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f809 	bl	80089c6 <qbufferFlush>
  }
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd90      	pop	{r4, r7, pc}
 80099bc:	20001620 	.word	0x20001620

080099c0 <uartPutch>:


void uartPutch(uint8_t channel, uint8_t ch){
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	460a      	mov	r2, r1
 80099ca:	71fb      	strb	r3, [r7, #7]
 80099cc:	4613      	mov	r3, r2
 80099ce:	71bb      	strb	r3, [r7, #6]
  uartWrite(channel, &ch, 1);
 80099d0:	1db9      	adds	r1, r7, #6
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	2201      	movs	r2, #1
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 f804 	bl	80099e4 <uartWrite>
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <uartWrite>:
  }
  return ret;
}


int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length){
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
  uart_t *p_uart = &uart_tbl[channel];
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80099fc:	fb02 f303 	mul.w	r3, r2, r3
 8009a00:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <uartWrite+0x74>)
 8009a02:	4413      	add	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]
  /*if(p_uart->x_mode == UART_MODE_INTERRUPT){
    if( HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK ){
      ret = length;
    }
  }*/
  if (p_uart->tx_mode == UART_MODE_POLLING)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	7a1b      	ldrb	r3, [r3, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10e      	bne.n	8009a2c <uartWrite+0x48>
    {
      if (HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	f001 fd74 	bl	800b50a <HAL_UART_Transmit>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <uartWrite+0x48>
      {
        ret = length;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	617b      	str	r3, [r7, #20]
      }
    }

  if (p_uart->tx_mode == UART_MODE_LOOPBACK)
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	7a1b      	ldrb	r3, [r3, #8]
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d10c      	bne.n	8009a4e <uartWrite+0x6a>
  {
    if (qbufferWrite(&p_uart->qbuffer_rx, p_data, length) == true)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe ff25 	bl	800888e <qbufferWrite>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <uartWrite+0x6a>
    {
      ret = length;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8009a4e:	697b      	ldr	r3, [r7, #20]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20001620 	.word	0x20001620

08009a5c <uartRead>:

uint8_t uartRead(uint8_t channel){
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	72fb      	strb	r3, [r7, #11]
  uart_t *p_uart = &uart_tbl[channel];
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009a70:	fb02 f303 	mul.w	r3, r2, r3
 8009a74:	4a17      	ldr	r2, [pc, #92]	; (8009ad4 <uartRead+0x78>)
 8009a76:	4413      	add	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]

  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	7a5b      	ldrb	r3, [r3, #9]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d108      	bne.n	8009a94 <uartRead+0x38>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009a88:	f107 010b 	add.w	r1, r7, #11
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe ff3e 	bl	8008910 <qbufferRead>
  }
  if (p_uart->rx_mode == UART_MODE_DMA)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	7a5b      	ldrb	r3, [r3, #9]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d108      	bne.n	8009aae <uartRead+0x52>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009aa2:	f107 010b 	add.w	r1, r7, #11
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe ff31 	bl	8008910 <qbufferRead>
  }
  if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	7a5b      	ldrb	r3, [r3, #9]
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d108      	bne.n	8009ac8 <uartRead+0x6c>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009abc:	f107 010b 	add.w	r1, r7, #11
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe ff24 	bl	8008910 <qbufferRead>
  }
  return ret;
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20001620 	.word	0x20001620

08009ad8 <uartRxHandler>:

  return ret;
}

void uartRxHandler(uint8_t channel)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009ae8:	fb02 f303 	mul.w	r3, r2, r3
 8009aec:	4a0d      	ldr	r2, [pc, #52]	; (8009b24 <uartRxHandler+0x4c>)
 8009aee:	4413      	add	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	7a5b      	ldrb	r3, [r3, #9]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d110      	bne.n	8009b1c <uartRxHandler+0x44>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	330a      	adds	r3, #10
 8009b04:	2201      	movs	r2, #1
 8009b06:	4619      	mov	r1, r3
 8009b08:	f7fe fec1 	bl	800888e <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
      uartStartRx(channel);
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fe50 	bl	80097bc <uartStartRx>
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	20001620 	.word	0x20001620

08009b28 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fec9 	bl	80098cc <uartFlush>
  uartStartRx(channel);
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7ff fe3d 	bl	80097bc <uartStartRx>
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <HAL_UART_RxCpltCallback+0x20>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d102      	bne.n	8009b64 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 8009b5e:	2000      	movs	r0, #0
 8009b60:	f7ff ffba 	bl	8009ad8 <uartRxHandler>
  }
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	40004400 	.word	0x40004400

08009b70 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 fc9a 	bl	800b4b2 <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 fc4a 	bl	800b418 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a04      	ldr	r2, [pc, #16]	; (8009b9c <HAL_UART_ErrorCallback+0x2c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d102      	bne.n	8009b94 <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f7ff ffca 	bl	8009b28 <uartErrHandler>
  }
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	40004400 	.word	0x40004400

08009ba0 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 8009ba4:	4802      	ldr	r0, [pc, #8]	; (8009bb0 <USART2_IRQHandler+0x10>)
 8009ba6:	f001 fe1d 	bl	800b7e4 <HAL_UART_IRQHandler>
}
 8009baa:	bf00      	nop
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20001780 	.word	0x20001780

08009bb4 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08a      	sub	sp, #40	; 0x28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a41      	ldr	r2, [pc, #260]	; (8009cc8 <HAL_UART_MspInit+0x114>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d17c      	bne.n	8009cc0 <HAL_UART_MspInit+0x10c>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bc6:	4a41      	ldr	r2, [pc, #260]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009bc8:	4b40      	ldr	r3, [pc, #256]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	f043 0304 	orr.w	r3, r3, #4
 8009bd0:	6193      	str	r3, [r2, #24]
 8009bd2:	4b3e      	ldr	r3, [pc, #248]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	693b      	ldr	r3, [r7, #16]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009bde:	4a3b      	ldr	r2, [pc, #236]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009be0:	4b3a      	ldr	r3, [pc, #232]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be8:	61d3      	str	r3, [r2, #28]
 8009bea:	4b38      	ldr	r3, [pc, #224]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8009bf6:	2304      	movs	r3, #4
 8009bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009c02:	2303      	movs	r3, #3
 8009c04:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c06:	f107 0314 	add.w	r3, r7, #20
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4830      	ldr	r0, [pc, #192]	; (8009cd0 <HAL_UART_MspInit+0x11c>)
 8009c0e:	f000 fda1 	bl	800a754 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8009c12:	2308      	movs	r3, #8
 8009c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c1a:	f107 0314 	add.w	r3, r7, #20
 8009c1e:	4619      	mov	r1, r3
 8009c20:	482b      	ldr	r0, [pc, #172]	; (8009cd0 <HAL_UART_MspInit+0x11c>)
 8009c22:	f000 fd97 	bl	800a754 <HAL_GPIO_Init>

    if (uart_tbl[_DEF_UART1].rx_mode == UART_MODE_DMA)
 8009c26:	4b2b      	ldr	r3, [pc, #172]	; (8009cd4 <HAL_UART_MspInit+0x120>)
 8009c28:	7a5b      	ldrb	r3, [r3, #9]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d140      	bne.n	8009cb0 <HAL_UART_MspInit+0xfc>
    {
      uart_t *p_uart = &uart_tbl[_DEF_UART1];
 8009c2e:	4b29      	ldr	r3, [pc, #164]	; (8009cd4 <HAL_UART_MspInit+0x120>)
 8009c30:	627b      	str	r3, [r7, #36]	; 0x24


      __HAL_RCC_DMA1_CLK_ENABLE();
 8009c32:	4a26      	ldr	r2, [pc, #152]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009c34:	4b25      	ldr	r3, [pc, #148]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	6153      	str	r3, [r2, #20]
 8009c3e:	4b23      	ldr	r3, [pc, #140]	; (8009ccc <HAL_UART_MspInit+0x118>)
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	60bb      	str	r3, [r7, #8]
 8009c48:	68bb      	ldr	r3, [r7, #8]


      /* Configure the DMA handler for reception process */
      p_uart->hdma_rx.Instance                 = DMA1_Channel6;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	4a22      	ldr	r2, [pc, #136]	; (8009cd8 <HAL_UART_MspInit+0x124>)
 8009c4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      p_uart->hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
      p_uart->hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
      p_uart->hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	2280      	movs	r2, #128	; 0x80
 8009c66:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
      p_uart->hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      p_uart->hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
      p_uart->hdma_rx.Init.Mode                = DMA_CIRCULAR;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      p_uart->hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009c88:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138


      HAL_DMA_Init(&p_uart->hdma_rx);
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 fa0a 	bl	800a0ac <HAL_DMA_Init>

          /* Associate the initialized DMA handle to the the UART handle */
      __HAL_LINKDMA((&p_uart->handle), hdmarx, (p_uart->hdma_rx));
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    }

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	2026      	movs	r0, #38	; 0x26
 8009cb6:	f000 f9b4 	bl	800a022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009cba:	2026      	movs	r0, #38	; 0x26
 8009cbc:	f000 f9cd 	bl	800a05a <HAL_NVIC_EnableIRQ>
  }
}
 8009cc0:	bf00      	nop
 8009cc2:	3728      	adds	r7, #40	; 0x28
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	40004400 	.word	0x40004400
 8009ccc:	40021000 	.word	0x40021000
 8009cd0:	40010800 	.word	0x40010800
 8009cd4:	20001620 	.word	0x20001620
 8009cd8:	4002006c 	.word	0x4002006c

08009cdc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a0e      	ldr	r2, [pc, #56]	; (8009d24 <HAL_UART_MspDeInit+0x48>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d116      	bne.n	8009d1c <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 8009cee:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <HAL_UART_MspDeInit+0x4c>)
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <HAL_UART_MspDeInit+0x4c>)
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cf8:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 8009cfa:	4a0b      	ldr	r2, [pc, #44]	; (8009d28 <HAL_UART_MspDeInit+0x4c>)
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <HAL_UART_MspDeInit+0x4c>)
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d04:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8009d06:	2104      	movs	r1, #4
 8009d08:	4808      	ldr	r0, [pc, #32]	; (8009d2c <HAL_UART_MspDeInit+0x50>)
 8009d0a:	f000 fe7d 	bl	800aa08 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8009d0e:	2108      	movs	r1, #8
 8009d10:	4806      	ldr	r0, [pc, #24]	; (8009d2c <HAL_UART_MspDeInit+0x50>)
 8009d12:	f000 fe79 	bl	800aa08 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8009d16:	2026      	movs	r0, #38	; 0x26
 8009d18:	f000 f9ad 	bl	800a076 <HAL_NVIC_DisableIRQ>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	40004400 	.word	0x40004400
 8009d28:	40021000 	.word	0x40021000
 8009d2c:	40010800 	.word	0x40010800

08009d30 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  bspInit();
 8009d34:	f7fe fae6 	bl	8008304 <bspInit>

  swtimerInit();
 8009d38:	f7ff fb34 	bl	80093a4 <swtimerInit>
  ledInit();
 8009d3c:	f7ff fafc 	bl	8009338 <ledInit>
  buttonInit();
 8009d40:	f7fe ff02 	bl	8008b48 <buttonInit>
  uartInit();
 8009d44:	f7ff fc7c 	bl	8009640 <uartInit>
  flashInit();
 8009d48:	f7ff fad4 	bl	80092f4 <flashInit>
  eepromInit();
 8009d4c:	f7fe ff70 	bl	8008c30 <eepromInit>
}
 8009d50:	bf00      	nop
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <millis>:
  HAL_Delay(time_ms);
}


uint32_t millis(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009d58:	f000 f862 	bl	8009e20 <HAL_GetTick>
 8009d5c:	4603      	mov	r3, r0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d68:	4a08      	ldr	r2, [pc, #32]	; (8009d8c <HAL_Init+0x28>)
 8009d6a:	4b08      	ldr	r3, [pc, #32]	; (8009d8c <HAL_Init+0x28>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f043 0310 	orr.w	r3, r3, #16
 8009d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d74:	2003      	movs	r0, #3
 8009d76:	f000 f949 	bl	800a00c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009d7a:	200f      	movs	r0, #15
 8009d7c:	f000 f80e 	bl	8009d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009d80:	f000 f806 	bl	8009d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	40022000 	.word	0x40022000

08009d90 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8009d94:	bf00      	nop
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr

08009d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009da4:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <HAL_InitTick+0x54>)
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <HAL_InitTick+0x58>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	4619      	mov	r1, r3
 8009dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 f969 	bl	800a092 <HAL_SYSTICK_Config>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e00e      	b.n	8009de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b0f      	cmp	r3, #15
 8009dce:	d80a      	bhi.n	8009de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	f000 f923 	bl	800a022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ddc:	4a06      	ldr	r2, [pc, #24]	; (8009df8 <HAL_InitTick+0x5c>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e000      	b.n	8009de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20000000 	.word	0x20000000
 8009df4:	20000008 	.word	0x20000008
 8009df8:	20000004 	.word	0x20000004

08009dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009e00:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <HAL_IncTick+0x1c>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <HAL_IncTick+0x20>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	4a03      	ldr	r2, [pc, #12]	; (8009e1c <HAL_IncTick+0x20>)
 8009e0e:	6013      	str	r3, [r2, #0]
}
 8009e10:	bf00      	nop
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr
 8009e18:	20000008 	.word	0x20000008
 8009e1c:	20001960 	.word	0x20001960

08009e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
  return uwTick;
 8009e24:	4b02      	ldr	r3, [pc, #8]	; (8009e30 <HAL_GetTick+0x10>)
 8009e26:	681b      	ldr	r3, [r3, #0]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bc80      	pop	{r7}
 8009e2e:	4770      	bx	lr
 8009e30:	20001960 	.word	0x20001960

08009e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f003 0307 	and.w	r3, r3, #7
 8009e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <__NVIC_SetPriorityGrouping+0x44>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e50:	4013      	ands	r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e66:	4a04      	ldr	r2, [pc, #16]	; (8009e78 <__NVIC_SetPriorityGrouping+0x44>)
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	60d3      	str	r3, [r2, #12]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bc80      	pop	{r7}
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	e000ed00 	.word	0xe000ed00

08009e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e80:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <__NVIC_GetPriorityGrouping+0x18>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	f003 0307 	and.w	r3, r3, #7
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	e000ed00 	.word	0xe000ed00

08009e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	db0b      	blt.n	8009ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009eaa:	4908      	ldr	r1, [pc, #32]	; (8009ecc <__NVIC_EnableIRQ+0x34>)
 8009eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eb0:	095b      	lsrs	r3, r3, #5
 8009eb2:	79fa      	ldrb	r2, [r7, #7]
 8009eb4:	f002 021f 	and.w	r2, r2, #31
 8009eb8:	2001      	movs	r0, #1
 8009eba:	fa00 f202 	lsl.w	r2, r0, r2
 8009ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bc80      	pop	{r7}
 8009eca:	4770      	bx	lr
 8009ecc:	e000e100 	.word	0xe000e100

08009ed0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	db10      	blt.n	8009f04 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ee2:	490b      	ldr	r1, [pc, #44]	; (8009f10 <__NVIC_DisableIRQ+0x40>)
 8009ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee8:	095b      	lsrs	r3, r3, #5
 8009eea:	79fa      	ldrb	r2, [r7, #7]
 8009eec:	f002 021f 	and.w	r2, r2, #31
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ef6:	3320      	adds	r3, #32
 8009ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009efc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009f00:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bc80      	pop	{r7}
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000e100 	.word	0xe000e100

08009f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	db0a      	blt.n	8009f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f28:	490d      	ldr	r1, [pc, #52]	; (8009f60 <__NVIC_SetPriority+0x4c>)
 8009f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	b2d2      	uxtb	r2, r2
 8009f32:	0112      	lsls	r2, r2, #4
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	440b      	add	r3, r1
 8009f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f3c:	e00a      	b.n	8009f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f3e:	4909      	ldr	r1, [pc, #36]	; (8009f64 <__NVIC_SetPriority+0x50>)
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	f003 030f 	and.w	r3, r3, #15
 8009f46:	3b04      	subs	r3, #4
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	0112      	lsls	r2, r2, #4
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	440b      	add	r3, r1
 8009f52:	761a      	strb	r2, [r3, #24]
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	e000e100 	.word	0xe000e100
 8009f64:	e000ed00 	.word	0xe000ed00

08009f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b089      	sub	sp, #36	; 0x24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f003 0307 	and.w	r3, r3, #7
 8009f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	f1c3 0307 	rsb	r3, r3, #7
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	bf28      	it	cs
 8009f86:	2304      	movcs	r3, #4
 8009f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	2b06      	cmp	r3, #6
 8009f90:	d902      	bls.n	8009f98 <NVIC_EncodePriority+0x30>
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	3b03      	subs	r3, #3
 8009f96:	e000      	b.n	8009f9a <NVIC_EncodePriority+0x32>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa4:	1e5a      	subs	r2, r3, #1
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	401a      	ands	r2, r3
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fae:	2101      	movs	r1, #1
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb6:	1e59      	subs	r1, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fbc:	4313      	orrs	r3, r2
         );
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3724      	adds	r7, #36	; 0x24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bc80      	pop	{r7}
 8009fc6:	4770      	bx	lr

08009fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fd8:	d301      	bcc.n	8009fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e00f      	b.n	8009ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009fde:	4a0a      	ldr	r2, [pc, #40]	; (800a008 <SysTick_Config+0x40>)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009fe6:	210f      	movs	r1, #15
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	f7ff ff92 	bl	8009f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <SysTick_Config+0x40>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009ff6:	4b04      	ldr	r3, [pc, #16]	; (800a008 <SysTick_Config+0x40>)
 8009ff8:	2207      	movs	r2, #7
 8009ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	e000e010 	.word	0xe000e010

0800a00c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff ff0d 	bl	8009e34 <__NVIC_SetPriorityGrouping>
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	4603      	mov	r3, r0
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a030:	2300      	movs	r3, #0
 800a032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a034:	f7ff ff22 	bl	8009e7c <__NVIC_GetPriorityGrouping>
 800a038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	6978      	ldr	r0, [r7, #20]
 800a040:	f7ff ff92 	bl	8009f68 <NVIC_EncodePriority>
 800a044:	4602      	mov	r2, r0
 800a046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7ff ff61 	bl	8009f14 <__NVIC_SetPriority>
}
 800a052:	bf00      	nop
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	4603      	mov	r3, r0
 800a062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7ff ff15 	bl	8009e98 <__NVIC_EnableIRQ>
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	4603      	mov	r3, r0
 800a07e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff ff23 	bl	8009ed0 <__NVIC_DisableIRQ>
}
 800a08a:	bf00      	nop
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff ff94 	bl	8009fc8 <SysTick_Config>
 800a0a0:	4603      	mov	r3, r0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
	...

0800a0ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e043      	b.n	800a14a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	4b22      	ldr	r3, [pc, #136]	; (800a154 <HAL_DMA_Init+0xa8>)
 800a0ca:	4413      	add	r3, r2
 800a0cc:	4a22      	ldr	r2, [pc, #136]	; (800a158 <HAL_DMA_Init+0xac>)
 800a0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d2:	091b      	lsrs	r3, r3, #4
 800a0d4:	009a      	lsls	r2, r3, #2
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <HAL_DMA_Init+0xb0>)
 800a0de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a0f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a0fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800a104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a11c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	4313      	orrs	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr
 800a154:	bffdfff8 	.word	0xbffdfff8
 800a158:	cccccccd 	.word	0xcccccccd
 800a15c:	40020000 	.word	0x40020000

0800a160 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_DMA_Start_IT+0x20>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e04a      	b.n	800a216 <HAL_DMA_Start_IT+0xb6>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d13a      	bne.n	800a208 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2202      	movs	r2, #2
 800a196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	6812      	ldr	r2, [r2, #0]
 800a1a8:	6812      	ldr	r2, [r2, #0]
 800a1aa:	f022 0201 	bic.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	68b9      	ldr	r1, [r7, #8]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 f8ae 	bl	800a318 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d008      	beq.n	800a1d6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	6812      	ldr	r2, [r2, #0]
 800a1cc:	6812      	ldr	r2, [r2, #0]
 800a1ce:	f042 020e 	orr.w	r2, r2, #14
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	e00f      	b.n	800a1f6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	6812      	ldr	r2, [r2, #0]
 800a1de:	6812      	ldr	r2, [r2, #0]
 800a1e0:	f022 0204 	bic.w	r2, r2, #4
 800a1e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	6812      	ldr	r2, [r2, #0]
 800a1f0:	f042 020a 	orr.w	r2, r2, #10
 800a1f4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	6812      	ldr	r2, [r2, #0]
 800a1fe:	6812      	ldr	r2, [r2, #0]
 800a200:	f042 0201 	orr.w	r2, r2, #1
 800a204:	601a      	str	r2, [r3, #0]
 800a206:	e005      	b.n	800a214 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a210:	2302      	movs	r3, #2
 800a212:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800a214:	7dfb      	ldrb	r3, [r7, #23]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a232:	2b02      	cmp	r3, #2
 800a234:	d005      	beq.n	800a242 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2204      	movs	r2, #4
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	73fb      	strb	r3, [r7, #15]
 800a240:	e057      	b.n	800a2f2 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6812      	ldr	r2, [r2, #0]
 800a24a:	6812      	ldr	r2, [r2, #0]
 800a24c:	f022 020e 	bic.w	r2, r2, #14
 800a250:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	6812      	ldr	r2, [r2, #0]
 800a25c:	f022 0201 	bic.w	r2, r2, #1
 800a260:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a262:	4a26      	ldr	r2, [pc, #152]	; (800a2fc <HAL_DMA_Abort_IT+0xdc>)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4619      	mov	r1, r3
 800a26a:	4b25      	ldr	r3, [pc, #148]	; (800a300 <HAL_DMA_Abort_IT+0xe0>)
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d02e      	beq.n	800a2ce <HAL_DMA_Abort_IT+0xae>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4619      	mov	r1, r3
 800a276:	4b23      	ldr	r3, [pc, #140]	; (800a304 <HAL_DMA_Abort_IT+0xe4>)
 800a278:	4299      	cmp	r1, r3
 800a27a:	d026      	beq.n	800a2ca <HAL_DMA_Abort_IT+0xaa>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4619      	mov	r1, r3
 800a282:	4b21      	ldr	r3, [pc, #132]	; (800a308 <HAL_DMA_Abort_IT+0xe8>)
 800a284:	4299      	cmp	r1, r3
 800a286:	d01d      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xa4>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	4b1f      	ldr	r3, [pc, #124]	; (800a30c <HAL_DMA_Abort_IT+0xec>)
 800a290:	4299      	cmp	r1, r3
 800a292:	d014      	beq.n	800a2be <HAL_DMA_Abort_IT+0x9e>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4619      	mov	r1, r3
 800a29a:	4b1d      	ldr	r3, [pc, #116]	; (800a310 <HAL_DMA_Abort_IT+0xf0>)
 800a29c:	4299      	cmp	r1, r3
 800a29e:	d00b      	beq.n	800a2b8 <HAL_DMA_Abort_IT+0x98>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <HAL_DMA_Abort_IT+0xf4>)
 800a2a8:	4299      	cmp	r1, r3
 800a2aa:	d102      	bne.n	800a2b2 <HAL_DMA_Abort_IT+0x92>
 800a2ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2b0:	e00e      	b.n	800a2d0 <HAL_DMA_Abort_IT+0xb0>
 800a2b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2b6:	e00b      	b.n	800a2d0 <HAL_DMA_Abort_IT+0xb0>
 800a2b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2bc:	e008      	b.n	800a2d0 <HAL_DMA_Abort_IT+0xb0>
 800a2be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2c2:	e005      	b.n	800a2d0 <HAL_DMA_Abort_IT+0xb0>
 800a2c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2c8:	e002      	b.n	800a2d0 <HAL_DMA_Abort_IT+0xb0>
 800a2ca:	2310      	movs	r3, #16
 800a2cc:	e000      	b.n	800a2d0 <HAL_DMA_Abort_IT+0xb0>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
    } 
  }
  return status;
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	40020000 	.word	0x40020000
 800a300:	40020008 	.word	0x40020008
 800a304:	4002001c 	.word	0x4002001c
 800a308:	40020030 	.word	0x40020030
 800a30c:	40020044 	.word	0x40020044
 800a310:	40020058 	.word	0x40020058
 800a314:	4002006c 	.word	0x4002006c

0800a318 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a32e:	2101      	movs	r1, #1
 800a330:	fa01 f202 	lsl.w	r2, r1, r2
 800a334:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2b10      	cmp	r3, #16
 800a344:	d108      	bne.n	800a358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a356:	e007      	b.n	800a368 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	60da      	str	r2, [r3, #12]
}
 800a368:	bf00      	nop
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bc80      	pop	{r7}
 800a370:	4770      	bx	lr
	...

0800a374 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a38e:	4b2f      	ldr	r3, [pc, #188]	; (800a44c <HAL_FLASH_Program+0xd8>)
 800a390:	7e1b      	ldrb	r3, [r3, #24]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d101      	bne.n	800a39a <HAL_FLASH_Program+0x26>
 800a396:	2302      	movs	r3, #2
 800a398:	e054      	b.n	800a444 <HAL_FLASH_Program+0xd0>
 800a39a:	4b2c      	ldr	r3, [pc, #176]	; (800a44c <HAL_FLASH_Program+0xd8>)
 800a39c:	2201      	movs	r2, #1
 800a39e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a3a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a3a4:	f000 f898 	bl	800a4d8 <FLASH_WaitForLastOperation>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d144      	bne.n	800a43c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d102      	bne.n	800a3be <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	757b      	strb	r3, [r7, #21]
 800a3bc:	e007      	b.n	800a3ce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d102      	bne.n	800a3ca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	757b      	strb	r3, [r7, #21]
 800a3c8:	e001      	b.n	800a3ce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800a3ca:	2304      	movs	r3, #4
 800a3cc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75bb      	strb	r3, [r7, #22]
 800a3d2:	e02d      	b.n	800a430 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a3d4:	7dbb      	ldrb	r3, [r7, #22]
 800a3d6:	005a      	lsls	r2, r3, #1
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	eb02 0e03 	add.w	lr, r2, r3
 800a3de:	7dbb      	ldrb	r3, [r7, #22]
 800a3e0:	0119      	lsls	r1, r3, #4
 800a3e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e6:	f1c1 0620 	rsb	r6, r1, #32
 800a3ea:	f1a1 0020 	sub.w	r0, r1, #32
 800a3ee:	fa22 f401 	lsr.w	r4, r2, r1
 800a3f2:	fa03 f606 	lsl.w	r6, r3, r6
 800a3f6:	4334      	orrs	r4, r6
 800a3f8:	fa23 f000 	lsr.w	r0, r3, r0
 800a3fc:	4304      	orrs	r4, r0
 800a3fe:	fa23 f501 	lsr.w	r5, r3, r1
 800a402:	b2a3      	uxth	r3, r4
 800a404:	4619      	mov	r1, r3
 800a406:	4670      	mov	r0, lr
 800a408:	f000 f84a 	bl	800a4a0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a40c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a410:	f000 f862 	bl	800a4d8 <FLASH_WaitForLastOperation>
 800a414:	4603      	mov	r3, r0
 800a416:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a418:	4a0d      	ldr	r2, [pc, #52]	; (800a450 <HAL_FLASH_Program+0xdc>)
 800a41a:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <HAL_FLASH_Program+0xdc>)
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f023 0301 	bic.w	r3, r3, #1
 800a422:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d107      	bne.n	800a43a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800a42a:	7dbb      	ldrb	r3, [r7, #22]
 800a42c:	3301      	adds	r3, #1
 800a42e:	75bb      	strb	r3, [r7, #22]
 800a430:	7dba      	ldrb	r2, [r7, #22]
 800a432:	7d7b      	ldrb	r3, [r7, #21]
 800a434:	429a      	cmp	r2, r3
 800a436:	d3cd      	bcc.n	800a3d4 <HAL_FLASH_Program+0x60>
 800a438:	e000      	b.n	800a43c <HAL_FLASH_Program+0xc8>
      {
        break;
 800a43a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a43c:	4b03      	ldr	r3, [pc, #12]	; (800a44c <HAL_FLASH_Program+0xd8>)
 800a43e:	2200      	movs	r2, #0
 800a440:	761a      	strb	r2, [r3, #24]

  return status;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
}
 800a444:	4618      	mov	r0, r3
 800a446:	371c      	adds	r7, #28
 800a448:	46bd      	mov	sp, r7
 800a44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a44c:	20001968 	.word	0x20001968
 800a450:	40022000 	.word	0x40022000

0800a454 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a45e:	4b0d      	ldr	r3, [pc, #52]	; (800a494 <HAL_FLASH_Unlock+0x40>)
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00d      	beq.n	800a486 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a46a:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <HAL_FLASH_Unlock+0x40>)
 800a46c:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <HAL_FLASH_Unlock+0x44>)
 800a46e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a470:	4b08      	ldr	r3, [pc, #32]	; (800a494 <HAL_FLASH_Unlock+0x40>)
 800a472:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <HAL_FLASH_Unlock+0x48>)
 800a474:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <HAL_FLASH_Unlock+0x40>)
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800a486:	79fb      	ldrb	r3, [r7, #7]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	40022000 	.word	0x40022000
 800a498:	45670123 	.word	0x45670123
 800a49c:	cdef89ab 	.word	0xcdef89ab

0800a4a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a4ac:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <FLASH_Program_HalfWord+0x30>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a4b2:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <FLASH_Program_HalfWord+0x34>)
 800a4b4:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <FLASH_Program_HalfWord+0x34>)
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	f043 0301 	orr.w	r3, r3, #1
 800a4bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	887a      	ldrh	r2, [r7, #2]
 800a4c2:	801a      	strh	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20001968 	.word	0x20001968
 800a4d4:	40022000 	.word	0x40022000

0800a4d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800a4e0:	f7ff fc9e 	bl	8009e20 <HAL_GetTick>
 800a4e4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a4e6:	e010      	b.n	800a50a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	d00c      	beq.n	800a50a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <FLASH_WaitForLastOperation+0x2e>
 800a4f6:	f7ff fc93 	bl	8009e20 <HAL_GetTick>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	1ad2      	subs	r2, r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	429a      	cmp	r2, r3
 800a504:	d901      	bls.n	800a50a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e025      	b.n	800a556 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a50a:	4b15      	ldr	r3, [pc, #84]	; (800a560 <FLASH_WaitForLastOperation+0x88>)
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e8      	bne.n	800a4e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a516:	4b12      	ldr	r3, [pc, #72]	; (800a560 <FLASH_WaitForLastOperation+0x88>)
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a522:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <FLASH_WaitForLastOperation+0x88>)
 800a524:	2220      	movs	r2, #32
 800a526:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a528:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <FLASH_WaitForLastOperation+0x88>)
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10b      	bne.n	800a54c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <FLASH_WaitForLastOperation+0x88>)
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d105      	bne.n	800a54c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <FLASH_WaitForLastOperation+0x88>)
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a54c:	f000 f80a 	bl	800a564 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e000      	b.n	800a556 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	40022000 	.word	0x40022000

0800a564 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a56e:	4b23      	ldr	r3, [pc, #140]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f003 0310 	and.w	r3, r3, #16
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a57a:	4b21      	ldr	r3, [pc, #132]	; (800a600 <FLASH_SetErrorCode+0x9c>)
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	f043 0302 	orr.w	r3, r3, #2
 800a582:	4a1f      	ldr	r2, [pc, #124]	; (800a600 <FLASH_SetErrorCode+0x9c>)
 800a584:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f043 0310 	orr.w	r3, r3, #16
 800a58c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a58e:	4b1b      	ldr	r3, [pc, #108]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a59a:	4b19      	ldr	r3, [pc, #100]	; (800a600 <FLASH_SetErrorCode+0x9c>)
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	f043 0301 	orr.w	r3, r3, #1
 800a5a2:	4a17      	ldr	r2, [pc, #92]	; (800a600 <FLASH_SetErrorCode+0x9c>)
 800a5a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f043 0304 	orr.w	r3, r3, #4
 800a5ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a5ae:	4b13      	ldr	r3, [pc, #76]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00b      	beq.n	800a5d2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a5ba:	4b11      	ldr	r3, [pc, #68]	; (800a600 <FLASH_SetErrorCode+0x9c>)
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	f043 0304 	orr.w	r3, r3, #4
 800a5c2:	4a0f      	ldr	r2, [pc, #60]	; (800a600 <FLASH_SetErrorCode+0x9c>)
 800a5c4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a5c6:	4a0d      	ldr	r2, [pc, #52]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a5c8:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	f023 0301 	bic.w	r3, r3, #1
 800a5d0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f240 1201 	movw	r2, #257	; 0x101
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d106      	bne.n	800a5ea <FLASH_SetErrorCode+0x86>
 800a5dc:	4a07      	ldr	r2, [pc, #28]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a5de:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	f023 0301 	bic.w	r3, r3, #1
 800a5e6:	61d3      	str	r3, [r2, #28]
}  
 800a5e8:	e002      	b.n	800a5f0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a5ea:	4a04      	ldr	r2, [pc, #16]	; (800a5fc <FLASH_SetErrorCode+0x98>)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60d3      	str	r3, [r2, #12]
}  
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bc80      	pop	{r7}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	40022000 	.word	0x40022000
 800a600:	20001968 	.word	0x20001968

0800a604 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800a612:	2300      	movs	r3, #0
 800a614:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a616:	4b2f      	ldr	r3, [pc, #188]	; (800a6d4 <HAL_FLASHEx_Erase+0xd0>)
 800a618:	7e1b      	ldrb	r3, [r3, #24]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <HAL_FLASHEx_Erase+0x1e>
 800a61e:	2302      	movs	r3, #2
 800a620:	e053      	b.n	800a6ca <HAL_FLASHEx_Erase+0xc6>
 800a622:	4b2c      	ldr	r3, [pc, #176]	; (800a6d4 <HAL_FLASHEx_Erase+0xd0>)
 800a624:	2201      	movs	r2, #1
 800a626:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d116      	bne.n	800a65e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a630:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a634:	f7ff ff50 	bl	800a4d8 <FLASH_WaitForLastOperation>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d141      	bne.n	800a6c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800a63e:	2001      	movs	r0, #1
 800a640:	f000 f84c 	bl	800a6dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a644:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a648:	f7ff ff46 	bl	800a4d8 <FLASH_WaitForLastOperation>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800a650:	4a21      	ldr	r2, [pc, #132]	; (800a6d8 <HAL_FLASHEx_Erase+0xd4>)
 800a652:	4b21      	ldr	r3, [pc, #132]	; (800a6d8 <HAL_FLASHEx_Erase+0xd4>)
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f023 0304 	bic.w	r3, r3, #4
 800a65a:	6113      	str	r3, [r2, #16]
 800a65c:	e031      	b.n	800a6c2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a65e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a662:	f7ff ff39 	bl	800a4d8 <FLASH_WaitForLastOperation>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d12a      	bne.n	800a6c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	f04f 32ff 	mov.w	r2, #4294967295
 800a672:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	60bb      	str	r3, [r7, #8]
 800a67a:	e019      	b.n	800a6b0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800a67c:	68b8      	ldr	r0, [r7, #8]
 800a67e:	f000 f849 	bl	800a714 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a682:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a686:	f7ff ff27 	bl	800a4d8 <FLASH_WaitForLastOperation>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a68e:	4a12      	ldr	r2, [pc, #72]	; (800a6d8 <HAL_FLASHEx_Erase+0xd4>)
 800a690:	4b11      	ldr	r3, [pc, #68]	; (800a6d8 <HAL_FLASHEx_Erase+0xd4>)
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	f023 0302 	bic.w	r3, r3, #2
 800a698:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	601a      	str	r2, [r3, #0]
            break;
 800a6a6:	e00c      	b.n	800a6c2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ae:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	029a      	lsls	r2, r3, #10
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d8dc      	bhi.n	800a67c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a6c2:	4b04      	ldr	r3, [pc, #16]	; (800a6d4 <HAL_FLASHEx_Erase+0xd0>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	761a      	strb	r2, [r3, #24]

  return status;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20001968 	.word	0x20001968
 800a6d8:	40022000 	.word	0x40022000

0800a6dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a6e4:	4b09      	ldr	r3, [pc, #36]	; (800a70c <FLASH_MassErase+0x30>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a6ea:	4a09      	ldr	r2, [pc, #36]	; (800a710 <FLASH_MassErase+0x34>)
 800a6ec:	4b08      	ldr	r3, [pc, #32]	; (800a710 <FLASH_MassErase+0x34>)
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	f043 0304 	orr.w	r3, r3, #4
 800a6f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a6f6:	4a06      	ldr	r2, [pc, #24]	; (800a710 <FLASH_MassErase+0x34>)
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <FLASH_MassErase+0x34>)
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a700:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	bc80      	pop	{r7}
 800a70a:	4770      	bx	lr
 800a70c:	20001968 	.word	0x20001968
 800a710:	40022000 	.word	0x40022000

0800a714 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a71c:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <FLASH_PageErase+0x38>)
 800a71e:	2200      	movs	r2, #0
 800a720:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a722:	4a0b      	ldr	r2, [pc, #44]	; (800a750 <FLASH_PageErase+0x3c>)
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <FLASH_PageErase+0x3c>)
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	f043 0302 	orr.w	r3, r3, #2
 800a72c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800a72e:	4a08      	ldr	r2, [pc, #32]	; (800a750 <FLASH_PageErase+0x3c>)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a734:	4a06      	ldr	r2, [pc, #24]	; (800a750 <FLASH_PageErase+0x3c>)
 800a736:	4b06      	ldr	r3, [pc, #24]	; (800a750 <FLASH_PageErase+0x3c>)
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a73e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	bc80      	pop	{r7}
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	20001968 	.word	0x20001968
 800a750:	40022000 	.word	0x40022000

0800a754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a754:	b480      	push	{r7}
 800a756:	b08b      	sub	sp, #44	; 0x2c
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a75e:	2300      	movs	r3, #0
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a762:	2300      	movs	r3, #0
 800a764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a766:	e127      	b.n	800a9b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a768:	2201      	movs	r2, #1
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	fa02 f303 	lsl.w	r3, r2, r3
 800a770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	4013      	ands	r3, r2
 800a77a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	429a      	cmp	r2, r3
 800a782:	f040 8116 	bne.w	800a9b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b12      	cmp	r3, #18
 800a78c:	d034      	beq.n	800a7f8 <HAL_GPIO_Init+0xa4>
 800a78e:	2b12      	cmp	r3, #18
 800a790:	d80d      	bhi.n	800a7ae <HAL_GPIO_Init+0x5a>
 800a792:	2b02      	cmp	r3, #2
 800a794:	d02b      	beq.n	800a7ee <HAL_GPIO_Init+0x9a>
 800a796:	2b02      	cmp	r3, #2
 800a798:	d804      	bhi.n	800a7a4 <HAL_GPIO_Init+0x50>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d031      	beq.n	800a802 <HAL_GPIO_Init+0xae>
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d01c      	beq.n	800a7dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a7a2:	e048      	b.n	800a836 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d043      	beq.n	800a830 <HAL_GPIO_Init+0xdc>
 800a7a8:	2b11      	cmp	r3, #17
 800a7aa:	d01b      	beq.n	800a7e4 <HAL_GPIO_Init+0x90>
          break;
 800a7ac:	e043      	b.n	800a836 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800a7ae:	4a89      	ldr	r2, [pc, #548]	; (800a9d4 <HAL_GPIO_Init+0x280>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d026      	beq.n	800a802 <HAL_GPIO_Init+0xae>
 800a7b4:	4a87      	ldr	r2, [pc, #540]	; (800a9d4 <HAL_GPIO_Init+0x280>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d806      	bhi.n	800a7c8 <HAL_GPIO_Init+0x74>
 800a7ba:	4a87      	ldr	r2, [pc, #540]	; (800a9d8 <HAL_GPIO_Init+0x284>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d020      	beq.n	800a802 <HAL_GPIO_Init+0xae>
 800a7c0:	4a86      	ldr	r2, [pc, #536]	; (800a9dc <HAL_GPIO_Init+0x288>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d01d      	beq.n	800a802 <HAL_GPIO_Init+0xae>
          break;
 800a7c6:	e036      	b.n	800a836 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800a7c8:	4a85      	ldr	r2, [pc, #532]	; (800a9e0 <HAL_GPIO_Init+0x28c>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d019      	beq.n	800a802 <HAL_GPIO_Init+0xae>
 800a7ce:	4a85      	ldr	r2, [pc, #532]	; (800a9e4 <HAL_GPIO_Init+0x290>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d016      	beq.n	800a802 <HAL_GPIO_Init+0xae>
 800a7d4:	4a84      	ldr	r2, [pc, #528]	; (800a9e8 <HAL_GPIO_Init+0x294>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d013      	beq.n	800a802 <HAL_GPIO_Init+0xae>
          break;
 800a7da:	e02c      	b.n	800a836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	623b      	str	r3, [r7, #32]
          break;
 800a7e2:	e028      	b.n	800a836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	623b      	str	r3, [r7, #32]
          break;
 800a7ec:	e023      	b.n	800a836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	623b      	str	r3, [r7, #32]
          break;
 800a7f6:	e01e      	b.n	800a836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	330c      	adds	r3, #12
 800a7fe:	623b      	str	r3, [r7, #32]
          break;
 800a800:	e019      	b.n	800a836 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a80a:	2304      	movs	r3, #4
 800a80c:	623b      	str	r3, [r7, #32]
          break;
 800a80e:	e012      	b.n	800a836 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d105      	bne.n	800a824 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a818:	2308      	movs	r3, #8
 800a81a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	611a      	str	r2, [r3, #16]
          break;
 800a822:	e008      	b.n	800a836 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a824:	2308      	movs	r3, #8
 800a826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	615a      	str	r2, [r3, #20]
          break;
 800a82e:	e002      	b.n	800a836 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a830:	2300      	movs	r3, #0
 800a832:	623b      	str	r3, [r7, #32]
          break;
 800a834:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2bff      	cmp	r3, #255	; 0xff
 800a83a:	d801      	bhi.n	800a840 <HAL_GPIO_Init+0xec>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	e001      	b.n	800a844 <HAL_GPIO_Init+0xf0>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3304      	adds	r3, #4
 800a844:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	2bff      	cmp	r3, #255	; 0xff
 800a84a:	d802      	bhi.n	800a852 <HAL_GPIO_Init+0xfe>
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	e002      	b.n	800a858 <HAL_GPIO_Init+0x104>
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	3b08      	subs	r3, #8
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	210f      	movs	r1, #15
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	fa01 f303 	lsl.w	r3, r1, r3
 800a866:	43db      	mvns	r3, r3
 800a868:	401a      	ands	r2, r3
 800a86a:	6a39      	ldr	r1, [r7, #32]
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	fa01 f303 	lsl.w	r3, r1, r3
 800a872:	431a      	orrs	r2, r3
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 8096 	beq.w	800a9b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a886:	4a59      	ldr	r2, [pc, #356]	; (800a9ec <HAL_GPIO_Init+0x298>)
 800a888:	4b58      	ldr	r3, [pc, #352]	; (800a9ec <HAL_GPIO_Init+0x298>)
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	f043 0301 	orr.w	r3, r3, #1
 800a890:	6193      	str	r3, [r2, #24]
 800a892:	4b56      	ldr	r3, [pc, #344]	; (800a9ec <HAL_GPIO_Init+0x298>)
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	60bb      	str	r3, [r7, #8]
 800a89c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a89e:	4a54      	ldr	r2, [pc, #336]	; (800a9f0 <HAL_GPIO_Init+0x29c>)
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	089b      	lsrs	r3, r3, #2
 800a8a4:	3302      	adds	r3, #2
 800a8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	220f      	movs	r2, #15
 800a8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ba:	43db      	mvns	r3, r3
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a4b      	ldr	r2, [pc, #300]	; (800a9f4 <HAL_GPIO_Init+0x2a0>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d013      	beq.n	800a8f2 <HAL_GPIO_Init+0x19e>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a4a      	ldr	r2, [pc, #296]	; (800a9f8 <HAL_GPIO_Init+0x2a4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00d      	beq.n	800a8ee <HAL_GPIO_Init+0x19a>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a49      	ldr	r2, [pc, #292]	; (800a9fc <HAL_GPIO_Init+0x2a8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d007      	beq.n	800a8ea <HAL_GPIO_Init+0x196>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a48      	ldr	r2, [pc, #288]	; (800aa00 <HAL_GPIO_Init+0x2ac>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d101      	bne.n	800a8e6 <HAL_GPIO_Init+0x192>
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e006      	b.n	800a8f4 <HAL_GPIO_Init+0x1a0>
 800a8e6:	2304      	movs	r3, #4
 800a8e8:	e004      	b.n	800a8f4 <HAL_GPIO_Init+0x1a0>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e002      	b.n	800a8f4 <HAL_GPIO_Init+0x1a0>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <HAL_GPIO_Init+0x1a0>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f6:	f002 0203 	and.w	r2, r2, #3
 800a8fa:	0092      	lsls	r2, r2, #2
 800a8fc:	4093      	lsls	r3, r2
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4313      	orrs	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a904:	493a      	ldr	r1, [pc, #232]	; (800a9f0 <HAL_GPIO_Init+0x29c>)
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	089b      	lsrs	r3, r3, #2
 800a90a:	3302      	adds	r3, #2
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d006      	beq.n	800a92c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a91e:	4939      	ldr	r1, [pc, #228]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a920:	4b38      	ldr	r3, [pc, #224]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	4313      	orrs	r3, r2
 800a928:	600b      	str	r3, [r1, #0]
 800a92a:	e006      	b.n	800a93a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a92c:	4935      	ldr	r1, [pc, #212]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a92e:	4b35      	ldr	r3, [pc, #212]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	43db      	mvns	r3, r3
 800a936:	4013      	ands	r3, r2
 800a938:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d006      	beq.n	800a954 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a946:	492f      	ldr	r1, [pc, #188]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a948:	4b2e      	ldr	r3, [pc, #184]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	4313      	orrs	r3, r2
 800a950:	604b      	str	r3, [r1, #4]
 800a952:	e006      	b.n	800a962 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a954:	492b      	ldr	r1, [pc, #172]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a956:	4b2b      	ldr	r3, [pc, #172]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a958:	685a      	ldr	r2, [r3, #4]
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	43db      	mvns	r3, r3
 800a95e:	4013      	ands	r3, r2
 800a960:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d006      	beq.n	800a97c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a96e:	4925      	ldr	r1, [pc, #148]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a970:	4b24      	ldr	r3, [pc, #144]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	4313      	orrs	r3, r2
 800a978:	608b      	str	r3, [r1, #8]
 800a97a:	e006      	b.n	800a98a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a97c:	4921      	ldr	r1, [pc, #132]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a97e:	4b21      	ldr	r3, [pc, #132]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a980:	689a      	ldr	r2, [r3, #8]
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	43db      	mvns	r3, r3
 800a986:	4013      	ands	r3, r2
 800a988:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d006      	beq.n	800a9a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a996:	491b      	ldr	r1, [pc, #108]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a998:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60cb      	str	r3, [r1, #12]
 800a9a2:	e006      	b.n	800a9b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a9a4:	4917      	ldr	r1, [pc, #92]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a9a6:	4b17      	ldr	r3, [pc, #92]	; (800aa04 <HAL_GPIO_Init+0x2b0>)
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	43db      	mvns	r3, r3
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f47f aed0 	bne.w	800a768 <HAL_GPIO_Init+0x14>
  }
}
 800a9c8:	bf00      	nop
 800a9ca:	372c      	adds	r7, #44	; 0x2c
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bc80      	pop	{r7}
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	10210000 	.word	0x10210000
 800a9d8:	10110000 	.word	0x10110000
 800a9dc:	10120000 	.word	0x10120000
 800a9e0:	10310000 	.word	0x10310000
 800a9e4:	10320000 	.word	0x10320000
 800a9e8:	10220000 	.word	0x10220000
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40010800 	.word	0x40010800
 800a9f8:	40010c00 	.word	0x40010c00
 800a9fc:	40011000 	.word	0x40011000
 800aa00:	40011400 	.word	0x40011400
 800aa04:	40010400 	.word	0x40010400

0800aa08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b089      	sub	sp, #36	; 0x24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aa12:	2300      	movs	r3, #0
 800aa14:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800aa16:	e09a      	b.n	800ab4e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800aa18:	2201      	movs	r2, #1
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	409a      	lsls	r2, r3
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	4013      	ands	r3, r2
 800aa22:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 808e 	beq.w	800ab48 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800aa2c:	4a4e      	ldr	r2, [pc, #312]	; (800ab68 <HAL_GPIO_DeInit+0x160>)
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	089b      	lsrs	r3, r3, #2
 800aa32:	3302      	adds	r3, #2
 800aa34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa38:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	220f      	movs	r2, #15
 800aa44:	fa02 f303 	lsl.w	r3, r2, r3
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a46      	ldr	r2, [pc, #280]	; (800ab6c <HAL_GPIO_DeInit+0x164>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d013      	beq.n	800aa7e <HAL_GPIO_DeInit+0x76>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a45      	ldr	r2, [pc, #276]	; (800ab70 <HAL_GPIO_DeInit+0x168>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00d      	beq.n	800aa7a <HAL_GPIO_DeInit+0x72>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a44      	ldr	r2, [pc, #272]	; (800ab74 <HAL_GPIO_DeInit+0x16c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d007      	beq.n	800aa76 <HAL_GPIO_DeInit+0x6e>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a43      	ldr	r2, [pc, #268]	; (800ab78 <HAL_GPIO_DeInit+0x170>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d101      	bne.n	800aa72 <HAL_GPIO_DeInit+0x6a>
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e006      	b.n	800aa80 <HAL_GPIO_DeInit+0x78>
 800aa72:	2304      	movs	r3, #4
 800aa74:	e004      	b.n	800aa80 <HAL_GPIO_DeInit+0x78>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e002      	b.n	800aa80 <HAL_GPIO_DeInit+0x78>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <HAL_GPIO_DeInit+0x78>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	69fa      	ldr	r2, [r7, #28]
 800aa82:	f002 0203 	and.w	r2, r2, #3
 800aa86:	0092      	lsls	r2, r2, #2
 800aa88:	fa03 f202 	lsl.w	r2, r3, r2
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d132      	bne.n	800aaf8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	f003 0303 	and.w	r3, r3, #3
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	220f      	movs	r2, #15
 800aa9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800aaa2:	4831      	ldr	r0, [pc, #196]	; (800ab68 <HAL_GPIO_DeInit+0x160>)
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	089b      	lsrs	r3, r3, #2
 800aaa8:	492f      	ldr	r1, [pc, #188]	; (800ab68 <HAL_GPIO_DeInit+0x160>)
 800aaaa:	69fa      	ldr	r2, [r7, #28]
 800aaac:	0892      	lsrs	r2, r2, #2
 800aaae:	3202      	adds	r2, #2
 800aab0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	43d2      	mvns	r2, r2
 800aab8:	400a      	ands	r2, r1
 800aaba:	3302      	adds	r3, #2
 800aabc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800aac0:	492e      	ldr	r1, [pc, #184]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aac2:	4b2e      	ldr	r3, [pc, #184]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	43db      	mvns	r3, r3
 800aaca:	4013      	ands	r3, r2
 800aacc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800aace:	492b      	ldr	r1, [pc, #172]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aad0:	4b2a      	ldr	r3, [pc, #168]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	43db      	mvns	r3, r3
 800aad8:	4013      	ands	r3, r2
 800aada:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800aadc:	4927      	ldr	r1, [pc, #156]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aade:	4b27      	ldr	r3, [pc, #156]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aae0:	689a      	ldr	r2, [r3, #8]
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	43db      	mvns	r3, r3
 800aae6:	4013      	ands	r3, r2
 800aae8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800aaea:	4924      	ldr	r1, [pc, #144]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aaec:	4b23      	ldr	r3, [pc, #140]	; (800ab7c <HAL_GPIO_DeInit+0x174>)
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	43db      	mvns	r3, r3
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2bff      	cmp	r3, #255	; 0xff
 800aafc:	d801      	bhi.n	800ab02 <HAL_GPIO_DeInit+0xfa>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	e001      	b.n	800ab06 <HAL_GPIO_DeInit+0xfe>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3304      	adds	r3, #4
 800ab06:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2bff      	cmp	r3, #255	; 0xff
 800ab0c:	d802      	bhi.n	800ab14 <HAL_GPIO_DeInit+0x10c>
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	e002      	b.n	800ab1a <HAL_GPIO_DeInit+0x112>
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	3b08      	subs	r3, #8
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	210f      	movs	r1, #15
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	fa01 f303 	lsl.w	r3, r1, r3
 800ab28:	43db      	mvns	r3, r3
 800ab2a:	401a      	ands	r2, r3
 800ab2c:	2104      	movs	r1, #4
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	fa01 f303 	lsl.w	r3, r1, r3
 800ab34:	431a      	orrs	r2, r3
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68da      	ldr	r2, [r3, #12]
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	43db      	mvns	r3, r3
 800ab42:	401a      	ands	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60da      	str	r2, [r3, #12]
    }

    position++;
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	fa22 f303 	lsr.w	r3, r2, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f47f af5e 	bne.w	800aa18 <HAL_GPIO_DeInit+0x10>
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	3724      	adds	r7, #36	; 0x24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc80      	pop	{r7}
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	40010000 	.word	0x40010000
 800ab6c:	40010800 	.word	0x40010800
 800ab70:	40010c00 	.word	0x40010c00
 800ab74:	40011000 	.word	0x40011000
 800ab78:	40011400 	.word	0x40011400
 800ab7c:	40010400 	.word	0x40010400

0800ab80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	887b      	ldrh	r3, [r7, #2]
 800ab92:	4013      	ands	r3, r2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	73fb      	strb	r3, [r7, #15]
 800ab9c:	e001      	b.n	800aba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bc80      	pop	{r7}
 800abac:	4770      	bx	lr

0800abae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	460b      	mov	r3, r1
 800abb8:	807b      	strh	r3, [r7, #2]
 800abba:	4613      	mov	r3, r2
 800abbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800abbe:	787b      	ldrb	r3, [r7, #1]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d003      	beq.n	800abcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800abc4:	887a      	ldrh	r2, [r7, #2]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800abca:	e003      	b.n	800abd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800abcc:	887b      	ldrh	r3, [r7, #2]
 800abce:	041a      	lsls	r2, r3, #16
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	611a      	str	r2, [r3, #16]
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	bc80      	pop	{r7}
 800abdc:	4770      	bx	lr
	...

0800abe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e26c      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 8087 	beq.w	800ad0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac00:	4b92      	ldr	r3, [pc, #584]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f003 030c 	and.w	r3, r3, #12
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d00c      	beq.n	800ac26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ac0c:	4b8f      	ldr	r3, [pc, #572]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f003 030c 	and.w	r3, r3, #12
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d112      	bne.n	800ac3e <HAL_RCC_OscConfig+0x5e>
 800ac18:	4b8c      	ldr	r3, [pc, #560]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac24:	d10b      	bne.n	800ac3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac26:	4b89      	ldr	r3, [pc, #548]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d06c      	beq.n	800ad0c <HAL_RCC_OscConfig+0x12c>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d168      	bne.n	800ad0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e246      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac46:	d106      	bne.n	800ac56 <HAL_RCC_OscConfig+0x76>
 800ac48:	4a80      	ldr	r2, [pc, #512]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac4a:	4b80      	ldr	r3, [pc, #512]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac52:	6013      	str	r3, [r2, #0]
 800ac54:	e02e      	b.n	800acb4 <HAL_RCC_OscConfig+0xd4>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10c      	bne.n	800ac78 <HAL_RCC_OscConfig+0x98>
 800ac5e:	4a7b      	ldr	r2, [pc, #492]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac60:	4b7a      	ldr	r3, [pc, #488]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	4a78      	ldr	r2, [pc, #480]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac6c:	4b77      	ldr	r3, [pc, #476]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	e01d      	b.n	800acb4 <HAL_RCC_OscConfig+0xd4>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac80:	d10c      	bne.n	800ac9c <HAL_RCC_OscConfig+0xbc>
 800ac82:	4a72      	ldr	r2, [pc, #456]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac84:	4b71      	ldr	r3, [pc, #452]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	4a6f      	ldr	r2, [pc, #444]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac90:	4b6e      	ldr	r3, [pc, #440]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	e00b      	b.n	800acb4 <HAL_RCC_OscConfig+0xd4>
 800ac9c:	4a6b      	ldr	r2, [pc, #428]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ac9e:	4b6b      	ldr	r3, [pc, #428]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	4a68      	ldr	r2, [pc, #416]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800acaa:	4b68      	ldr	r3, [pc, #416]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d013      	beq.n	800ace4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acbc:	f7ff f8b0 	bl	8009e20 <HAL_GetTick>
 800acc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acc2:	e008      	b.n	800acd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acc4:	f7ff f8ac 	bl	8009e20 <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	2b64      	cmp	r3, #100	; 0x64
 800acd0:	d901      	bls.n	800acd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e1fa      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acd6:	4b5d      	ldr	r3, [pc, #372]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0f0      	beq.n	800acc4 <HAL_RCC_OscConfig+0xe4>
 800ace2:	e014      	b.n	800ad0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ace4:	f7ff f89c 	bl	8009e20 <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acea:	e008      	b.n	800acfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acec:	f7ff f898 	bl	8009e20 <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	2b64      	cmp	r3, #100	; 0x64
 800acf8:	d901      	bls.n	800acfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e1e6      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acfe:	4b53      	ldr	r3, [pc, #332]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1f0      	bne.n	800acec <HAL_RCC_OscConfig+0x10c>
 800ad0a:	e000      	b.n	800ad0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d063      	beq.n	800ade2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad1a:	4b4c      	ldr	r3, [pc, #304]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f003 030c 	and.w	r3, r3, #12
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00b      	beq.n	800ad3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ad26:	4b49      	ldr	r3, [pc, #292]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f003 030c 	and.w	r3, r3, #12
 800ad2e:	2b08      	cmp	r3, #8
 800ad30:	d11c      	bne.n	800ad6c <HAL_RCC_OscConfig+0x18c>
 800ad32:	4b46      	ldr	r3, [pc, #280]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d116      	bne.n	800ad6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad3e:	4b43      	ldr	r3, [pc, #268]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0302 	and.w	r3, r3, #2
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d005      	beq.n	800ad56 <HAL_RCC_OscConfig+0x176>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d001      	beq.n	800ad56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e1ba      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad56:	493d      	ldr	r1, [pc, #244]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad58:	4b3c      	ldr	r3, [pc, #240]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	4313      	orrs	r3, r2
 800ad68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad6a:	e03a      	b.n	800ade2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d020      	beq.n	800adb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad74:	4b36      	ldr	r3, [pc, #216]	; (800ae50 <HAL_RCC_OscConfig+0x270>)
 800ad76:	2201      	movs	r2, #1
 800ad78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad7a:	f7ff f851 	bl	8009e20 <HAL_GetTick>
 800ad7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad80:	e008      	b.n	800ad94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad82:	f7ff f84d 	bl	8009e20 <HAL_GetTick>
 800ad86:	4602      	mov	r2, r0
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d901      	bls.n	800ad94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e19b      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad94:	4b2d      	ldr	r3, [pc, #180]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0f0      	beq.n	800ad82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada0:	492a      	ldr	r1, [pc, #168]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ada2:	4b2a      	ldr	r3, [pc, #168]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	4313      	orrs	r3, r2
 800adb2:	600b      	str	r3, [r1, #0]
 800adb4:	e015      	b.n	800ade2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adb6:	4b26      	ldr	r3, [pc, #152]	; (800ae50 <HAL_RCC_OscConfig+0x270>)
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adbc:	f7ff f830 	bl	8009e20 <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adc2:	e008      	b.n	800add6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adc4:	f7ff f82c 	bl	8009e20 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e17a      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800add6:	4b1d      	ldr	r3, [pc, #116]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0302 	and.w	r3, r3, #2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1f0      	bne.n	800adc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0308 	and.w	r3, r3, #8
 800adea:	2b00      	cmp	r3, #0
 800adec:	d03a      	beq.n	800ae64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d019      	beq.n	800ae2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adf6:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <HAL_RCC_OscConfig+0x274>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800adfc:	f7ff f810 	bl	8009e20 <HAL_GetTick>
 800ae00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae02:	e008      	b.n	800ae16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae04:	f7ff f80c 	bl	8009e20 <HAL_GetTick>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d901      	bls.n	800ae16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e15a      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <HAL_RCC_OscConfig+0x26c>)
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	f003 0302 	and.w	r3, r3, #2
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d0f0      	beq.n	800ae04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ae22:	2001      	movs	r0, #1
 800ae24:	f000 fada 	bl	800b3dc <RCC_Delay>
 800ae28:	e01c      	b.n	800ae64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae2a:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <HAL_RCC_OscConfig+0x274>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae30:	f7fe fff6 	bl	8009e20 <HAL_GetTick>
 800ae34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae36:	e00f      	b.n	800ae58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae38:	f7fe fff2 	bl	8009e20 <HAL_GetTick>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d908      	bls.n	800ae58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e140      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
 800ae4a:	bf00      	nop
 800ae4c:	40021000 	.word	0x40021000
 800ae50:	42420000 	.word	0x42420000
 800ae54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae58:	4b9e      	ldr	r3, [pc, #632]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e9      	bne.n	800ae38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80a6 	beq.w	800afbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae76:	4b97      	ldr	r3, [pc, #604]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800ae78:	69db      	ldr	r3, [r3, #28]
 800ae7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10d      	bne.n	800ae9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae82:	4a94      	ldr	r2, [pc, #592]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800ae84:	4b93      	ldr	r3, [pc, #588]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae8c:	61d3      	str	r3, [r2, #28]
 800ae8e:	4b91      	ldr	r3, [pc, #580]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae9e:	4b8e      	ldr	r3, [pc, #568]	; (800b0d8 <HAL_RCC_OscConfig+0x4f8>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d118      	bne.n	800aedc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aeaa:	4a8b      	ldr	r2, [pc, #556]	; (800b0d8 <HAL_RCC_OscConfig+0x4f8>)
 800aeac:	4b8a      	ldr	r3, [pc, #552]	; (800b0d8 <HAL_RCC_OscConfig+0x4f8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aeb6:	f7fe ffb3 	bl	8009e20 <HAL_GetTick>
 800aeba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aebc:	e008      	b.n	800aed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aebe:	f7fe ffaf 	bl	8009e20 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b64      	cmp	r3, #100	; 0x64
 800aeca:	d901      	bls.n	800aed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e0fd      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aed0:	4b81      	ldr	r3, [pc, #516]	; (800b0d8 <HAL_RCC_OscConfig+0x4f8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0f0      	beq.n	800aebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d106      	bne.n	800aef2 <HAL_RCC_OscConfig+0x312>
 800aee4:	4a7b      	ldr	r2, [pc, #492]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800aee6:	4b7b      	ldr	r3, [pc, #492]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	6213      	str	r3, [r2, #32]
 800aef0:	e02d      	b.n	800af4e <HAL_RCC_OscConfig+0x36e>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10c      	bne.n	800af14 <HAL_RCC_OscConfig+0x334>
 800aefa:	4a76      	ldr	r2, [pc, #472]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800aefc:	4b75      	ldr	r3, [pc, #468]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	f023 0301 	bic.w	r3, r3, #1
 800af04:	6213      	str	r3, [r2, #32]
 800af06:	4a73      	ldr	r2, [pc, #460]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af08:	4b72      	ldr	r3, [pc, #456]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f023 0304 	bic.w	r3, r3, #4
 800af10:	6213      	str	r3, [r2, #32]
 800af12:	e01c      	b.n	800af4e <HAL_RCC_OscConfig+0x36e>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	2b05      	cmp	r3, #5
 800af1a:	d10c      	bne.n	800af36 <HAL_RCC_OscConfig+0x356>
 800af1c:	4a6d      	ldr	r2, [pc, #436]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af1e:	4b6d      	ldr	r3, [pc, #436]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	f043 0304 	orr.w	r3, r3, #4
 800af26:	6213      	str	r3, [r2, #32]
 800af28:	4a6a      	ldr	r2, [pc, #424]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af2a:	4b6a      	ldr	r3, [pc, #424]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	f043 0301 	orr.w	r3, r3, #1
 800af32:	6213      	str	r3, [r2, #32]
 800af34:	e00b      	b.n	800af4e <HAL_RCC_OscConfig+0x36e>
 800af36:	4a67      	ldr	r2, [pc, #412]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af38:	4b66      	ldr	r3, [pc, #408]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	f023 0301 	bic.w	r3, r3, #1
 800af40:	6213      	str	r3, [r2, #32]
 800af42:	4a64      	ldr	r2, [pc, #400]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af44:	4b63      	ldr	r3, [pc, #396]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	f023 0304 	bic.w	r3, r3, #4
 800af4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d015      	beq.n	800af82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af56:	f7fe ff63 	bl	8009e20 <HAL_GetTick>
 800af5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af5c:	e00a      	b.n	800af74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af5e:	f7fe ff5f 	bl	8009e20 <HAL_GetTick>
 800af62:	4602      	mov	r2, r0
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	f241 3288 	movw	r2, #5000	; 0x1388
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d901      	bls.n	800af74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e0ab      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af74:	4b57      	ldr	r3, [pc, #348]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0ee      	beq.n	800af5e <HAL_RCC_OscConfig+0x37e>
 800af80:	e014      	b.n	800afac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af82:	f7fe ff4d 	bl	8009e20 <HAL_GetTick>
 800af86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af88:	e00a      	b.n	800afa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af8a:	f7fe ff49 	bl	8009e20 <HAL_GetTick>
 800af8e:	4602      	mov	r2, r0
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	f241 3288 	movw	r2, #5000	; 0x1388
 800af98:	4293      	cmp	r3, r2
 800af9a:	d901      	bls.n	800afa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e095      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afa0:	4b4c      	ldr	r3, [pc, #304]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1ee      	bne.n	800af8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d105      	bne.n	800afbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afb2:	4a48      	ldr	r2, [pc, #288]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800afb4:	4b47      	ldr	r3, [pc, #284]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 8081 	beq.w	800b0ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800afc8:	4b42      	ldr	r3, [pc, #264]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	f003 030c 	and.w	r3, r3, #12
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d061      	beq.n	800b098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d146      	bne.n	800b06a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afdc:	4b3f      	ldr	r3, [pc, #252]	; (800b0dc <HAL_RCC_OscConfig+0x4fc>)
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afe2:	f7fe ff1d 	bl	8009e20 <HAL_GetTick>
 800afe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800afe8:	e008      	b.n	800affc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afea:	f7fe ff19 	bl	8009e20 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d901      	bls.n	800affc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e067      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800affc:	4b35      	ldr	r3, [pc, #212]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1f0      	bne.n	800afea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b010:	d108      	bne.n	800b024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b012:	4930      	ldr	r1, [pc, #192]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800b014:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	4313      	orrs	r3, r2
 800b022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b024:	482b      	ldr	r0, [pc, #172]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800b026:	4b2b      	ldr	r3, [pc, #172]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a19      	ldr	r1, [r3, #32]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	430b      	orrs	r3, r1
 800b038:	4313      	orrs	r3, r2
 800b03a:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b03c:	4b27      	ldr	r3, [pc, #156]	; (800b0dc <HAL_RCC_OscConfig+0x4fc>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b042:	f7fe feed 	bl	8009e20 <HAL_GetTick>
 800b046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b04a:	f7fe fee9 	bl	8009e20 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e037      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b05c:	4b1d      	ldr	r3, [pc, #116]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0f0      	beq.n	800b04a <HAL_RCC_OscConfig+0x46a>
 800b068:	e02f      	b.n	800b0ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b06a:	4b1c      	ldr	r3, [pc, #112]	; (800b0dc <HAL_RCC_OscConfig+0x4fc>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b070:	f7fe fed6 	bl	8009e20 <HAL_GetTick>
 800b074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b078:	f7fe fed2 	bl	8009e20 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e020      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b08a:	4b12      	ldr	r3, [pc, #72]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1f0      	bne.n	800b078 <HAL_RCC_OscConfig+0x498>
 800b096:	e018      	b.n	800b0ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e013      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b0a4:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <HAL_RCC_OscConfig+0x4f4>)
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d106      	bne.n	800b0c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d001      	beq.n	800b0ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	40021000 	.word	0x40021000
 800b0d8:	40007000 	.word	0x40007000
 800b0dc:	42420060 	.word	0x42420060

0800b0e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e0d0      	b.n	800b296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b0f4:	4b6a      	ldr	r3, [pc, #424]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0207 	and.w	r2, r3, #7
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d210      	bcs.n	800b124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b102:	4967      	ldr	r1, [pc, #412]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b104:	4b66      	ldr	r3, [pc, #408]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f023 0207 	bic.w	r2, r3, #7
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	4313      	orrs	r3, r2
 800b110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b112:	4b63      	ldr	r3, [pc, #396]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0207 	and.w	r2, r3, #7
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d001      	beq.n	800b124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e0b8      	b.n	800b296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d020      	beq.n	800b172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b13c:	4a59      	ldr	r2, [pc, #356]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b13e:	4b59      	ldr	r3, [pc, #356]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0308 	and.w	r3, r3, #8
 800b150:	2b00      	cmp	r3, #0
 800b152:	d005      	beq.n	800b160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b154:	4a53      	ldr	r2, [pc, #332]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b156:	4b53      	ldr	r3, [pc, #332]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b15e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b160:	4950      	ldr	r1, [pc, #320]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b162:	4b50      	ldr	r3, [pc, #320]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	4313      	orrs	r3, r2
 800b170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d040      	beq.n	800b200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d107      	bne.n	800b196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b186:	4b47      	ldr	r3, [pc, #284]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d115      	bne.n	800b1be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e07f      	b.n	800b296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d107      	bne.n	800b1ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b19e:	4b41      	ldr	r3, [pc, #260]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d109      	bne.n	800b1be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e073      	b.n	800b296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1ae:	4b3d      	ldr	r3, [pc, #244]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e06b      	b.n	800b296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b1be:	4939      	ldr	r1, [pc, #228]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b1c0:	4b38      	ldr	r3, [pc, #224]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f023 0203 	bic.w	r2, r3, #3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b1d0:	f7fe fe26 	bl	8009e20 <HAL_GetTick>
 800b1d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1d6:	e00a      	b.n	800b1ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1d8:	f7fe fe22 	bl	8009e20 <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d901      	bls.n	800b1ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e053      	b.n	800b296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1ee:	4b2d      	ldr	r3, [pc, #180]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f003 020c 	and.w	r2, r3, #12
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d1eb      	bne.n	800b1d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b200:	4b27      	ldr	r3, [pc, #156]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0207 	and.w	r2, r3, #7
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d910      	bls.n	800b230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b20e:	4924      	ldr	r1, [pc, #144]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b210:	4b23      	ldr	r3, [pc, #140]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f023 0207 	bic.w	r2, r3, #7
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b21e:	4b20      	ldr	r3, [pc, #128]	; (800b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 0207 	and.w	r2, r3, #7
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d001      	beq.n	800b230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e032      	b.n	800b296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d008      	beq.n	800b24e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b23c:	4919      	ldr	r1, [pc, #100]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b23e:	4b19      	ldr	r3, [pc, #100]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0308 	and.w	r3, r3, #8
 800b256:	2b00      	cmp	r3, #0
 800b258:	d009      	beq.n	800b26e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b25a:	4912      	ldr	r1, [pc, #72]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b25c:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	00db      	lsls	r3, r3, #3
 800b26a:	4313      	orrs	r3, r2
 800b26c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b26e:	f000 f821 	bl	800b2b4 <HAL_RCC_GetSysClockFreq>
 800b272:	4601      	mov	r1, r0
 800b274:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	091b      	lsrs	r3, r3, #4
 800b27a:	f003 030f 	and.w	r3, r3, #15
 800b27e:	4a0a      	ldr	r2, [pc, #40]	; (800b2a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b280:	5cd3      	ldrb	r3, [r2, r3]
 800b282:	fa21 f303 	lsr.w	r3, r1, r3
 800b286:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <HAL_RCC_ClockConfig+0x1cc>)
 800b288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b28a:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <HAL_RCC_ClockConfig+0x1d0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fd84 	bl	8009d9c <HAL_InitTick>

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	40022000 	.word	0x40022000
 800b2a4:	40021000 	.word	0x40021000
 800b2a8:	0800c070 	.word	0x0800c070
 800b2ac:	20000000 	.word	0x20000000
 800b2b0:	20000004 	.word	0x20000004

0800b2b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2b4:	b490      	push	{r4, r7}
 800b2b6:	b08a      	sub	sp, #40	; 0x28
 800b2b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b2ba:	4b2a      	ldr	r3, [pc, #168]	; (800b364 <HAL_RCC_GetSysClockFreq+0xb0>)
 800b2bc:	1d3c      	adds	r4, r7, #4
 800b2be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b2c4:	4b28      	ldr	r3, [pc, #160]	; (800b368 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	61fb      	str	r3, [r7, #28]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	61bb      	str	r3, [r7, #24]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b2de:	4b23      	ldr	r3, [pc, #140]	; (800b36c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	f003 030c 	and.w	r3, r3, #12
 800b2ea:	2b04      	cmp	r3, #4
 800b2ec:	d002      	beq.n	800b2f4 <HAL_RCC_GetSysClockFreq+0x40>
 800b2ee:	2b08      	cmp	r3, #8
 800b2f0:	d003      	beq.n	800b2fa <HAL_RCC_GetSysClockFreq+0x46>
 800b2f2:	e02d      	b.n	800b350 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b2f4:	4b1e      	ldr	r3, [pc, #120]	; (800b370 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b2f6:	623b      	str	r3, [r7, #32]
      break;
 800b2f8:	e02d      	b.n	800b356 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	0c9b      	lsrs	r3, r3, #18
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b306:	4413      	add	r3, r2
 800b308:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b30c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d013      	beq.n	800b340 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b318:	4b14      	ldr	r3, [pc, #80]	; (800b36c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	0c5b      	lsrs	r3, r3, #17
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b326:	4413      	add	r3, r2
 800b328:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b32c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	4a0f      	ldr	r2, [pc, #60]	; (800b370 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b332:	fb02 f203 	mul.w	r2, r2, r3
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
 800b33e:	e004      	b.n	800b34a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	4a0c      	ldr	r2, [pc, #48]	; (800b374 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b344:	fb02 f303 	mul.w	r3, r2, r3
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	623b      	str	r3, [r7, #32]
      break;
 800b34e:	e002      	b.n	800b356 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b350:	4b07      	ldr	r3, [pc, #28]	; (800b370 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b352:	623b      	str	r3, [r7, #32]
      break;
 800b354:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b356:	6a3b      	ldr	r3, [r7, #32]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3728      	adds	r7, #40	; 0x28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bc90      	pop	{r4, r7}
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	0800c05c 	.word	0x0800c05c
 800b368:	0800c06c 	.word	0x0800c06c
 800b36c:	40021000 	.word	0x40021000
 800b370:	007a1200 	.word	0x007a1200
 800b374:	003d0900 	.word	0x003d0900

0800b378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b37c:	4b02      	ldr	r3, [pc, #8]	; (800b388 <HAL_RCC_GetHCLKFreq+0x10>)
 800b37e:	681b      	ldr	r3, [r3, #0]
}
 800b380:	4618      	mov	r0, r3
 800b382:	46bd      	mov	sp, r7
 800b384:	bc80      	pop	{r7}
 800b386:	4770      	bx	lr
 800b388:	20000000 	.word	0x20000000

0800b38c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b390:	f7ff fff2 	bl	800b378 <HAL_RCC_GetHCLKFreq>
 800b394:	4601      	mov	r1, r0
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	0a1b      	lsrs	r3, r3, #8
 800b39c:	f003 0307 	and.w	r3, r3, #7
 800b3a0:	4a03      	ldr	r2, [pc, #12]	; (800b3b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b3a2:	5cd3      	ldrb	r3, [r2, r3]
 800b3a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	40021000 	.word	0x40021000
 800b3b0:	0800c080 	.word	0x0800c080

0800b3b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b3b8:	f7ff ffde 	bl	800b378 <HAL_RCC_GetHCLKFreq>
 800b3bc:	4601      	mov	r1, r0
 800b3be:	4b05      	ldr	r3, [pc, #20]	; (800b3d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	0adb      	lsrs	r3, r3, #11
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	4a03      	ldr	r2, [pc, #12]	; (800b3d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3ca:	5cd3      	ldrb	r3, [r2, r3]
 800b3cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	40021000 	.word	0x40021000
 800b3d8:	0800c080 	.word	0x0800c080

0800b3dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	; (800b410 <RCC_Delay+0x34>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a0a      	ldr	r2, [pc, #40]	; (800b414 <RCC_Delay+0x38>)
 800b3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ee:	0a5b      	lsrs	r3, r3, #9
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	fb02 f303 	mul.w	r3, r2, r3
 800b3f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b3f8:	bf00      	nop
  }
  while (Delay --);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	1e5a      	subs	r2, r3, #1
 800b3fe:	60fa      	str	r2, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1f9      	bne.n	800b3f8 <RCC_Delay+0x1c>
}
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	bc80      	pop	{r7}
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	20000000 	.word	0x20000000
 800b414:	10624dd3 	.word	0x10624dd3

0800b418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e03f      	b.n	800b4aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d106      	bne.n	800b444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7fe fbb8 	bl	8009bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2224      	movs	r2, #36	; 0x24
 800b448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	6812      	ldr	r2, [r2, #0]
 800b454:	68d2      	ldr	r2, [r2, #12]
 800b456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b45a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fcd9 	bl	800be14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	6912      	ldr	r2, [r2, #16]
 800b46c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	6812      	ldr	r2, [r2, #0]
 800b47a:	6952      	ldr	r2, [r2, #20]
 800b47c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	6812      	ldr	r2, [r2, #0]
 800b48a:	68d2      	ldr	r2, [r2, #12]
 800b48c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2220      	movs	r2, #32
 800b49c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2220      	movs	r2, #32
 800b4a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e01e      	b.n	800b502 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2224      	movs	r2, #36	; 0x24
 800b4c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6812      	ldr	r2, [r2, #0]
 800b4d4:	68d2      	ldr	r2, [r2, #12]
 800b4d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4da:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7fe fbfd 	bl	8009cdc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b088      	sub	sp, #32
 800b50e:	af02      	add	r7, sp, #8
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	60b9      	str	r1, [r7, #8]
 800b514:	603b      	str	r3, [r7, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b20      	cmp	r3, #32
 800b528:	f040 8082 	bne.w	800b630 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <HAL_UART_Transmit+0x2e>
 800b532:	88fb      	ldrh	r3, [r7, #6]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e07a      	b.n	800b632 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b542:	2b01      	cmp	r3, #1
 800b544:	d101      	bne.n	800b54a <HAL_UART_Transmit+0x40>
 800b546:	2302      	movs	r3, #2
 800b548:	e073      	b.n	800b632 <HAL_UART_Transmit+0x128>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2221      	movs	r2, #33	; 0x21
 800b55c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b560:	f7fe fc5e 	bl	8009e20 <HAL_GetTick>
 800b564:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	88fa      	ldrh	r2, [r7, #6]
 800b56a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	88fa      	ldrh	r2, [r7, #6]
 800b570:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b572:	e041      	b.n	800b5f8 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b578:	b29b      	uxth	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b58a:	d121      	bne.n	800b5d0 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2200      	movs	r2, #0
 800b594:	2180      	movs	r1, #128	; 0x80
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 fabe 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e045      	b.n	800b632 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	8812      	ldrh	r2, [r2, #0]
 800b5b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5b6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d103      	bne.n	800b5c8 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	60bb      	str	r3, [r7, #8]
 800b5c6:	e017      	b.n	800b5f8 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	60bb      	str	r3, [r7, #8]
 800b5ce:	e013      	b.n	800b5f8 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2180      	movs	r1, #128	; 0x80
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 fa9c 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e023      	b.n	800b632 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	1c59      	adds	r1, r3, #1
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1b8      	bne.n	800b574 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2200      	movs	r2, #0
 800b60a:	2140      	movs	r1, #64	; 0x40
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fa83 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e00a      	b.n	800b632 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2220      	movs	r2, #32
 800b620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e000      	b.n	800b632 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800b630:	2302      	movs	r3, #2
  }
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b085      	sub	sp, #20
 800b63e:	af00      	add	r7, sp, #0
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	60b9      	str	r1, [r7, #8]
 800b644:	4613      	mov	r3, r2
 800b646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b20      	cmp	r3, #32
 800b652:	d140      	bne.n	800b6d6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <HAL_UART_Receive_IT+0x26>
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e039      	b.n	800b6d8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d101      	bne.n	800b672 <HAL_UART_Receive_IT+0x38>
 800b66e:	2302      	movs	r3, #2
 800b670:	e032      	b.n	800b6d8 <HAL_UART_Receive_IT+0x9e>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	88fa      	ldrh	r2, [r7, #6]
 800b684:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	88fa      	ldrh	r2, [r7, #6]
 800b68a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2222      	movs	r2, #34	; 0x22
 800b696:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	6812      	ldr	r2, [r2, #0]
 800b6aa:	68d2      	ldr	r2, [r2, #12]
 800b6ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6b0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	6812      	ldr	r2, [r2, #0]
 800b6ba:	6952      	ldr	r2, [r2, #20]
 800b6bc:	f042 0201 	orr.w	r2, r2, #1
 800b6c0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	6812      	ldr	r2, [r2, #0]
 800b6ca:	68d2      	ldr	r2, [r2, #12]
 800b6cc:	f042 0220 	orr.w	r2, r2, #32
 800b6d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e000      	b.n	800b6d8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b6d6:	2302      	movs	r3, #2
  }
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bc80      	pop	{r7}
 800b6e0:	4770      	bx	lr
	...

0800b6e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d166      	bne.n	800b7cc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <HAL_UART_Receive_DMA+0x26>
 800b704:	88fb      	ldrh	r3, [r7, #6]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e05f      	b.n	800b7ce <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b714:	2b01      	cmp	r3, #1
 800b716:	d101      	bne.n	800b71c <HAL_UART_Receive_DMA+0x38>
 800b718:	2302      	movs	r3, #2
 800b71a:	e058      	b.n	800b7ce <HAL_UART_Receive_DMA+0xea>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	88fa      	ldrh	r2, [r7, #6]
 800b72e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2222      	movs	r2, #34	; 0x22
 800b73a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b742:	4a25      	ldr	r2, [pc, #148]	; (800b7d8 <HAL_UART_Receive_DMA+0xf4>)
 800b744:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74a:	4a24      	ldr	r2, [pc, #144]	; (800b7dc <HAL_UART_Receive_DMA+0xf8>)
 800b74c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	4a23      	ldr	r2, [pc, #140]	; (800b7e0 <HAL_UART_Receive_DMA+0xfc>)
 800b754:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75a:	2200      	movs	r2, #0
 800b75c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800b75e:	f107 0308 	add.w	r3, r7, #8
 800b762:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3304      	adds	r3, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	88fb      	ldrh	r3, [r7, #6]
 800b776:	f7fe fcf3 	bl	800a160 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b77a:	2300      	movs	r3, #0
 800b77c:	613b      	str	r3, [r7, #16]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	613b      	str	r3, [r7, #16]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	613b      	str	r3, [r7, #16]
 800b78e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	6812      	ldr	r2, [r2, #0]
 800b7a0:	68d2      	ldr	r2, [r2, #12]
 800b7a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	6812      	ldr	r2, [r2, #0]
 800b7b0:	6952      	ldr	r2, [r2, #20]
 800b7b2:	f042 0201 	orr.w	r2, r2, #1
 800b7b6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	6812      	ldr	r2, [r2, #0]
 800b7c0:	6952      	ldr	r2, [r2, #20]
 800b7c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7c6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	e000      	b.n	800b7ce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b7cc:	2302      	movs	r3, #2
  }
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	0800ba01 	.word	0x0800ba01
 800b7dc:	0800ba69 	.word	0x0800ba69
 800b7e0:	0800ba85 	.word	0x0800ba85

0800b7e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b804:	2300      	movs	r3, #0
 800b806:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b808:	2300      	movs	r3, #0
 800b80a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	f003 030f 	and.w	r3, r3, #15
 800b812:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10d      	bne.n	800b836 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	f003 0320 	and.w	r3, r3, #32
 800b820:	2b00      	cmp	r3, #0
 800b822:	d008      	beq.n	800b836 <HAL_UART_IRQHandler+0x52>
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	f003 0320 	and.w	r3, r3, #32
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa6e 	bl	800bd10 <UART_Receive_IT>
      return;
 800b834:	e0cc      	b.n	800b9d0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 80ab 	beq.w	800b994 <HAL_UART_IRQHandler+0x1b0>
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d105      	bne.n	800b854 <HAL_UART_IRQHandler+0x70>
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 80a0 	beq.w	800b994 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00a      	beq.n	800b874 <HAL_UART_IRQHandler+0x90>
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b864:	2b00      	cmp	r3, #0
 800b866:	d005      	beq.n	800b874 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86c:	f043 0201 	orr.w	r2, r3, #1
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f003 0304 	and.w	r3, r3, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <HAL_UART_IRQHandler+0xb0>
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d005      	beq.n	800b894 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88c:	f043 0202 	orr.w	r2, r3, #2
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	f003 0302 	and.w	r3, r3, #2
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <HAL_UART_IRQHandler+0xd0>
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d005      	beq.n	800b8b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ac:	f043 0204 	orr.w	r2, r3, #4
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	f003 0308 	and.w	r3, r3, #8
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <HAL_UART_IRQHandler+0xf0>
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d005      	beq.n	800b8d4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8cc:	f043 0208 	orr.w	r2, r3, #8
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d078      	beq.n	800b9ce <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	f003 0320 	and.w	r3, r3, #32
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d007      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x112>
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	f003 0320 	and.w	r3, r3, #32
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fa0d 	bl	800bd10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b900:	2b00      	cmp	r3, #0
 800b902:	bf14      	ite	ne
 800b904:	2301      	movne	r3, #1
 800b906:	2300      	moveq	r3, #0
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b910:	f003 0308 	and.w	r3, r3, #8
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <HAL_UART_IRQHandler+0x13a>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d031      	beq.n	800b982 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f959 	bl	800bbd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d023      	beq.n	800b97a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6812      	ldr	r2, [r2, #0]
 800b93a:	6952      	ldr	r2, [r2, #20]
 800b93c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b940:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b946:	2b00      	cmp	r3, #0
 800b948:	d013      	beq.n	800b972 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94e:	4a22      	ldr	r2, [pc, #136]	; (800b9d8 <HAL_UART_IRQHandler+0x1f4>)
 800b950:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe fc62 	bl	800a220 <HAL_DMA_Abort_IT>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d016      	beq.n	800b990 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b96c:	4610      	mov	r0, r2
 800b96e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b970:	e00e      	b.n	800b990 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7fe f8fc 	bl	8009b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b978:	e00a      	b.n	800b990 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7fe f8f8 	bl	8009b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b980:	e006      	b.n	800b990 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7fe f8f4 	bl	8009b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b98e:	e01e      	b.n	800b9ce <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b990:	bf00      	nop
    return;
 800b992:	e01c      	b.n	800b9ce <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d008      	beq.n	800b9b0 <HAL_UART_IRQHandler+0x1cc>
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d003      	beq.n	800b9b0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f945 	bl	800bc38 <UART_Transmit_IT>
    return;
 800b9ae:	e00f      	b.n	800b9d0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <HAL_UART_IRQHandler+0x1ec>
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d005      	beq.n	800b9d0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f98b 	bl	800bce0 <UART_EndTransmit_IT>
    return;
 800b9ca:	bf00      	nop
 800b9cc:	e000      	b.n	800b9d0 <HAL_UART_IRQHandler+0x1ec>
    return;
 800b9ce:	bf00      	nop
  }
}
 800b9d0:	3720      	adds	r7, #32
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	0800bc11 	.word	0x0800bc11

0800b9dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr

0800b9ee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b9f6:	bf00      	nop
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bc80      	pop	{r7}
 800b9fe:	4770      	bx	lr

0800ba00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 0320 	and.w	r3, r3, #32
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d11e      	bne.n	800ba5a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	6812      	ldr	r2, [r2, #0]
 800ba2a:	68d2      	ldr	r2, [r2, #12]
 800ba2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba30:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	6812      	ldr	r2, [r2, #0]
 800ba3a:	6952      	ldr	r2, [r2, #20]
 800ba3c:	f022 0201 	bic.w	r2, r2, #1
 800ba40:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	6952      	ldr	r2, [r2, #20]
 800ba4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba50:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7fe f876 	bl	8009b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba60:	bf00      	nop
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f7ff ffb9 	bl	800b9ee <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	bf14      	ite	ne
 800baa4:	2301      	movne	r3, #1
 800baa6:	2300      	moveq	r3, #0
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b21      	cmp	r3, #33	; 0x21
 800bab6:	d108      	bne.n	800baca <UART_DMAError+0x46>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d005      	beq.n	800baca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2200      	movs	r2, #0
 800bac2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bac4:	68b8      	ldr	r0, [r7, #8]
 800bac6:	f000 f871 	bl	800bbac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bf14      	ite	ne
 800bad8:	2301      	movne	r3, #1
 800bada:	2300      	moveq	r3, #0
 800badc:	b2db      	uxtb	r3, r3
 800bade:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b22      	cmp	r3, #34	; 0x22
 800baea:	d108      	bne.n	800bafe <UART_DMAError+0x7a>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d005      	beq.n	800bafe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2200      	movs	r2, #0
 800baf6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800baf8:	68b8      	ldr	r0, [r7, #8]
 800bafa:	f000 f86c 	bl	800bbd6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb02:	f043 0210 	orr.w	r2, r3, #16
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb0a:	68b8      	ldr	r0, [r7, #8]
 800bb0c:	f7fe f830 	bl	8009b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb10:	bf00      	nop
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	4613      	mov	r3, r2
 800bb26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb28:	e02c      	b.n	800bb84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb30:	d028      	beq.n	800bb84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d007      	beq.n	800bb48 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb38:	f7fe f972 	bl	8009e20 <HAL_GetTick>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	1ad2      	subs	r2, r2, r3
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d91d      	bls.n	800bb84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	6812      	ldr	r2, [r2, #0]
 800bb50:	68d2      	ldr	r2, [r2, #12]
 800bb52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	6812      	ldr	r2, [r2, #0]
 800bb60:	6952      	ldr	r2, [r2, #20]
 800bb62:	f022 0201 	bic.w	r2, r2, #1
 800bb66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e00f      	b.n	800bba4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	401a      	ands	r2, r3
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	bf0c      	ite	eq
 800bb94:	2301      	moveq	r3, #1
 800bb96:	2300      	movne	r3, #0
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d0c3      	beq.n	800bb2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	68d2      	ldr	r2, [r2, #12]
 800bbbe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bbc2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2220      	movs	r2, #32
 800bbc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bc80      	pop	{r7}
 800bbd4:	4770      	bx	lr

0800bbd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	6812      	ldr	r2, [r2, #0]
 800bbe6:	68d2      	ldr	r2, [r2, #12]
 800bbe8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bbec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	6952      	ldr	r2, [r2, #20]
 800bbf8:	f022 0201 	bic.w	r2, r2, #1
 800bbfc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2220      	movs	r2, #32
 800bc02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bc80      	pop	{r7}
 800bc0e:	4770      	bx	lr

0800bc10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f7fd ffa0 	bl	8009b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc30:	bf00      	nop
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b21      	cmp	r3, #33	; 0x21
 800bc4a:	d143      	bne.n	800bcd4 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc54:	d119      	bne.n	800bc8a <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	8812      	ldrh	r2, [r2, #0]
 800bc64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc68:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d105      	bne.n	800bc7e <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	1c9a      	adds	r2, r3, #2
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	621a      	str	r2, [r3, #32]
 800bc7c:	e00e      	b.n	800bc9c <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	621a      	str	r2, [r3, #32]
 800bc88:	e008      	b.n	800bc9c <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	1c58      	adds	r0, r3, #1
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	6208      	str	r0, [r1, #32]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	3b01      	subs	r3, #1
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10f      	bne.n	800bcd0 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	6812      	ldr	r2, [r2, #0]
 800bcb8:	68d2      	ldr	r2, [r2, #12]
 800bcba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	6812      	ldr	r2, [r2, #0]
 800bcc8:	68d2      	ldr	r2, [r2, #12]
 800bcca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	e000      	b.n	800bcd6 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800bcd4:	2302      	movs	r3, #2
  }
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bc80      	pop	{r7}
 800bcde:	4770      	bx	lr

0800bce0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	6812      	ldr	r2, [r2, #0]
 800bcf0:	68d2      	ldr	r2, [r2, #12]
 800bcf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff fe6b 	bl	800b9dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b22      	cmp	r3, #34	; 0x22
 800bd22:	d171      	bne.n	800be08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2c:	d123      	bne.n	800bd76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10e      	bne.n	800bd5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd52:	1c9a      	adds	r2, r3, #2
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	629a      	str	r2, [r3, #40]	; 0x28
 800bd58:	e029      	b.n	800bdae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	629a      	str	r2, [r3, #40]	; 0x28
 800bd74:	e01b      	b.n	800bdae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	1c59      	adds	r1, r3, #1
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	6291      	str	r1, [r2, #40]	; 0x28
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	6812      	ldr	r2, [r2, #0]
 800bd8c:	6852      	ldr	r2, [r2, #4]
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	e00c      	b.n	800bdae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd98:	1c59      	adds	r1, r3, #1
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	6291      	str	r1, [r2, #40]	; 0x28
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	6812      	ldr	r2, [r2, #0]
 800bda2:	6852      	ldr	r2, [r2, #4]
 800bda4:	b2d2      	uxtb	r2, r2
 800bda6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d120      	bne.n	800be04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	6812      	ldr	r2, [r2, #0]
 800bdca:	68d2      	ldr	r2, [r2, #12]
 800bdcc:	f022 0220 	bic.w	r2, r2, #32
 800bdd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6812      	ldr	r2, [r2, #0]
 800bdda:	68d2      	ldr	r2, [r2, #12]
 800bddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bde0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	6812      	ldr	r2, [r2, #0]
 800bdea:	6952      	ldr	r2, [r2, #20]
 800bdec:	f022 0201 	bic.w	r2, r2, #1
 800bdf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7fd fea6 	bl	8009b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	e002      	b.n	800be0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	e000      	b.n	800be0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800be08:	2302      	movs	r3, #2
  }
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be14:	b590      	push	{r4, r7, lr}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	6812      	ldr	r2, [r2, #0]
 800be24:	6912      	ldr	r2, [r2, #16]
 800be26:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	68d2      	ldr	r2, [r2, #12]
 800be2e:	430a      	orrs	r2, r1
 800be30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689a      	ldr	r2, [r3, #8]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	4313      	orrs	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800be52:	f023 030c 	bic.w	r3, r3, #12
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	430b      	orrs	r3, r1
 800be5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	6952      	ldr	r2, [r2, #20]
 800be66:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	6992      	ldr	r2, [r2, #24]
 800be6e:	430a      	orrs	r2, r1
 800be70:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a52      	ldr	r2, [pc, #328]	; (800bfc0 <UART_SetConfig+0x1ac>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d14e      	bne.n	800bf1a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800be7c:	f7ff fa9a 	bl	800b3b4 <HAL_RCC_GetPCLK2Freq>
 800be80:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6819      	ldr	r1, [r3, #0]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009a      	lsls	r2, r3, #2
 800be90:	441a      	add	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	fbb2 f3f3 	udiv	r3, r2, r3
 800be9c:	4a49      	ldr	r2, [pc, #292]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800be9e:	fba2 2303 	umull	r2, r3, r2, r3
 800bea2:	095b      	lsrs	r3, r3, #5
 800bea4:	0118      	lsls	r0, r3, #4
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	4613      	mov	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	009a      	lsls	r2, r3, #2
 800beb0:	441a      	add	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bebc:	4b41      	ldr	r3, [pc, #260]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bebe:	fba3 4302 	umull	r4, r3, r3, r2
 800bec2:	095b      	lsrs	r3, r3, #5
 800bec4:	2464      	movs	r4, #100	; 0x64
 800bec6:	fb04 f303 	mul.w	r3, r4, r3
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	011b      	lsls	r3, r3, #4
 800bece:	3332      	adds	r3, #50	; 0x32
 800bed0:	4a3c      	ldr	r2, [pc, #240]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bed2:	fba2 2303 	umull	r2, r3, r2, r3
 800bed6:	095b      	lsrs	r3, r3, #5
 800bed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bedc:	4418      	add	r0, r3
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009a      	lsls	r2, r3, #2
 800bee8:	441a      	add	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	fbb2 f2f3 	udiv	r2, r2, r3
 800bef4:	4b33      	ldr	r3, [pc, #204]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bef6:	fba3 4302 	umull	r4, r3, r3, r2
 800befa:	095b      	lsrs	r3, r3, #5
 800befc:	2464      	movs	r4, #100	; 0x64
 800befe:	fb04 f303 	mul.w	r3, r4, r3
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	011b      	lsls	r3, r3, #4
 800bf06:	3332      	adds	r3, #50	; 0x32
 800bf08:	4a2e      	ldr	r2, [pc, #184]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bf0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0e:	095b      	lsrs	r3, r3, #5
 800bf10:	f003 030f 	and.w	r3, r3, #15
 800bf14:	4403      	add	r3, r0
 800bf16:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800bf18:	e04d      	b.n	800bfb6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800bf1a:	f7ff fa37 	bl	800b38c <HAL_RCC_GetPCLK1Freq>
 800bf1e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6819      	ldr	r1, [r3, #0]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	4613      	mov	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009a      	lsls	r2, r3, #2
 800bf2e:	441a      	add	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf3a:	4a22      	ldr	r2, [pc, #136]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bf3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf40:	095b      	lsrs	r3, r3, #5
 800bf42:	0118      	lsls	r0, r3, #4
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009a      	lsls	r2, r3, #2
 800bf4e:	441a      	add	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf5a:	4b1a      	ldr	r3, [pc, #104]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bf5c:	fba3 4302 	umull	r4, r3, r3, r2
 800bf60:	095b      	lsrs	r3, r3, #5
 800bf62:	2464      	movs	r4, #100	; 0x64
 800bf64:	fb04 f303 	mul.w	r3, r4, r3
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	3332      	adds	r3, #50	; 0x32
 800bf6e:	4a15      	ldr	r2, [pc, #84]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bf70:	fba2 2303 	umull	r2, r3, r2, r3
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf7a:	4418      	add	r0, r3
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	009a      	lsls	r2, r3, #2
 800bf86:	441a      	add	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf92:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bf94:	fba3 4302 	umull	r4, r3, r3, r2
 800bf98:	095b      	lsrs	r3, r3, #5
 800bf9a:	2464      	movs	r4, #100	; 0x64
 800bf9c:	fb04 f303 	mul.w	r3, r4, r3
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	3332      	adds	r3, #50	; 0x32
 800bfa6:	4a07      	ldr	r2, [pc, #28]	; (800bfc4 <UART_SetConfig+0x1b0>)
 800bfa8:	fba2 2303 	umull	r2, r3, r2, r3
 800bfac:	095b      	lsrs	r3, r3, #5
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	4403      	add	r3, r0
 800bfb4:	608b      	str	r3, [r1, #8]
}
 800bfb6:	bf00      	nop
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd90      	pop	{r4, r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	40013800 	.word	0x40013800
 800bfc4:	51eb851f 	.word	0x51eb851f

0800bfc8 <main>:



#include "main.h"

int main(void){
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  hwInit();
 800bfcc:	f7fd feb0 	bl	8009d30 <hwInit>
  apInit();
 800bfd0:	f7fc f8bc 	bl	800814c <apInit>

  apMain();
 800bfd4:	f7fc f8ca 	bl	800816c <apMain>
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <__libc_init_array>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	2500      	movs	r5, #0
 800bfe4:	4e0c      	ldr	r6, [pc, #48]	; (800c018 <__libc_init_array+0x38>)
 800bfe6:	4c0d      	ldr	r4, [pc, #52]	; (800c01c <__libc_init_array+0x3c>)
 800bfe8:	1ba4      	subs	r4, r4, r6
 800bfea:	10a4      	asrs	r4, r4, #2
 800bfec:	42a5      	cmp	r5, r4
 800bfee:	d109      	bne.n	800c004 <__libc_init_array+0x24>
 800bff0:	f000 f822 	bl	800c038 <_init>
 800bff4:	2500      	movs	r5, #0
 800bff6:	4e0a      	ldr	r6, [pc, #40]	; (800c020 <__libc_init_array+0x40>)
 800bff8:	4c0a      	ldr	r4, [pc, #40]	; (800c024 <__libc_init_array+0x44>)
 800bffa:	1ba4      	subs	r4, r4, r6
 800bffc:	10a4      	asrs	r4, r4, #2
 800bffe:	42a5      	cmp	r5, r4
 800c000:	d105      	bne.n	800c00e <__libc_init_array+0x2e>
 800c002:	bd70      	pop	{r4, r5, r6, pc}
 800c004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c008:	4798      	blx	r3
 800c00a:	3501      	adds	r5, #1
 800c00c:	e7ee      	b.n	800bfec <__libc_init_array+0xc>
 800c00e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c012:	4798      	blx	r3
 800c014:	3501      	adds	r5, #1
 800c016:	e7f2      	b.n	800bffe <__libc_init_array+0x1e>
 800c018:	0800c088 	.word	0x0800c088
 800c01c:	0800c088 	.word	0x0800c088
 800c020:	0800c088 	.word	0x0800c088
 800c024:	0800c08c 	.word	0x0800c08c

0800c028 <memset>:
 800c028:	4603      	mov	r3, r0
 800c02a:	4402      	add	r2, r0
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d100      	bne.n	800c032 <memset+0xa>
 800c030:	4770      	bx	lr
 800c032:	f803 1b01 	strb.w	r1, [r3], #1
 800c036:	e7f9      	b.n	800c02c <memset+0x4>

0800c038 <_init>:
 800c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03a:	bf00      	nop
 800c03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03e:	bc08      	pop	{r3}
 800c040:	469e      	mov	lr, r3
 800c042:	4770      	bx	lr

0800c044 <_fini>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	bf00      	nop
 800c048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c04a:	bc08      	pop	{r3}
 800c04c:	469e      	mov	lr, r3
 800c04e:	4770      	bx	lr
