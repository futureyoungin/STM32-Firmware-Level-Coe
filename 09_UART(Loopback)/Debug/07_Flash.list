
07_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000390c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08003b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000594  20000078  08003ba4  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  2000060c  08003ba4  0002060c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007f45  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002041  00000000  00000000  00027fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009c8  00000000  00000000  0002a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005569  00000000  00000000  0002b270  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c2b  00000000  00000000  000307d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00033404  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002800  00000000  00000000  00033480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a00 	.word	0x08003a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003a00 	.word	0x08003a00

0800014c <apInit>:
  //delay(500);
  //ledOff(0);
}


void apInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8000150:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fe7f 	bl	8000e58 <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <apMain>:


void apMain(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
  while(1){
    if(uartAvailable(_DEF_UART1) > 0){
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fef8 	bl	8000f5c <uartAvailable>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d0f9      	beq.n	8000166 <apMain+0x6>
      uint8_t ch;
      //uartPrintf(_DEF_UART1, "rx : 0x%X\n", uartRead(_DEF_UART1));
      ch = uartRead(_DEF_UART1);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 ff58 	bl	8001028 <uartRead>
 8000178:	4603      	mov	r3, r0
 800017a:	71fb      	strb	r3, [r7, #7]
      if(ch == 'h'){
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2b68      	cmp	r3, #104	; 0x68
 8000180:	d117      	bne.n	80001b2 <apMain+0x52>
        uartPrintf(_DEF_UART1, "h-> help\n");
 8000182:	4918      	ldr	r1, [pc, #96]	; (80001e4 <apMain+0x84>)
 8000184:	2000      	movs	r0, #0
 8000186:	f000 ff71 	bl	800106c <uartPrintf>
        uartPrintf(_DEF_UART1, "e-> erase flash\n");
 800018a:	4917      	ldr	r1, [pc, #92]	; (80001e8 <apMain+0x88>)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 ff6d 	bl	800106c <uartPrintf>
        uartPrintf(_DEF_UART1, "t-> test write\n");
 8000192:	4916      	ldr	r1, [pc, #88]	; (80001ec <apMain+0x8c>)
 8000194:	2000      	movs	r0, #0
 8000196:	f000 ff69 	bl	800106c <uartPrintf>
        uartPrintf(_DEF_UART1, "s-> show write\n");
 800019a:	4915      	ldr	r1, [pc, #84]	; (80001f0 <apMain+0x90>)
 800019c:	2000      	movs	r0, #0
 800019e:	f000 ff65 	bl	800106c <uartPrintf>
        uartPrintf(_DEF_UART1, "v-> verify write\n");
 80001a2:	4914      	ldr	r1, [pc, #80]	; (80001f4 <apMain+0x94>)
 80001a4:	2000      	movs	r0, #0
 80001a6:	f000 ff61 	bl	800106c <uartPrintf>
        uartPrintf(_DEF_UART1, "\n");
 80001aa:	4913      	ldr	r1, [pc, #76]	; (80001f8 <apMain+0x98>)
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 ff5d 	bl	800106c <uartPrintf>
      }
      if(ch=='e'){
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	2b65      	cmp	r3, #101	; 0x65
 80001b6:	d102      	bne.n	80001be <apMain+0x5e>
        runEraseFlash();
 80001b8:	f000 f820 	bl	80001fc <runEraseFlash>
 80001bc:	e7d3      	b.n	8000166 <apMain+0x6>
      }
      else if(ch=='s'){
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	2b73      	cmp	r3, #115	; 0x73
 80001c2:	d102      	bne.n	80001ca <apMain+0x6a>
        runShowFlash();
 80001c4:	f000 f848 	bl	8000258 <runShowFlash>
 80001c8:	e7cd      	b.n	8000166 <apMain+0x6>
      }
      else if(ch=='v'){
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	2b76      	cmp	r3, #118	; 0x76
 80001ce:	d102      	bne.n	80001d6 <apMain+0x76>
        runVerifyEmpty();
 80001d0:	f000 f872 	bl	80002b8 <runVerifyEmpty>
 80001d4:	e7c7      	b.n	8000166 <apMain+0x6>
      }
      else if(ch=='t'){
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b74      	cmp	r3, #116	; 0x74
 80001da:	d1c4      	bne.n	8000166 <apMain+0x6>
        runTestWrite();
 80001dc:	f000 f8aa 	bl	8000334 <runTestWrite>
    if(uartAvailable(_DEF_UART1) > 0){
 80001e0:	e7c1      	b.n	8000166 <apMain+0x6>
 80001e2:	bf00      	nop
 80001e4:	08003a18 	.word	0x08003a18
 80001e8:	08003a24 	.word	0x08003a24
 80001ec:	08003a38 	.word	0x08003a38
 80001f0:	08003a48 	.word	0x08003a48
 80001f4:	08003a58 	.word	0x08003a58
 80001f8:	08003a6c 	.word	0x08003a6c

080001fc <runEraseFlash>:
      }
    }
  }
}

bool runEraseFlash(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  bool ret = true;
 8000202:	2301      	movs	r3, #1
 8000204:	71fb      	strb	r3, [r7, #7]

  uartPrintf(_DEF_UART1, "EraseFlash!");
 8000206:	490f      	ldr	r1, [pc, #60]	; (8000244 <runEraseFlash+0x48>)
 8000208:	2000      	movs	r0, #0
 800020a:	f000 ff2f 	bl	800106c <uartPrintf>
  if(flashErase(flash_addr, flash_size) == true){
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <runEraseFlash+0x4c>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <runEraseFlash+0x50>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4619      	mov	r1, r3
 8000218:	4610      	mov	r0, r2
 800021a:	f000 fbd5 	bl	80009c8 <flashErase>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d004      	beq.n	800022e <runEraseFlash+0x32>
    uartPrintf(_DEF_UART1, "OK\n");
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <runEraseFlash+0x54>)
 8000226:	2000      	movs	r0, #0
 8000228:	f000 ff20 	bl	800106c <uartPrintf>
 800022c:	e005      	b.n	800023a <runEraseFlash+0x3e>
  }
  else{
    uartPrintf(_DEF_UART1, "Fail\n");
 800022e:	4909      	ldr	r1, [pc, #36]	; (8000254 <runEraseFlash+0x58>)
 8000230:	2000      	movs	r0, #0
 8000232:	f000 ff1b 	bl	800106c <uartPrintf>
    ret = false;
 8000236:	2300      	movs	r3, #0
 8000238:	71fb      	strb	r3, [r7, #7]
  }
  return ret;
 800023a:	79fb      	ldrb	r3, [r7, #7]
}
 800023c:	4618      	mov	r0, r3
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	08003a70 	.word	0x08003a70
 8000248:	20000000 	.word	0x20000000
 800024c:	20000004 	.word	0x20000004
 8000250:	08003a7c 	.word	0x08003a7c
 8000254:	08003a80 	.word	0x08003a80

08000258 <runShowFlash>:

bool runShowFlash(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
  bool ret = true;
 800025e:	2301      	movs	r3, #1
 8000260:	72fb      	strb	r3, [r7, #11]
  uint32_t *p_flash = (uint32_t *)flash_addr;
 8000262:	4b12      	ldr	r3, [pc, #72]	; (80002ac <runShowFlash+0x54>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	607b      	str	r3, [r7, #4]

  uartPrintf(_DEF_UART1, "ShowFlash!\n");
 8000268:	4911      	ldr	r1, [pc, #68]	; (80002b0 <runShowFlash+0x58>)
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fefe 	bl	800106c <uartPrintf>

  for(int i=0; i<8; i++){
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	e011      	b.n	800029a <runShowFlash+0x42>
    uartPrintf(_DEF_UART1, "0x%08X : 0x%08X \n", (int)&p_flash[i], p_flash[i]);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	4619      	mov	r1, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	4413      	add	r3, r2
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	460a      	mov	r2, r1
 800028c:	4909      	ldr	r1, [pc, #36]	; (80002b4 <runShowFlash+0x5c>)
 800028e:	2000      	movs	r0, #0
 8000290:	f000 feec 	bl	800106c <uartPrintf>
  for(int i=0; i<8; i++){
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	3301      	adds	r3, #1
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2b07      	cmp	r3, #7
 800029e:	ddea      	ble.n	8000276 <runShowFlash+0x1e>
  }
  return ret;
 80002a0:	7afb      	ldrb	r3, [r7, #11]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000000 	.word	0x20000000
 80002b0:	08003a88 	.word	0x08003a88
 80002b4:	08003a94 	.word	0x08003a94

080002b8 <runVerifyEmpty>:

bool runVerifyEmpty(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
  bool ret = true;
 80002be:	2301      	movs	r3, #1
 80002c0:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t *p_flash = (uint32_t *)flash_addr;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <runVerifyEmpty+0x68>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	607b      	str	r3, [r7, #4]

  uartPrintf(_DEF_UART1, "VerifyEmpty!");
 80002c8:	4916      	ldr	r1, [pc, #88]	; (8000324 <runVerifyEmpty+0x6c>)
 80002ca:	2000      	movs	r0, #0
 80002cc:	f000 fece 	bl	800106c <uartPrintf>

  for(int i=0; i<flash_size/4; i++){
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
 80002d4:	e00d      	b.n	80002f2 <runVerifyEmpty+0x3a>
    if(p_flash[i] != 0xFFFFFFFF){
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	4413      	add	r3, r2
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002e4:	d002      	beq.n	80002ec <runVerifyEmpty+0x34>
      ret = false;
 80002e6:	2300      	movs	r3, #0
 80002e8:	73fb      	strb	r3, [r7, #15]
      break;
 80002ea:	e008      	b.n	80002fe <runVerifyEmpty+0x46>
  for(int i=0; i<flash_size/4; i++){
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <runVerifyEmpty+0x70>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	089a      	lsrs	r2, r3, #2
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d8eb      	bhi.n	80002d6 <runVerifyEmpty+0x1e>
    }
  }

  if(ret == true){
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d004      	beq.n	800030e <runVerifyEmpty+0x56>
    uartPrintf(_DEF_UART1, "OK\n");
 8000304:	4909      	ldr	r1, [pc, #36]	; (800032c <runVerifyEmpty+0x74>)
 8000306:	2000      	movs	r0, #0
 8000308:	f000 feb0 	bl	800106c <uartPrintf>
 800030c:	e003      	b.n	8000316 <runVerifyEmpty+0x5e>
  }
  else{
    uartPrintf(_DEF_UART1, "Fail\n");
 800030e:	4908      	ldr	r1, [pc, #32]	; (8000330 <runVerifyEmpty+0x78>)
 8000310:	2000      	movs	r0, #0
 8000312:	f000 feab 	bl	800106c <uartPrintf>
  }
  return ret;
 8000316:	7bfb      	ldrb	r3, [r7, #15]
}
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000000 	.word	0x20000000
 8000324:	08003aa8 	.word	0x08003aa8
 8000328:	20000004 	.word	0x20000004
 800032c:	08003a7c 	.word	0x08003a7c
 8000330:	08003a80 	.word	0x08003a80

08000334 <runTestWrite>:


bool runTestWrite(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
  bool ret = true;
 800033a:	2301      	movs	r3, #1
 800033c:	73fb      	strb	r3, [r7, #15]
  uint32_t *p_flash = (uint32_t *)flash_addr;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <runTestWrite+0x74>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	60bb      	str	r3, [r7, #8]

  uartPrintf(_DEF_UART1, "TestWrite!");
 8000344:	4919      	ldr	r1, [pc, #100]	; (80003ac <runTestWrite+0x78>)
 8000346:	2000      	movs	r0, #0
 8000348:	f000 fe90 	bl	800106c <uartPrintf>

  for(uint32_t i=0; i<8; i++){
 800034c:	2300      	movs	r3, #0
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	e014      	b.n	800037c <runTestWrite+0x48>
    ret = flashWrite( (uint32_t)&p_flash[i], (uint8_t *)&i, 4);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	4413      	add	r3, r2
 800035a:	4618      	mov	r0, r3
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2204      	movs	r2, #4
 8000360:	4619      	mov	r1, r3
 8000362:	f000 fb77 	bl	8000a54 <flashWrite>
 8000366:	4603      	mov	r3, r0
 8000368:	73fb      	strb	r3, [r7, #15]
    if( ret == false){
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	f083 0301 	eor.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d106      	bne.n	8000384 <runTestWrite+0x50>
  for(uint32_t i=0; i<8; i++){
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3301      	adds	r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b07      	cmp	r3, #7
 8000380:	d9e7      	bls.n	8000352 <runTestWrite+0x1e>
 8000382:	e000      	b.n	8000386 <runTestWrite+0x52>
      break;
 8000384:	bf00      	nop
    }
  }

  if( ret == true){
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d004      	beq.n	8000396 <runTestWrite+0x62>
    uartPrintf(_DEF_UART1, "OK\n");
 800038c:	4908      	ldr	r1, [pc, #32]	; (80003b0 <runTestWrite+0x7c>)
 800038e:	2000      	movs	r0, #0
 8000390:	f000 fe6c 	bl	800106c <uartPrintf>
 8000394:	e003      	b.n	800039e <runTestWrite+0x6a>
  }
  else{
    uartPrintf(_DEF_UART1, "Fail\n");
 8000396:	4907      	ldr	r1, [pc, #28]	; (80003b4 <runTestWrite+0x80>)
 8000398:	2000      	movs	r0, #0
 800039a:	f000 fe67 	bl	800106c <uartPrintf>
  }
  return ret;
 800039e:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000000 	.word	0x20000000
 80003ac:	08003ab8 	.word	0x08003ab8
 80003b0:	08003a7c 	.word	0x08003a7c
 80003b4:	08003a80 	.word	0x08003a80

080003b8 <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 80003be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2228      	movs	r2, #40	; 0x28
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f002 febb 	bl	8003150 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 80003da:	2302      	movs	r3, #2
 80003dc:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ea:	2310      	movs	r3, #16
 80003ec:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80003f2:	2302      	movs	r3, #2
 80003f4:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 80003f6:	2300      	movs	r3, #0
 80003f8:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80003fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fdaa 	bl	8001f5c <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d000      	beq.n	8000410 <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 800040e:	e7fe      	b.n	800040e <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000410:	230f      	movs	r3, #15
 8000412:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	2302      	movs	r3, #2
 8000416:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 8000426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800042a:	2102      	movs	r1, #2
 800042c:	4618      	mov	r0, r3
 800042e:	f002 f815 	bl	800245c <HAL_RCC_ClockConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d000      	beq.n	800043a <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 8000438:	e7fe      	b.n	8000438 <SystemClock_Config+0x80>
  }
}
 800043a:	bf00      	nop
 800043c:	3740      	adds	r7, #64	; 0x40
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <bspInit>:




void bspInit(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
    HAL_Init();
 800044a:	f000 ff39 	bl	80012c0 <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 800044e:	f7ff ffb3 	bl	80003b8 <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <bspInit+0x48>)
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <bspInit+0x48>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <bspInit+0x48>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0304 	and.w	r3, r3, #4
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4a08      	ldr	r2, [pc, #32]	; (800048c <bspInit+0x48>)
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <bspInit+0x48>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f043 0310 	orr.w	r3, r3, #16
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <bspInit+0x48>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0310 	and.w	r3, r3, #16
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000494:	4a15      	ldr	r2, [pc, #84]	; (80004ec <SystemInit+0x5c>)
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <SystemInit+0x5c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004a0:	4912      	ldr	r1, [pc, #72]	; (80004ec <SystemInit+0x5c>)
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <SystemInit+0x5c>)
 80004a4:	685a      	ldr	r2, [r3, #4]
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <SystemInit+0x60>)
 80004a8:	4013      	ands	r3, r2
 80004aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004ac:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <SystemInit+0x5c>)
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <SystemInit+0x5c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004bc:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <SystemInit+0x5c>)
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <SystemInit+0x5c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <SystemInit+0x5c>)
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <SystemInit+0x5c>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SystemInit+0x5c>)
 80004d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <SystemInit+0x64>)
 80004de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000
 80004f0:	f8ff0000 	.word	0xf8ff0000
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004fa:	e003      	b.n	8000504 <LoopCopyDataInit>

080004fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000500:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000502:	3104      	adds	r1, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000508:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800050a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800050c:	d3f6      	bcc.n	80004fc <CopyDataInit>
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000510:	e002      	b.n	8000518 <LoopFillZerobss>

08000512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000514:	f842 3b04 	str.w	r3, [r2], #4

08000518 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800051c:	d3f9      	bcc.n	8000512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800051e:	f7ff ffb7 	bl	8000490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000522:	f002 fdf1 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f002 fde3 	bl	80030f0 <main>
  bx lr
 800052a:	4770      	bx	lr
  ldr r3, =_sidata
 800052c:	08003b2c 	.word	0x08003b2c
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000534:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000538:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800053c:	2000060c 	.word	0x2000060c

08000540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_2_IRQHandler>

08000542 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  Noned
  * @retval None
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <SysTick_Handler>:
  * @param  None
  * @retval None
  */
extern void swtimerISR(void);
void SysTick_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800058e:	f000 fee3 	bl	8001358 <HAL_IncTick>
  swtimerISR();
 8000592:	f000 fb2b 	bl	8000bec <swtimerISR>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 800059a:	b480      	push	{r7}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80005a6:	2301      	movs	r3, #1
 80005a8:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d104      	bne.n	80005d4 <qbufferCreate+0x3a>
    p_node->length = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
    ret = false;
 80005d0:	2300      	movs	r3, #0
 80005d2:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 80005d6:	4618      	mov	r0, r3
 80005d8:	371c      	adds	r7, #28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 80005e0:	b480      	push	{r7}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80005ec:	2301      	movs	r3, #1
 80005ee:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <qbufferWrite+0x1c>
 80005f8:	2300      	movs	r3, #0
 80005fa:	e02d      	b.n	8000658 <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e025      	b.n	800064e <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	429a      	cmp	r2, r3
 8000618:	d101      	bne.n	800061e <qbufferWrite+0x3e>
      next_index = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	429a      	cmp	r2, r3
 8000626:	d00c      	beq.n	8000642 <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	4413      	add	r3, r2
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	440a      	add	r2, r1
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	e002      	b.n	8000648 <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 8000642:	2300      	movs	r3, #0
 8000644:	77fb      	strb	r3, [r7, #31]
      break;
 8000646:	e006      	b.n	8000656 <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3d5      	bcc.n	8000602 <qbufferWrite+0x22>
    }
  }
  return ret;
 8000656:	7ffb      	ldrb	r3, [r7, #31]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3724      	adds	r7, #36	; 0x24
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 8000662:	b480      	push	{r7}
 8000664:	b089      	sub	sp, #36	; 0x24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800066e:	2301      	movs	r3, #1
 8000670:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d101      	bne.n	800067e <qbufferRead+0x1c>
 800067a:	2300      	movs	r3, #0
 800067c:	e02d      	b.n	80006da <qbufferRead+0x78>
  for(i=0; i<length; i++){
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	e025      	b.n	80006d0 <qbufferRead+0x6e>
    index      = p_node->ptr_out;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_out + 1;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	3301      	adds	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the out index is end of the buffer.
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	689a      	ldr	r2, [r3, #8]
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	429a      	cmp	r2, r3
 800069a:	d101      	bne.n	80006a0 <qbufferRead+0x3e>
      next_index = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
    }
    if(index != p_node->ptr_in){      // if the buffer is not empty
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d00c      	beq.n	80006c4 <qbufferRead+0x62>
      p_data[i]       = p_node->p_buf[index];
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	68d1      	ldr	r1, [r2, #12]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	440a      	add	r2, r1
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	701a      	strb	r2, [r3, #0]
      p_node->ptr_out = next_index;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	69ba      	ldr	r2, [r7, #24]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	e002      	b.n	80006ca <qbufferRead+0x68>
    }
    else{                             // if the buffer is empty ERR_EMPTY
      ret = false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	77fb      	strb	r3, [r7, #31]
      break;
 80006c8:	e006      	b.n	80006d8 <qbufferRead+0x76>
  for(i=0; i<length; i++){
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3d5      	bcc.n	8000684 <qbufferRead+0x22>
    }
  }
  return ret;
 80006d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	; 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node){  // How many is there the buffer elements could be used.
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	441a      	add	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	6892      	ldr	r2, [r2, #8]
 8000700:	fbb3 f1f2 	udiv	r1, r3, r2
 8000704:	fb02 f201 	mul.w	r2, r2, r1
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	60fb      	str	r3, [r7, #12]

  return length;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <button_isr>:
  uint32_t released_end_time;
}button_t;

static button_t button_tbl[BUTTON_MAX_CH];

void button_isr(void *arg){
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<BUTTON_MAX_CH; i++){
 8000740:	2300      	movs	r3, #0
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	e09f      	b.n	8000886 <button_isr+0x14e>
    if(buttonGetPressed(i)){
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f905 	bl	8000958 <buttonGetPressed>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d056      	beq.n	8000802 <button_isr+0xca>
      if(button_tbl[i].pressed == false){
 8000754:	7bfa      	ldrb	r2, [r7, #15]
 8000756:	4950      	ldr	r1, [pc, #320]	; (8000898 <button_isr+0x160>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	f083 0301 	eor.w	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d015      	beq.n	800079a <button_isr+0x62>
        button_tbl[i].pressed_event = true;
 800076e:	7bfa      	ldrb	r2, [r7, #15]
 8000770:	4949      	ldr	r1, [pc, #292]	; (8000898 <button_isr+0x160>)
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	440b      	add	r3, r1
 800077c:	3301      	adds	r3, #1
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = millis();
 8000782:	7bfc      	ldrb	r4, [r7, #15]
 8000784:	f000 fd94 	bl	80012b0 <millis>
 8000788:	4601      	mov	r1, r0
 800078a:	4a43      	ldr	r2, [pc, #268]	; (8000898 <button_isr+0x160>)
 800078c:	4623      	mov	r3, r4
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4423      	add	r3, r4
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4413      	add	r3, r2
 8000796:	3304      	adds	r3, #4
 8000798:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = true;
 800079a:	7bfa      	ldrb	r2, [r7, #15]
 800079c:	493e      	ldr	r1, [pc, #248]	; (8000898 <button_isr+0x160>)
 800079e:	4613      	mov	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	4413      	add	r3, r2
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	440b      	add	r3, r1
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 80007ac:	7bfa      	ldrb	r2, [r7, #15]
 80007ae:	493a      	ldr	r1, [pc, #232]	; (8000898 <button_isr+0x160>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	440b      	add	r3, r1
 80007ba:	3302      	adds	r3, #2
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	b298      	uxth	r0, r3
 80007c2:	4935      	ldr	r1, [pc, #212]	; (8000898 <button_isr+0x160>)
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	440b      	add	r3, r1
 80007ce:	3302      	adds	r3, #2
 80007d0:	4602      	mov	r2, r0
 80007d2:	801a      	strh	r2, [r3, #0]

      button_tbl[i].pressed_end_time = millis();
 80007d4:	7bfc      	ldrb	r4, [r7, #15]
 80007d6:	f000 fd6b 	bl	80012b0 <millis>
 80007da:	4601      	mov	r1, r0
 80007dc:	4a2e      	ldr	r2, [pc, #184]	; (8000898 <button_isr+0x160>)
 80007de:	4623      	mov	r3, r4
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4423      	add	r3, r4
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	4413      	add	r3, r2
 80007e8:	3308      	adds	r3, #8
 80007ea:	6019      	str	r1, [r3, #0]
      button_tbl[i].released = false;
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	492a      	ldr	r1, [pc, #168]	; (8000898 <button_isr+0x160>)
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	440b      	add	r3, r1
 80007fa:	330c      	adds	r3, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e03e      	b.n	8000880 <button_isr+0x148>
    }
    else{                                   // not pressed
      if(button_tbl[i].pressed == true){
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	4924      	ldr	r1, [pc, #144]	; (8000898 <button_isr+0x160>)
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d015      	beq.n	8000842 <button_isr+0x10a>
        button_tbl[i].released_event = true;
 8000816:	7bfa      	ldrb	r2, [r7, #15]
 8000818:	491f      	ldr	r1, [pc, #124]	; (8000898 <button_isr+0x160>)
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	440b      	add	r3, r1
 8000824:	330d      	adds	r3, #13
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = millis();
 800082a:	7bfc      	ldrb	r4, [r7, #15]
 800082c:	f000 fd40 	bl	80012b0 <millis>
 8000830:	4601      	mov	r1, r0
 8000832:	4a19      	ldr	r2, [pc, #100]	; (8000898 <button_isr+0x160>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4413      	add	r3, r2
 800083e:	3310      	adds	r3, #16
 8000840:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = false;
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	4914      	ldr	r1, [pc, #80]	; (8000898 <button_isr+0x160>)
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	4910      	ldr	r1, [pc, #64]	; (8000898 <button_isr+0x160>)
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	330c      	adds	r3, #12
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = millis();
 8000868:	7bfc      	ldrb	r4, [r7, #15]
 800086a:	f000 fd21 	bl	80012b0 <millis>
 800086e:	4601      	mov	r1, r0
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <button_isr+0x160>)
 8000872:	4623      	mov	r3, r4
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4423      	add	r3, r4
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4413      	add	r3, r2
 800087c:	3314      	adds	r3, #20
 800087e:	6019      	str	r1, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	3301      	adds	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	2b00      	cmp	r3, #0
 800088a:	f43f af5c 	beq.w	8000746 <button_isr+0xe>
    }
  }
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	20000094 	.word	0x20000094

0800089c <buttonInit>:

void buttonInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af02      	add	r7, sp, #8
  swtimer_handle_t h_button_timer;
  uint32_t i;

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b2:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4824      	ldr	r0, [pc, #144]	; (800094c <buttonInit+0xb0>)
 80008ba:	f001 f921 	bl	8001b00 <HAL_GPIO_Init>

  for(i=0; i<BUTTON_MAX_CH; i++){
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e029      	b.n	8000918 <buttonInit+0x7c>
    button_tbl[i].pressed_cnt    = 0;
 80008c4:	4922      	ldr	r1, [pc, #136]	; (8000950 <buttonInit+0xb4>)
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	3302      	adds	r3, #2
 80008d4:	2200      	movs	r2, #0
 80008d6:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed        = 0;
 80008d8:	491d      	ldr	r1, [pc, #116]	; (8000950 <buttonInit+0xb4>)
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	440b      	add	r3, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released       = 0;
 80008ea:	4919      	ldr	r1, [pc, #100]	; (8000950 <buttonInit+0xb4>)
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	330c      	adds	r3, #12
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 80008fe:	4914      	ldr	r1, [pc, #80]	; (8000950 <buttonInit+0xb4>)
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	440b      	add	r3, r1
 800090c:	330d      	adds	r3, #13
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0d2      	beq.n	80008c4 <buttonInit+0x28>
  }

  h_button_timer = swtimerGetHandle();
 800091e:	f000 fa55 	bl	8000dcc <swtimerGetHandle>
 8000922:	4603      	mov	r3, r0
 8000924:	827b      	strh	r3, [r7, #18]
  swtimerSet(h_button_timer, 1, LOOP_TIME, button_isr, NULL);
 8000926:	8a7b      	ldrh	r3, [r7, #18]
 8000928:	b2d8      	uxtb	r0, r3
 800092a:	2300      	movs	r3, #0
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <buttonInit+0xb8>)
 8000930:	2202      	movs	r2, #2
 8000932:	2101      	movs	r1, #1
 8000934:	f000 f9de 	bl	8000cf4 <swtimerSet>
  swtimerStart(h_button_timer);
 8000938:	8a7b      	ldrh	r3, [r7, #18]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fa1b 	bl	8000d78 <swtimerStart>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40011000 	.word	0x40011000
 8000950:	20000094 	.word	0x20000094
 8000954:	08000739 	.word	0x08000739

08000958 <buttonGetPressed>:
  button_tbl[ch].released_start_time   = 0;
  button_tbl[ch].released_end_time     = 0;
}

bool buttonGetPressed(uint8_t ch)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <buttonGetPressed+0x28>)
 8000968:	f001 fae0 	bl	8001f2c <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <buttonGetPressed+0x1e>
  {
    return true;
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <buttonGetPressed+0x20>
  }
  else
  {
    return false;
 8000976:	2300      	movs	r3, #0
  }
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40011000 	.word	0x40011000

08000984 <flashInit>:
static int32_t getPage(uint32_t Address);



void flashInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  uint32_t i;


  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	e011      	b.n	80009b4 <flashInit+0x30>
  {
    flash_tbl[i].address = 0x08000000 + ( i * FLASH_PAGE_SIZE ); // Main memory Flash module start at 0x08000000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000996:	029a      	lsls	r2, r3, #10
 8000998:	490a      	ldr	r1, [pc, #40]	; (80009c4 <flashInit+0x40>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    flash_tbl[i].length  = FLASH_PAGE_SIZE;                      // 0x400U = 1024 -> 1Kbyte = Page Size.
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <flashInit+0x40>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	4413      	add	r3, r2
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ac:	605a      	str	r2, [r3, #4]
  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3301      	adds	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b7f      	cmp	r3, #127	; 0x7f
 80009b8:	d9ea      	bls.n	8000990 <flashInit+0xc>
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000164 	.word	0x20000164

080009c8 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int32_t first_page = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  int32_t num_page = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t SECTORError = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef EraseInitStruct;



  HAL_FLASH_Unlock();
 80009e4:	f000 fefc 	bl	80017e0 <HAL_FLASH_Unlock>



  first_page = getPage(addr);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f873 	bl	8000ad4 <getPage>
 80009ee:	6238      	str	r0, [r7, #32]
  num_page   = getPage(addr + length - 1) - first_page + 1;
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	3b01      	subs	r3, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f86b 	bl	8000ad4 <getPage>
 80009fe:	4602      	mov	r2, r0
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	3301      	adds	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]


  if (first_page < 0)
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da01      	bge.n	8000a12 <flashErase+0x4a>
  {
    return false;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e01a      	b.n	8000a48 <flashErase+0x80>
  }

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  EraseInitStruct.PageAddress = flash_tbl[first_page].address;
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <flashErase+0x88>)
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a1e:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbPages     = num_page;
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	617b      	str	r3, [r7, #20]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000a24:	f107 0218 	add.w	r2, r7, #24
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 ffbe 	bl	80019b0 <HAL_FLASHEx_Erase>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <flashErase+0x78>
  {
    ret = false;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }


  HAL_FLASH_Lock();
 8000a40:	f000 fef4 	bl	800182c <HAL_FLASH_Lock>


  return ret;
 8000a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000164 	.word	0x20000164

08000a54 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a60:	2301      	movs	r3, #1
 8000a62:	77fb      	strb	r3, [r7, #31]
  uint64_t data;


  // 2byte align
  if (addr%2 != 0)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <flashWrite+0x1e>
  {
    return false;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e02b      	b.n	8000aca <flashWrite+0x76>
  }

  HAL_FLASH_Unlock();
 8000a72:	f000 feb5 	bl	80017e0 <HAL_FLASH_Unlock>

  for (uint32_t i=0; i<length; i += 2)
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	e01f      	b.n	8000abc <flashWrite+0x68>
  {
    data = (p_data[i+1] << 8) | (p_data[i+0] << 0);
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	440a      	add	r2, r1
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000a96:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, data) != HAL_OK)
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	18d1      	adds	r1, r2, r3
 8000aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 fe2b 	bl	8001700 <HAL_FLASH_Program>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <flashWrite+0x62>
    {
      ret = false;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	77fb      	strb	r3, [r7, #31]
      break;
 8000ab4:	e006      	b.n	8000ac4 <flashWrite+0x70>
  for (uint32_t i=0; i<length; i += 2)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d3db      	bcc.n	8000a7c <flashWrite+0x28>
    }
  }


  HAL_FLASH_Lock();
 8000ac4:	f000 feb2 	bl	800182c <HAL_FLASH_Lock>

  return ret;
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}
	...

08000ad4 <getPage>:

static int32_t getPage(uint32_t address)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t i;
  int32_t page = -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	60bb      	str	r3, [r7, #8]


  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e019      	b.n	8000b1c <getPage+0x48>
  {
    if (address >= flash_tbl[i].address && address < (flash_tbl[i].address + flash_tbl[i].length))
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <getPage+0x5c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d80f      	bhi.n	8000b16 <getPage+0x42>
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <getPage+0x5c>)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000afe:	490c      	ldr	r1, [pc, #48]	; (8000b30 <getPage+0x5c>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	440b      	add	r3, r1
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	441a      	add	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d902      	bls.n	8000b16 <getPage+0x42>
    {
      page = i;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	60bb      	str	r3, [r7, #8]
      break;
 8000b14:	e005      	b.n	8000b22 <getPage+0x4e>
  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	d9e2      	bls.n	8000ae8 <getPage+0x14>
    }
  }

  return page;
 8000b22:	68bb      	ldr	r3, [r7, #8]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000164 	.word	0x20000164

08000b34 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 8000b46:	2320      	movs	r3, #32
 8000b48:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <ledInit+0x28>)
 8000b50:	f000 ffd6 	bl	8001b00 <HAL_GPIO_Init>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40010800 	.word	0x40010800

08000b60 <swtimerInit>:

static volatile uint32_t sw_timer_counter      = 0;     // SW Timer Counter
static volatile uint16_t sw_timer_handle_index = 0;
static swtimer_t swtimer_tbl[_HW_DEF_SW_TIMER_MAX];

bool swtimerInit(void){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t execute = 0;

  if(execute == 1){  // if you have already run it,
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <swtimerInit+0x84>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d101      	bne.n	8000b72 <swtimerInit+0x12>
    return false;    // return false.
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e033      	b.n	8000bda <swtimerInit+0x7a>
  }

  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e029      	b.n	8000bcc <swtimerInit+0x6c>
    swtimer_tbl[i].Timer_En = OFF;
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	491b      	ldr	r1, [pc, #108]	; (8000be8 <swtimerInit+0x88>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn = 0;
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	4916      	ldr	r1, [pc, #88]	; (8000be8 <swtimerInit+0x88>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	4911      	ldr	r1, [pc, #68]	; (8000be8 <swtimerInit+0x88>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	3308      	adds	r3, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct = NULL;
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <swtimerInit+0x88>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	330c      	adds	r3, #12
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	d9d2      	bls.n	8000b78 <swtimerInit+0x18>
  }

  execute = 1;
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <swtimerInit+0x84>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
  return true;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000154 	.word	0x20000154
 8000be8:	200000b4 	.word	0x200000b4

08000bec <swtimerISR>:


void swtimerISR(void){    // = Software Timer Interrupt Service Request = SW Timer Interrupt Handler
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  uint8_t i;
  sw_timer_counter++;     // count up
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <swtimerISR+0xfc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a3b      	ldr	r2, [pc, #236]	; (8000ce8 <swtimerISR+0xfc>)
 8000bfa:	6013      	str	r3, [r2, #0]

  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	e063      	b.n	8000cca <swtimerISR+0xde>
    if( swtimer_tbl[i].Timer_En == ON ){                               // If the Timer is enable
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	4939      	ldr	r1, [pc, #228]	; (8000cec <swtimerISR+0x100>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	440b      	add	r3, r1
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d156      	bne.n	8000cc4 <swtimerISR+0xd8>
      swtimer_tbl[i].Timer_Ctn--;                                      // Decount the Timer counter
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	4934      	ldr	r1, [pc, #208]	; (8000cec <swtimerISR+0x100>)
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	440b      	add	r3, r1
 8000c24:	3304      	adds	r3, #4
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	1e59      	subs	r1, r3, #1
 8000c2a:	4830      	ldr	r0, [pc, #192]	; (8000cec <swtimerISR+0x100>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4403      	add	r3, r0
 8000c36:	3304      	adds	r3, #4
 8000c38:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Ctn == 0){                               // If the overflow happens ( because of the short of the timer )
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	492b      	ldr	r1, [pc, #172]	; (8000cec <swtimerISR+0x100>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	3304      	adds	r3, #4
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d139      	bne.n	8000cc4 <swtimerISR+0xd8>
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME){                     // If the Mode is ONE TIME
 8000c50:	79fa      	ldrb	r2, [r7, #7]
 8000c52:	4926      	ldr	r1, [pc, #152]	; (8000cec <swtimerISR+0x100>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	3301      	adds	r3, #1
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d108      	bne.n	8000c78 <swtimerISR+0x8c>
          swtimer_tbl[i].Timer_En = OFF;                               // Timer is Unable
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	4920      	ldr	r1, [pc, #128]	; (8000cec <swtimerISR+0x100>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
        }
        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;          // Initialize the Timer
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	79f9      	ldrb	r1, [r7, #7]
 8000c7c:	481b      	ldr	r0, [pc, #108]	; (8000cec <swtimerISR+0x100>)
 8000c7e:	460b      	mov	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4403      	add	r3, r0
 8000c88:	3308      	adds	r3, #8
 8000c8a:	6819      	ldr	r1, [r3, #0]
 8000c8c:	4817      	ldr	r0, [pc, #92]	; (8000cec <swtimerISR+0x100>)
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4403      	add	r3, r0
 8000c98:	3304      	adds	r3, #4
 8000c9a:	6019      	str	r1, [r3, #0]
        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);          // Run the Timer function
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	4913      	ldr	r1, [pc, #76]	; (8000cec <swtimerISR+0x100>)
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	330c      	adds	r3, #12
 8000cac:	6819      	ldr	r1, [r3, #0]
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <swtimerISR+0x100>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4403      	add	r3, r0
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	4788      	blx	r1
  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d806      	bhi.n	8000cde <swtimerISR+0xf2>
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <swtimerISR+0x104>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d391      	bcc.n	8000c02 <swtimerISR+0x16>
      }
    }
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000ac 	.word	0x200000ac
 8000cec:	200000b4 	.word	0x200000b4
 8000cf0:	200000b0 	.word	0x200000b0

08000cf4 <swtimerSet>:


void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *), void *arg){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	4613      	mov	r3, r2
 8000d04:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	491a      	ldr	r1, [pc, #104]	; (8000d74 <swtimerSet+0x80>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	3301      	adds	r3, #1
 8000d16:	7bba      	ldrb	r2, [r7, #14]
 8000d18:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;
 8000d1a:	7bfa      	ldrb	r2, [r7, #15]
 8000d1c:	4915      	ldr	r1, [pc, #84]	; (8000d74 <swtimerSet+0x80>)
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	330c      	adds	r3, #12
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;
 8000d2e:	7bfa      	ldrb	r2, [r7, #15]
 8000d30:	4910      	ldr	r1, [pc, #64]	; (8000d74 <swtimerSet+0x80>)
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	490b      	ldr	r1, [pc, #44]	; (8000d74 <swtimerSet+0x80>)
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	3304      	adds	r3, #4
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	4906      	ldr	r1, [pc, #24]	; (8000d74 <swtimerSet+0x80>)
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	3308      	adds	r3, #8
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	200000b4 	.word	0x200000b4

08000d78 <swtimerStart>:



void swtimerStart(uint8_t TmrNum){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if(TmrNum < _HW_DEF_SW_TIMER_MAX){
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	d81a      	bhi.n	8000dbe <swtimerStart+0x46>
    swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	79f9      	ldrb	r1, [r7, #7]
 8000d8c:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <swtimerStart+0x50>)
 8000d8e:	460b      	mov	r3, r1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4403      	add	r3, r0
 8000d98:	3308      	adds	r3, #8
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <swtimerStart+0x50>)
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4403      	add	r3, r0
 8000da8:	3304      	adds	r3, #4
 8000daa:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En  = ON;
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <swtimerStart+0x50>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	200000b4 	.word	0x200000b4

08000dcc <swtimerGetHandle>:
void swtimerReset(uint8_t TmrNum){
  swtimer_tbl[TmrNum].Timer_En  = OFF;
  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void){
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <swtimerGetHandle+0x2c>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	80fb      	strh	r3, [r7, #6]
  sw_timer_handle_index++;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <swtimerGetHandle+0x2c>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <swtimerGetHandle+0x2c>)
 8000de6:	801a      	strh	r2, [r3, #0]
  return TmrIndex;
 8000de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200000b0 	.word	0x200000b0

08000dfc <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	e01c      	b.n	8000e42 <uartInit+0x46>
  {
    uart_tbl[i].is_open = false;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <uartInit+0x58>)
 8000e0c:	216c      	movs	r1, #108	; 0x6c
 8000e0e:	fb01 f303 	mul.w	r3, r1, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <uartInit+0x58>)
 8000e1c:	216c      	movs	r1, #108	; 0x6c
 8000e1e:	fb01 f303 	mul.w	r3, r1, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	3309      	adds	r3, #9
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <uartInit+0x58>)
 8000e2e:	216c      	movs	r1, #108	; 0x6c
 8000e30:	fb01 f303 	mul.w	r3, r1, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	3308      	adds	r3, #8
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0df      	beq.n	8000e08 <uartInit+0xc>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000564 	.word	0x20000564

08000e58 <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;
  switch(channel){
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d14a      	bne.n	8000f04 <uartOpen+0xac>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	226c      	movs	r2, #108	; 0x6c
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <uartOpen+0xb8>)
 8000e78:	4413      	add	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <uartOpen+0xbc>)
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
      p_uart->handle.Init.BaudRate   = baud;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	631a      	str	r2, [r3, #48]	; 0x30
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2200      	movs	r2, #0
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2200      	movs	r2, #0
 8000e98:	63da      	str	r2, [r3, #60]	; 0x3c
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	332c      	adds	r3, #44	; 0x2c
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fcbf 	bl	800282e <HAL_UART_DeInit>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <uartOpen+0x64>
        ret = false;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
        break;
 8000eba:	e023      	b.n	8000f04 <uartOpen+0xac>
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	332c      	adds	r3, #44	; 0x2c
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fc67 	bl	8002794 <HAL_UART_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <uartOpen+0x7a>
        ret = false;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
        break;
 8000ed0:	e018      	b.n	8000f04 <uartOpen+0xac>
      }
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f103 001c 	add.w	r0, r3, #28
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <uartOpen+0xc0>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fb59 	bl	800059a <qbufferCreate>

      p_uart->rx_mode = UART_MODE_INTERRUPT;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2201      	movs	r2, #1
 8000eec:	725a      	strb	r2, [r3, #9]
      p_uart->baud    = baud;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f80d 	bl	8000f1c <uartStartRx>
      break;
 8000f02:	bf00      	nop
  }
  return ret;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000564 	.word	0x20000564
 8000f14:	40004400 	.word	0x40004400
 8000f18:	200005d0 	.word	0x200005d0

08000f1c <uartStartRx>:

void uartStartRx(uint8_t channel){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel to uart.
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	226c      	movs	r2, #108	; 0x6c
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <uartStartRx+0x3c>)
 8000f30:	4413      	add	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	7a5b      	ldrb	r3, [r3, #9]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d108      	bne.n	8000f4e <uartStartRx+0x32>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	330a      	adds	r3, #10
 8000f46:	2201      	movs	r2, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f001 fd34 	bl	80029b6 <HAL_UART_Receive_IT>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000564 	.word	0x20000564

08000f5c <uartAvailable>:
    }
  }
  return ret;
}

uint32_t uartAvailable(uint8_t channel){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if(channel >= UART_MAX_CH)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <uartAvailable+0x14>
    return 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e00b      	b.n	8000f88 <uartAvailable+0x2c>
  return qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	226c      	movs	r2, #108	; 0x6c
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	3318      	adds	r3, #24
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <uartAvailable+0x34>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbaf 	bl	80006e4 <qbufferAvailable>
 8000f86:	4603      	mov	r3, r0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000564 	.word	0x20000564

08000f94 <uartFlush>:

void uartFlush(uint8_t channel){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT){
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <uartFlush+0x3c>)
 8000fa2:	216c      	movs	r1, #108	; 0x6c
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	3309      	adds	r3, #9
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10a      	bne.n	8000fc8 <uartFlush+0x34>
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	226c      	movs	r2, #108	; 0x6c
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	3318      	adds	r3, #24
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <uartFlush+0x3c>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fba8 	bl	8000718 <qbufferFlush>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000564 	.word	0x20000564

08000fd4 <uartWrite>:
  }
  return ret;
}


int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uart_t *p_uart = &uart_tbl[channel];
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	226c      	movs	r2, #108	; 0x6c
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <uartWrite+0x50>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	7a5b      	ldrb	r3, [r3, #9]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10e      	bne.n	800101a <uartWrite+0x46>
    if( HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK ){
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b29a      	uxth	r2, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	f001 fc3b 	bl	8002886 <HAL_UART_Transmit>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <uartWrite+0x46>
      ret = length;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800101a:	697b      	ldr	r3, [r7, #20]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000564 	.word	0x20000564

08001028 <uartRead>:

uint8_t uartRead(uint8_t channel){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	72fb      	strb	r3, [r7, #11]
  uart_t *p_uart = &uart_tbl[channel];
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	226c      	movs	r2, #108	; 0x6c
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <uartRead+0x40>)
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	7a5b      	ldrb	r3, [r3, #9]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d107      	bne.n	800105c <uartRead+0x34>
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	331c      	adds	r3, #28
 8001050:	f107 010b 	add.w	r1, r7, #11
 8001054:	2201      	movs	r2, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fb03 	bl	8000662 <qbufferRead>
  }
  return ret;
 800105c:	7afb      	ldrb	r3, [r7, #11]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000564 	.word	0x20000564

0800106c <uartPrintf>:

int32_t uartPrintf(uint8_t channel, const char *fmt, ...){
 800106c:	b40e      	push	{r1, r2, r3}
 800106e:	b580      	push	{r7, lr}
 8001070:	b0c7      	sub	sp, #284	; 0x11c
 8001072:	af00      	add	r7, sp, #0
 8001074:	4602      	mov	r2, r0
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	701a      	strb	r2, [r3, #0]
  int32_t ret = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_list arg;
  va_start(arg, fmt);
 8001080:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int32_t len;
  char print_buffer[256];

  len = vsnprintf(print_buffer, 255, fmt, arg);
 8001088:	f107 000c 	add.w	r0, r7, #12
 800108c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001090:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001094:	21ff      	movs	r1, #255	; 0xff
 8001096:	f002 f88f 	bl	80031b8 <vsniprintf>
 800109a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(arg);

  ret = uartWrite(channel, (uint8_t *)print_buffer, len);
 800109e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff92 	bl	8000fd4 <uartWrite>
 80010b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  return ret;
 80010b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80010be:	46bd      	mov	sp, r7
 80010c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010c4:	b003      	add	sp, #12
 80010c6:	4770      	bx	lr

080010c8 <uartRxHandler>:

void uartRxHandler(uint8_t channel)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	226c      	movs	r2, #108	; 0x6c
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <uartRxHandler+0x4c>)
 80010dc:	4413      	add	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	7a5b      	ldrb	r3, [r3, #9]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d110      	bne.n	800110a <uartRxHandler+0x42>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f103 001c 	add.w	r0, r3, #28
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	330a      	adds	r3, #10
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fa73 	bl	80005e0 <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      uartStartRx(channel);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff09 	bl	8000f1c <uartStartRx>
  }
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000564 	.word	0x20000564

08001118 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff35 	bl	8000f94 <uartFlush>
  uartStartRx(channel);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fef5 	bl	8000f1c <uartStartRx>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_UART_RxCpltCallback+0x20>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d102      	bne.n	8001154 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff ffba 	bl	80010c8 <uartRxHandler>
  }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40004400 	.word	0x40004400

08001160 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 fb60 	bl	800282e <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f001 fb10 	bl	8002794 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_UART_ErrorCallback+0x2c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d102      	bne.n	8001184 <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ffca 	bl	8001118 <uartErrHandler>
  }
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40004400 	.word	0x40004400

08001190 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <USART2_IRQHandler+0x10>)
 8001196:	f001 fc63 	bl	8002a60 <HAL_UART_IRQHandler>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000590 	.word	0x20000590

080011a4 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <HAL_UART_MspInit+0x8c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d137      	bne.n	8001226 <HAL_UART_MspInit+0x82>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <HAL_UART_MspInit+0x90>)
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_UART_MspInit+0x90>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_MspInit+0x90>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ce:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x90>)
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_UART_MspInit+0x90>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_UART_MspInit+0x90>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80011e6:	2304      	movs	r3, #4
 80011e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	480e      	ldr	r0, [pc, #56]	; (8001238 <HAL_UART_MspInit+0x94>)
 80011fe:	f000 fc7f 	bl	8001b00 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8001202:	2308      	movs	r3, #8
 8001204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <HAL_UART_MspInit+0x94>)
 8001212:	f000 fc75 	bl	8001b00 <HAL_GPIO_Init>

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8001216:	2201      	movs	r2, #1
 8001218:	2100      	movs	r1, #0
 800121a:	2026      	movs	r0, #38	; 0x26
 800121c:	f000 f9af 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001220:	2026      	movs	r0, #38	; 0x26
 8001222:	f000 f9c8 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  }
}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800

0800123c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_UART_MspDeInit+0x48>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d116      	bne.n	800127c <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_UART_MspDeInit+0x4c>)
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_UART_MspDeInit+0x4c>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_UART_MspDeInit+0x4c>)
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_UART_MspDeInit+0x4c>)
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001264:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8001266:	2104      	movs	r1, #4
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <HAL_UART_MspDeInit+0x50>)
 800126a:	f000 fda3 	bl	8001db4 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 800126e:	2108      	movs	r1, #8
 8001270:	4806      	ldr	r0, [pc, #24]	; (800128c <HAL_UART_MspDeInit+0x50>)
 8001272:	f000 fd9f 	bl	8001db4 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001276:	2026      	movs	r0, #38	; 0x26
 8001278:	f000 f9ab 	bl	80015d2 <HAL_NVIC_DisableIRQ>
  }
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40004400 	.word	0x40004400
 8001288:	40021000 	.word	0x40021000
 800128c:	40010800 	.word	0x40010800

08001290 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  bspInit();
 8001294:	f7ff f8d6 	bl	8000444 <bspInit>

  swtimerInit();
 8001298:	f7ff fc62 	bl	8000b60 <swtimerInit>
  ledInit();
 800129c:	f7ff fc4a 	bl	8000b34 <ledInit>
  buttonInit();
 80012a0:	f7ff fafc 	bl	800089c <buttonInit>
  uartInit();
 80012a4:	f7ff fdaa 	bl	8000dfc <uartInit>
  flashInit();
 80012a8:	f7ff fb6c 	bl	8000984 <flashInit>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <millis>:
  HAL_Delay(time_ms);
}


uint32_t millis(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012b4:	f000 f862 	bl	800137c <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_Init+0x28>)
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x28>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f949 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	200f      	movs	r0, #15
 80012d8:	f000 f80e 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f000 f806 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f969 	bl	80015ee <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f923 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000008 	.word	0x20000008
 8001350:	20000010 	.word	0x20000010
 8001354:	2000000c 	.word	0x2000000c

08001358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x1c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x20>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_IncTick+0x20>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000010 	.word	0x20000010
 8001378:	200005e0 	.word	0x200005e0

0800137c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_GetTick+0x10>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	200005e0 	.word	0x200005e0

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_EnableIRQ+0x34>)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	095b      	lsrs	r3, r3, #5
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	f002 021f 	and.w	r2, r2, #31
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db10      	blt.n	8001460 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	490b      	ldr	r1, [pc, #44]	; (800146c <__NVIC_DisableIRQ+0x40>)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	f002 021f 	and.w	r2, r2, #31
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	3320      	adds	r3, #32
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800145c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	490d      	ldr	r1, [pc, #52]	; (80014bc <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	4909      	ldr	r1, [pc, #36]	; (80014c0 <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	2201      	movs	r2, #1
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	1e5a      	subs	r2, r3, #1
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	401a      	ands	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150a:	2101      	movs	r1, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	1e59      	subs	r1, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff92 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff0d 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff22 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff92 	bl	80014c4 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff61 	bl	8001470 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff15 	bl	80013f4 <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff23 	bl	800142c <__NVIC_DisableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff94 	bl	8001524 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800161a:	2b02      	cmp	r3, #2
 800161c:	d005      	beq.n	800162a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2204      	movs	r2, #4
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e057      	b.n	80016da <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	f022 020e 	bic.w	r2, r2, #14
 8001638:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800164a:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <HAL_DMA_Abort_IT+0xdc>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_DMA_Abort_IT+0xe0>)
 8001654:	4299      	cmp	r1, r3
 8001656:	d02e      	beq.n	80016b6 <HAL_DMA_Abort_IT+0xae>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_DMA_Abort_IT+0xe4>)
 8001660:	4299      	cmp	r1, r3
 8001662:	d026      	beq.n	80016b2 <HAL_DMA_Abort_IT+0xaa>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_DMA_Abort_IT+0xe8>)
 800166c:	4299      	cmp	r1, r3
 800166e:	d01d      	beq.n	80016ac <HAL_DMA_Abort_IT+0xa4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_DMA_Abort_IT+0xec>)
 8001678:	4299      	cmp	r1, r3
 800167a:	d014      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x9e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_DMA_Abort_IT+0xf0>)
 8001684:	4299      	cmp	r1, r3
 8001686:	d00b      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x98>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_DMA_Abort_IT+0xf4>)
 8001690:	4299      	cmp	r1, r3
 8001692:	d102      	bne.n	800169a <HAL_DMA_Abort_IT+0x92>
 8001694:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001698:	e00e      	b.n	80016b8 <HAL_DMA_Abort_IT+0xb0>
 800169a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169e:	e00b      	b.n	80016b8 <HAL_DMA_Abort_IT+0xb0>
 80016a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a4:	e008      	b.n	80016b8 <HAL_DMA_Abort_IT+0xb0>
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	e005      	b.n	80016b8 <HAL_DMA_Abort_IT+0xb0>
 80016ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b0:	e002      	b.n	80016b8 <HAL_DMA_Abort_IT+0xb0>
 80016b2:	2310      	movs	r3, #16
 80016b4:	e000      	b.n	80016b8 <HAL_DMA_Abort_IT+0xb0>
 80016b6:	2301      	movs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
    } 
  }
  return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020008 	.word	0x40020008
 80016ec:	4002001c 	.word	0x4002001c
 80016f0:	40020030 	.word	0x40020030
 80016f4:	40020044 	.word	0x40020044
 80016f8:	40020058 	.word	0x40020058
 80016fc:	4002006c 	.word	0x4002006c

08001700 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_FLASH_Program+0xd8>)
 800171c:	7e1b      	ldrb	r3, [r3, #24]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_FLASH_Program+0x26>
 8001722:	2302      	movs	r3, #2
 8001724:	e054      	b.n	80017d0 <HAL_FLASH_Program+0xd0>
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_FLASH_Program+0xd8>)
 8001728:	2201      	movs	r2, #1
 800172a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800172c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001730:	f000 f8a8 	bl	8001884 <FLASH_WaitForLastOperation>
 8001734:	4603      	mov	r3, r0
 8001736:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d144      	bne.n	80017c8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001744:	2301      	movs	r3, #1
 8001746:	757b      	strb	r3, [r7, #21]
 8001748:	e007      	b.n	800175a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d102      	bne.n	8001756 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001750:	2302      	movs	r3, #2
 8001752:	757b      	strb	r3, [r7, #21]
 8001754:	e001      	b.n	800175a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001756:	2304      	movs	r3, #4
 8001758:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800175a:	2300      	movs	r3, #0
 800175c:	75bb      	strb	r3, [r7, #22]
 800175e:	e02d      	b.n	80017bc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001760:	7dbb      	ldrb	r3, [r7, #22]
 8001762:	005a      	lsls	r2, r3, #1
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	eb02 0e03 	add.w	lr, r2, r3
 800176a:	7dbb      	ldrb	r3, [r7, #22]
 800176c:	0119      	lsls	r1, r3, #4
 800176e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001772:	f1c1 0620 	rsb	r6, r1, #32
 8001776:	f1a1 0020 	sub.w	r0, r1, #32
 800177a:	fa22 f401 	lsr.w	r4, r2, r1
 800177e:	fa03 f606 	lsl.w	r6, r3, r6
 8001782:	4334      	orrs	r4, r6
 8001784:	fa23 f000 	lsr.w	r0, r3, r0
 8001788:	4304      	orrs	r4, r0
 800178a:	fa23 f501 	lsr.w	r5, r3, r1
 800178e:	b2a3      	uxth	r3, r4
 8001790:	4619      	mov	r1, r3
 8001792:	4670      	mov	r0, lr
 8001794:	f000 f85a 	bl	800184c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001798:	f24c 3050 	movw	r0, #50000	; 0xc350
 800179c:	f000 f872 	bl	8001884 <FLASH_WaitForLastOperation>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_FLASH_Program+0xdc>)
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_FLASH_Program+0xdc>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80017b6:	7dbb      	ldrb	r3, [r7, #22]
 80017b8:	3301      	adds	r3, #1
 80017ba:	75bb      	strb	r3, [r7, #22]
 80017bc:	7dba      	ldrb	r2, [r7, #22]
 80017be:	7d7b      	ldrb	r3, [r7, #21]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3cd      	bcc.n	8001760 <HAL_FLASH_Program+0x60>
 80017c4:	e000      	b.n	80017c8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80017c6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_FLASH_Program+0xd8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	761a      	strb	r2, [r3, #24]

  return status;
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d8:	200005e8 	.word	0x200005e8
 80017dc:	40022000 	.word	0x40022000

080017e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_FLASH_Unlock+0x40>)
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_FLASH_Unlock+0x40>)
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_FLASH_Unlock+0x44>)
 80017fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_FLASH_Unlock+0x40>)
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_FLASH_Unlock+0x48>)
 8001800:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_FLASH_Unlock+0x40>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001812:	79fb      	ldrb	r3, [r7, #7]
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000
 8001824:	45670123 	.word	0x45670123
 8001828:	cdef89ab 	.word	0xcdef89ab

0800182c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_FLASH_Lock+0x1c>)
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_FLASH_Lock+0x1c>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000

0800184c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <FLASH_Program_HalfWord+0x30>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <FLASH_Program_HalfWord+0x34>)
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <FLASH_Program_HalfWord+0x34>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	801a      	strh	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200005e8 	.word	0x200005e8
 8001880:	40022000 	.word	0x40022000

08001884 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff fd76 	bl	800137c <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001892:	e010      	b.n	80018b6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189a:	d00c      	beq.n	80018b6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <FLASH_WaitForLastOperation+0x2e>
 80018a2:	f7ff fd6b 	bl	800137c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad2      	subs	r2, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d901      	bls.n	80018b6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e025      	b.n	8001902 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <FLASH_WaitForLastOperation+0x88>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e8      	bne.n	8001894 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <FLASH_WaitForLastOperation+0x88>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <FLASH_WaitForLastOperation+0x88>)
 80018d0:	2220      	movs	r2, #32
 80018d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <FLASH_WaitForLastOperation+0x88>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10b      	bne.n	80018f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <FLASH_WaitForLastOperation+0x88>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <FLASH_WaitForLastOperation+0x88>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018f8:	f000 f80a 	bl	8001910 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000

08001910 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <FLASH_SetErrorCode+0x9c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <FLASH_SetErrorCode+0x9c>)
 8001930:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <FLASH_SetErrorCode+0x9c>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <FLASH_SetErrorCode+0x9c>)
 8001950:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <FLASH_SetErrorCode+0x9c>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <FLASH_SetErrorCode+0x9c>)
 8001970:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001972:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f240 1201 	movw	r2, #257	; 0x101
 8001984:	4293      	cmp	r3, r2
 8001986:	d106      	bne.n	8001996 <FLASH_SetErrorCode+0x86>
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	61d3      	str	r3, [r2, #28]
}  
 8001994:	e002      	b.n	800199c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <FLASH_SetErrorCode+0x98>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60d3      	str	r3, [r2, #12]
}  
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	200005e8 	.word	0x200005e8

080019b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019c2:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_FLASHEx_Erase+0xd0>)
 80019c4:	7e1b      	ldrb	r3, [r3, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_FLASHEx_Erase+0x1e>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e053      	b.n	8001a76 <HAL_FLASHEx_Erase+0xc6>
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <HAL_FLASHEx_Erase+0xd0>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d116      	bne.n	8001a0a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019e0:	f7ff ff50 	bl	8001884 <FLASH_WaitForLastOperation>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d141      	bne.n	8001a6e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 f84c 	bl	8001a88 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019f4:	f7ff ff46 	bl	8001884 <FLASH_WaitForLastOperation>
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_FLASHEx_Erase+0xd4>)
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_FLASHEx_Erase+0xd4>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f023 0304 	bic.w	r3, r3, #4
 8001a06:	6113      	str	r3, [r2, #16]
 8001a08:	e031      	b.n	8001a6e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a0e:	f7ff ff39 	bl	8001884 <FLASH_WaitForLastOperation>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d12a      	bne.n	8001a6e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	e019      	b.n	8001a5c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f000 f849 	bl	8001ac0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a32:	f7ff ff27 	bl	8001884 <FLASH_WaitForLastOperation>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_FLASHEx_Erase+0xd4>)
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_FLASHEx_Erase+0xd4>)
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	f023 0302 	bic.w	r3, r3, #2
 8001a44:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	601a      	str	r2, [r3, #0]
            break;
 8001a52:	e00c      	b.n	8001a6e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a5a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	029a      	lsls	r2, r3, #10
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d8dc      	bhi.n	8001a28 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_FLASHEx_Erase+0xd0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	761a      	strb	r2, [r3, #24]

  return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200005e8 	.word	0x200005e8
 8001a84:	40022000 	.word	0x40022000

08001a88 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <FLASH_MassErase+0x30>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <FLASH_MassErase+0x34>)
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <FLASH_MassErase+0x34>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <FLASH_MassErase+0x34>)
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <FLASH_MassErase+0x34>)
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aac:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	200005e8 	.word	0x200005e8
 8001abc:	40022000 	.word	0x40022000

08001ac0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <FLASH_PageErase+0x38>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <FLASH_PageErase+0x3c>)
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <FLASH_PageErase+0x3c>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <FLASH_PageErase+0x3c>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <FLASH_PageErase+0x3c>)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <FLASH_PageErase+0x3c>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200005e8 	.word	0x200005e8
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e127      	b.n	8001d64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8116 	bne.w	8001d5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d034      	beq.n	8001ba4 <HAL_GPIO_Init+0xa4>
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d80d      	bhi.n	8001b5a <HAL_GPIO_Init+0x5a>
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d02b      	beq.n	8001b9a <HAL_GPIO_Init+0x9a>
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d804      	bhi.n	8001b50 <HAL_GPIO_Init+0x50>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d031      	beq.n	8001bae <HAL_GPIO_Init+0xae>
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d01c      	beq.n	8001b88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4e:	e048      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d043      	beq.n	8001bdc <HAL_GPIO_Init+0xdc>
 8001b54:	2b11      	cmp	r3, #17
 8001b56:	d01b      	beq.n	8001b90 <HAL_GPIO_Init+0x90>
          break;
 8001b58:	e043      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b5a:	4a89      	ldr	r2, [pc, #548]	; (8001d80 <HAL_GPIO_Init+0x280>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d026      	beq.n	8001bae <HAL_GPIO_Init+0xae>
 8001b60:	4a87      	ldr	r2, [pc, #540]	; (8001d80 <HAL_GPIO_Init+0x280>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d806      	bhi.n	8001b74 <HAL_GPIO_Init+0x74>
 8001b66:	4a87      	ldr	r2, [pc, #540]	; (8001d84 <HAL_GPIO_Init+0x284>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d020      	beq.n	8001bae <HAL_GPIO_Init+0xae>
 8001b6c:	4a86      	ldr	r2, [pc, #536]	; (8001d88 <HAL_GPIO_Init+0x288>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01d      	beq.n	8001bae <HAL_GPIO_Init+0xae>
          break;
 8001b72:	e036      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b74:	4a85      	ldr	r2, [pc, #532]	; (8001d8c <HAL_GPIO_Init+0x28c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0xae>
 8001b7a:	4a85      	ldr	r2, [pc, #532]	; (8001d90 <HAL_GPIO_Init+0x290>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d016      	beq.n	8001bae <HAL_GPIO_Init+0xae>
 8001b80:	4a84      	ldr	r2, [pc, #528]	; (8001d94 <HAL_GPIO_Init+0x294>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0xae>
          break;
 8001b86:	e02c      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e028      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	3304      	adds	r3, #4
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e023      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e01e      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	330c      	adds	r3, #12
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e019      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e012      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	611a      	str	r2, [r3, #16]
          break;
 8001bce:	e008      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	615a      	str	r2, [r3, #20]
          break;
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2bff      	cmp	r3, #255	; 0xff
 8001be6:	d801      	bhi.n	8001bec <HAL_GPIO_Init+0xec>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	e001      	b.n	8001bf0 <HAL_GPIO_Init+0xf0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2bff      	cmp	r3, #255	; 0xff
 8001bf6:	d802      	bhi.n	8001bfe <HAL_GPIO_Init+0xfe>
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x104>
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	3b08      	subs	r3, #8
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	401a      	ands	r2, r3
 8001c16:	6a39      	ldr	r1, [r7, #32]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8096 	beq.w	8001d5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c32:	4a59      	ldr	r2, [pc, #356]	; (8001d98 <HAL_GPIO_Init+0x298>)
 8001c34:	4b58      	ldr	r3, [pc, #352]	; (8001d98 <HAL_GPIO_Init+0x298>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6193      	str	r3, [r2, #24]
 8001c3e:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x298>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c4a:	4a54      	ldr	r2, [pc, #336]	; (8001d9c <HAL_GPIO_Init+0x29c>)
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x19e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4a      	ldr	r2, [pc, #296]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x19a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x196>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a48      	ldr	r2, [pc, #288]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x192>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x1a0>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x1a0>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x1a0>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x1a0>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb0:	493a      	ldr	r1, [pc, #232]	; (8001d9c <HAL_GPIO_Init+0x29c>)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cca:	4939      	ldr	r1, [pc, #228]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cf2:	492f      	ldr	r1, [pc, #188]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
 8001cfe:	e006      	b.n	8001d0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d00:	492b      	ldr	r1, [pc, #172]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d1a:	4925      	ldr	r1, [pc, #148]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d28:	4921      	ldr	r1, [pc, #132]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4013      	ands	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d42:	491b      	ldr	r1, [pc, #108]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60cb      	str	r3, [r1, #12]
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d50:	4917      	ldr	r1, [pc, #92]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	3301      	adds	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f aed0 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001d74:	bf00      	nop
 8001d76:	372c      	adds	r7, #44	; 0x2c
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	10210000 	.word	0x10210000
 8001d84:	10110000 	.word	0x10110000
 8001d88:	10120000 	.word	0x10120000
 8001d8c:	10310000 	.word	0x10310000
 8001d90:	10320000 	.word	0x10320000
 8001d94:	10220000 	.word	0x10220000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	40010800 	.word	0x40010800
 8001da4:	40010c00 	.word	0x40010c00
 8001da8:	40011000 	.word	0x40011000
 8001dac:	40011400 	.word	0x40011400
 8001db0:	40010400 	.word	0x40010400

08001db4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001dc2:	e09a      	b.n	8001efa <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 808e 	beq.w	8001ef4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001dd8:	4a4e      	ldr	r2, [pc, #312]	; (8001f14 <HAL_GPIO_DeInit+0x160>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4013      	ands	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a46      	ldr	r2, [pc, #280]	; (8001f18 <HAL_GPIO_DeInit+0x164>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_DeInit+0x76>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a45      	ldr	r2, [pc, #276]	; (8001f1c <HAL_GPIO_DeInit+0x168>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_DeInit+0x72>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a44      	ldr	r2, [pc, #272]	; (8001f20 <HAL_GPIO_DeInit+0x16c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_DeInit+0x6e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a43      	ldr	r2, [pc, #268]	; (8001f24 <HAL_GPIO_DeInit+0x170>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_DeInit+0x6a>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_DeInit+0x78>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_DeInit+0x78>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_DeInit+0x78>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_DeInit+0x78>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	fa03 f202 	lsl.w	r2, r3, r2
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d132      	bne.n	8001ea4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001e4e:	4831      	ldr	r0, [pc, #196]	; (8001f14 <HAL_GPIO_DeInit+0x160>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	492f      	ldr	r1, [pc, #188]	; (8001f14 <HAL_GPIO_DeInit+0x160>)
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	0892      	lsrs	r2, r2, #2
 8001e5a:	3202      	adds	r2, #2
 8001e5c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	43d2      	mvns	r2, r2
 8001e64:	400a      	ands	r2, r1
 8001e66:	3302      	adds	r3, #2
 8001e68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001e6c:	492e      	ldr	r1, [pc, #184]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4013      	ands	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001e7a:	492b      	ldr	r1, [pc, #172]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001e88:	4927      	ldr	r1, [pc, #156]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e8a:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4013      	ands	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001e96:	4924      	ldr	r1, [pc, #144]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_GPIO_DeInit+0x174>)
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	; 0xff
 8001ea8:	d801      	bhi.n	8001eae <HAL_GPIO_DeInit+0xfa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	e001      	b.n	8001eb2 <HAL_GPIO_DeInit+0xfe>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2bff      	cmp	r3, #255	; 0xff
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_GPIO_DeInit+0x10c>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_DeInit+0x112>
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3b08      	subs	r3, #8
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	210f      	movs	r1, #15
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	2104      	movs	r1, #4
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f47f af5e 	bne.w	8001dc4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3724      	adds	r7, #36	; 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40010000 	.word	0x40010000
 8001f18:	40010800 	.word	0x40010800
 8001f1c:	40010c00 	.word	0x40010c00
 8001f20:	40011000 	.word	0x40011000
 8001f24:	40011400 	.word	0x40011400
 8001f28:	40010400 	.word	0x40010400

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e26c      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7c:	4b92      	ldr	r3, [pc, #584]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f88:	4b8f      	ldr	r3, [pc, #572]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d112      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
 8001f94:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06c      	beq.n	8002088 <HAL_RCC_OscConfig+0x12c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d168      	bne.n	8002088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e246      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x76>
 8001fc4:	4a80      	ldr	r2, [pc, #512]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4a7b      	ldr	r2, [pc, #492]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4a78      	ldr	r2, [pc, #480]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	4b77      	ldr	r3, [pc, #476]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0xbc>
 8001ffe:	4a72      	ldr	r2, [pc, #456]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002000:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4a6f      	ldr	r2, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8002018:	4a6b      	ldr	r2, [pc, #428]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201a:	4b6b      	ldr	r3, [pc, #428]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002026:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff f9a0 	bl	800137c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff f99c 	bl	800137c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1fa      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0xe4>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff f98c 	bl	800137c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff f988 	bl	800137c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1e6      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x10c>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d063      	beq.n	800215e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002096:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d11c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e1ba      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	493d      	ldr	r1, [pc, #244]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	e03a      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff f941 	bl	800137c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fe:	f7ff f93d 	bl	800137c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e19b      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	492a      	ldr	r1, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e015      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f920 	bl	800137c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff f91c 	bl	800137c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e17a      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03a      	beq.n	80021e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d019      	beq.n	80021a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7ff f900 	bl	800137c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff f8fc 	bl	800137c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e15a      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 fada 	bl	8002758 <RCC_Delay>
 80021a4:	e01c      	b.n	80021e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7ff f8e6 	bl	800137c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b2:	e00f      	b.n	80021d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7ff f8e2 	bl	800137c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d908      	bls.n	80021d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e140      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	42420000 	.word	0x42420000
 80021d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e9      	bne.n	80021b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a6 	beq.w	800233a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b97      	ldr	r3, [pc, #604]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4a94      	ldr	r2, [pc, #592]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	4b93      	ldr	r3, [pc, #588]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]
 800220a:	4b91      	ldr	r3, [pc, #580]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4a8b      	ldr	r2, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	4b8a      	ldr	r3, [pc, #552]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7ff f8a3 	bl	800137c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7ff f89f 	bl	800137c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0fd      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x312>
 8002260:	4a7b      	ldr	r2, [pc, #492]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	4b7b      	ldr	r3, [pc, #492]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e02d      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x334>
 8002276:	4a76      	ldr	r2, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	4b75      	ldr	r3, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4a73      	ldr	r2, [pc, #460]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	4b72      	ldr	r3, [pc, #456]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x356>
 8002298:	4a6d      	ldr	r2, [pc, #436]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 80022b2:	4a67      	ldr	r2, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4a64      	ldr	r2, [pc, #400]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f853 	bl	800137c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff f84f 	bl	800137c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0ab      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x37e>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7ff f83d 	bl	800137c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff f839 	bl	800137c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e095      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4a48      	ldr	r2, [pc, #288]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8081 	beq.w	8002446 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4b42      	ldr	r3, [pc, #264]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d061      	beq.n	8002414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d146      	bne.n	80023e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff f80d 	bl	800137c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff f809 	bl	800137c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e067      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	4b35      	ldr	r3, [pc, #212]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d108      	bne.n	80023a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800238e:	4930      	ldr	r1, [pc, #192]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a0:	482b      	ldr	r0, [pc, #172]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a19      	ldr	r1, [r3, #32]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	430b      	orrs	r3, r1
 80023b4:	4313      	orrs	r3, r2
 80023b6:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe ffdd 	bl	800137c <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe ffd9 	bl	800137c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e037      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46a>
 80023e4:	e02f      	b.n	8002446 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ffc6 	bl	800137c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe ffc2 	bl	800137c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e020      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x498>
 8002412:	e018      	b.n	8002446 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e013      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	42420060 	.word	0x42420060

0800245c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d0      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0207 	and.w	r2, r3, #7
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4967      	ldr	r1, [pc, #412]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	4b66      	ldr	r3, [pc, #408]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 0207 	bic.w	r2, r3, #7
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0207 	and.w	r2, r3, #7
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4a59      	ldr	r2, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4a53      	ldr	r2, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4950      	ldr	r1, [pc, #320]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d040      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e073      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06b      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4939      	ldr	r1, [pc, #228]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 0203 	bic.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe ff16 	bl	800137c <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe ff12 	bl	800137c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e053      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0207 	and.w	r2, r3, #7
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4924      	ldr	r1, [pc, #144]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 0207 	bic.w	r2, r3, #7
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0207 	and.w	r2, r3, #7
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4919      	ldr	r1, [pc, #100]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d6:	4912      	ldr	r1, [pc, #72]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4601      	mov	r1, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
 80025fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1cc>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1d0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fe74 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40022000 	.word	0x40022000
 8002620:	40021000 	.word	0x40021000
 8002624:	08003ad8 	.word	0x08003ad8
 8002628:	20000008 	.word	0x20000008
 800262c:	2000000c 	.word	0x2000000c

08002630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	b490      	push	{r4, r7}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002638:	1d3c      	adds	r4, r7, #4
 800263a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x40>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x46>
 800266e:	e02d      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002672:	623b      	str	r3, [r7, #32]
      break;
 8002674:	e02d      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002682:	4413      	add	r3, r2
 8002684:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002688:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c5b      	lsrs	r3, r3, #17
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026a2:	4413      	add	r3, r2
 80026a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ae:	fb02 f203 	mul.w	r2, r2, r3
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	e004      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	623b      	str	r3, [r7, #32]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ce:	623b      	str	r3, [r7, #32]
      break;
 80026d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d2:	6a3b      	ldr	r3, [r7, #32]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc90      	pop	{r4, r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	08003ac4 	.word	0x08003ac4
 80026e4:	08003ad4 	.word	0x08003ad4
 80026e8:	40021000 	.word	0x40021000
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	003d0900 	.word	0x003d0900

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_RCC_GetHCLKFreq+0x10>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800270c:	f7ff fff2 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002710:	4601      	mov	r1, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	08003ae8 	.word	0x08003ae8

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002734:	f7ff ffde 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002738:	4601      	mov	r1, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	0adb      	lsrs	r3, r3, #11
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4a03      	ldr	r2, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	08003ae8 	.word	0x08003ae8

08002758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <RCC_Delay+0x34>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <RCC_Delay+0x38>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0a5b      	lsrs	r3, r3, #9
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002774:	bf00      	nop
  }
  while (Delay --);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	60fa      	str	r2, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <RCC_Delay+0x1c>
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008
 8002790:	10624dd3 	.word	0x10624dd3

08002794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e03f      	b.n	8002826 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fcf2 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2224      	movs	r2, #36	; 0x24
 80027c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	68d2      	ldr	r2, [r2, #12]
 80027d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fbaf 	bl	8002f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	6912      	ldr	r2, [r2, #16]
 80027e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	6952      	ldr	r2, [r2, #20]
 80027f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	68d2      	ldr	r2, [r2, #12]
 8002808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800280c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e01e      	b.n	800287e <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002856:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fe fcef 	bl	800123c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b088      	sub	sp, #32
 800288a:	af02      	add	r7, sp, #8
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	f040 8082 	bne.w	80029ac <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_UART_Transmit+0x2e>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e07a      	b.n	80029ae <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Transmit+0x40>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e073      	b.n	80029ae <HAL_UART_Transmit+0x128>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2221      	movs	r2, #33	; 0x21
 80028d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fd4e 	bl	800137c <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028ee:	e041      	b.n	8002974 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	d121      	bne.n	800294c <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2200      	movs	r2, #0
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f9a9 	bl	8002c6a <UART_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e045      	b.n	80029ae <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002932:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3302      	adds	r3, #2
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	e017      	b.n	8002974 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3301      	adds	r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	e013      	b.n	8002974 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f987 	bl	8002c6a <UART_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e023      	b.n	80029ae <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1c59      	adds	r1, r3, #1
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1b8      	bne.n	80028f0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f96e 	bl	8002c6a <UART_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e00a      	b.n	80029ae <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d140      	bne.n	8002a52 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_UART_Receive_IT+0x26>
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e039      	b.n	8002a54 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Receive_IT+0x38>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e032      	b.n	8002a54 <HAL_UART_Receive_IT+0x9e>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2222      	movs	r2, #34	; 0x22
 8002a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	68d2      	ldr	r2, [r2, #12]
 8002a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a2c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	6952      	ldr	r2, [r2, #20]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	68d2      	ldr	r2, [r2, #12]
 8002a48:	f042 0220 	orr.w	r2, r2, #32
 8002a4c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10d      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x52>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9c4 	bl	8002e38 <UART_Receive_IT>
      return;
 8002ab0:	e0cc      	b.n	8002c4c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80ab 	beq.w	8002c10 <HAL_UART_IRQHandler+0x1b0>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x70>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a0 	beq.w	8002c10 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_UART_IRQHandler+0x90>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_UART_IRQHandler+0xb0>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	f043 0202 	orr.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_UART_IRQHandler+0xd0>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_UART_IRQHandler+0xf0>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	f043 0208 	orr.w	r2, r3, #8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d078      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <HAL_UART_IRQHandler+0x112>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f963 	bl	8002e38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_UART_IRQHandler+0x13a>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d031      	beq.n	8002bfe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8af 	bl	8002cfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d023      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	6952      	ldr	r2, [r2, #20]
 8002bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d013      	beq.n	8002bee <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_UART_IRQHandler+0x1f4>)
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe fd18 	bl	8001608 <HAL_DMA_Abort_IT>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002be8:	4610      	mov	r0, r2
 8002bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	e00e      	b.n	8002c0c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fab6 	bl	8001160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	e00a      	b.n	8002c0c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fab2 	bl	8001160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	e006      	b.n	8002c0c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe faae 	bl	8001160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c0a:	e01e      	b.n	8002c4a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	bf00      	nop
    return;
 8002c0e:	e01c      	b.n	8002c4a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_UART_IRQHandler+0x1cc>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f89b 	bl	8002d60 <UART_Transmit_IT>
    return;
 8002c2a:	e00f      	b.n	8002c4c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_UART_IRQHandler+0x1ec>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8e1 	bl	8002e08 <UART_EndTransmit_IT>
    return;
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002c4a:	bf00      	nop
  }
}
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	08002d39 	.word	0x08002d39

08002c58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7a:	e02c      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d028      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c8a:	f7fe fb77 	bl	800137c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	1ad2      	subs	r2, r2, r3
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d91d      	bls.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	68d2      	ldr	r2, [r2, #12]
 8002ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ca8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	6952      	ldr	r2, [r2, #20]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e00f      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d0c3      	beq.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	68d2      	ldr	r2, [r2, #12]
 8002d10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	6952      	ldr	r2, [r2, #20]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7fe fa04 	bl	8001160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b21      	cmp	r3, #33	; 0x21
 8002d72:	d143      	bne.n	8002dfc <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7c:	d119      	bne.n	8002db2 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	8812      	ldrh	r2, [r2, #0]
 8002d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d90:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	621a      	str	r2, [r3, #32]
 8002da4:	e00e      	b.n	8002dc4 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]
 8002db0:	e008      	b.n	8002dc4 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	1c58      	adds	r0, r3, #1
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	6208      	str	r0, [r1, #32]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10f      	bne.n	8002df8 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	68d2      	ldr	r2, [r2, #12]
 8002de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	68d2      	ldr	r2, [r2, #12]
 8002e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff15 	bl	8002c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b22      	cmp	r3, #34	; 0x22
 8002e4a:	d171      	bne.n	8002f30 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d123      	bne.n	8002e9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10e      	bne.n	8002e82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e80:	e029      	b.n	8002ed6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9c:	e01b      	b.n	8002ed6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6291      	str	r1, [r2, #40]	; 0x28
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	6852      	ldr	r2, [r2, #4]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e00c      	b.n	8002ed6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	1c59      	adds	r1, r3, #1
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6291      	str	r1, [r2, #40]	; 0x28
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	6852      	ldr	r2, [r2, #4]
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d120      	bne.n	8002f2c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	68d2      	ldr	r2, [r2, #12]
 8002ef4:	f022 0220 	bic.w	r2, r2, #32
 8002ef8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	68d2      	ldr	r2, [r2, #12]
 8002f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	6952      	ldr	r2, [r2, #20]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe f90a 	bl	800113c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e002      	b.n	8002f32 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	6912      	ldr	r2, [r2, #16]
 8002f4e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f7a:	f023 030c 	bic.w	r3, r3, #12
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	6952      	ldr	r2, [r2, #20]
 8002f8e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6992      	ldr	r2, [r2, #24]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a52      	ldr	r2, [pc, #328]	; (80030e8 <UART_SetConfig+0x1ac>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d14e      	bne.n	8003042 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fa4:	f7ff fbc4 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8002fa8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6819      	ldr	r1, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009a      	lsls	r2, r3, #2
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	4a49      	ldr	r2, [pc, #292]	; (80030ec <UART_SetConfig+0x1b0>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	0118      	lsls	r0, r3, #4
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	4b41      	ldr	r3, [pc, #260]	; (80030ec <UART_SetConfig+0x1b0>)
 8002fe6:	fba3 4302 	umull	r4, r3, r3, r2
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2464      	movs	r4, #100	; 0x64
 8002fee:	fb04 f303 	mul.w	r3, r4, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	3332      	adds	r3, #50	; 0x32
 8002ff8:	4a3c      	ldr	r2, [pc, #240]	; (80030ec <UART_SetConfig+0x1b0>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003004:	4418      	add	r0, r3
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009a      	lsls	r2, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4b33      	ldr	r3, [pc, #204]	; (80030ec <UART_SetConfig+0x1b0>)
 800301e:	fba3 4302 	umull	r4, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2464      	movs	r4, #100	; 0x64
 8003026:	fb04 f303 	mul.w	r3, r4, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	4a2e      	ldr	r2, [pc, #184]	; (80030ec <UART_SetConfig+0x1b0>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	4403      	add	r3, r0
 800303e:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003040:	e04d      	b.n	80030de <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003042:	f7ff fb61 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003046:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	441a      	add	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	4a22      	ldr	r2, [pc, #136]	; (80030ec <UART_SetConfig+0x1b0>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	0118      	lsls	r0, r3, #4
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009a      	lsls	r2, r3, #2
 8003076:	441a      	add	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <UART_SetConfig+0x1b0>)
 8003084:	fba3 4302 	umull	r4, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	2464      	movs	r4, #100	; 0x64
 800308c:	fb04 f303 	mul.w	r3, r4, r3
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	3332      	adds	r3, #50	; 0x32
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <UART_SetConfig+0x1b0>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a2:	4418      	add	r0, r3
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <UART_SetConfig+0x1b0>)
 80030bc:	fba3 4302 	umull	r4, r3, r3, r2
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	2464      	movs	r4, #100	; 0x64
 80030c4:	fb04 f303 	mul.w	r3, r4, r3
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	3332      	adds	r3, #50	; 0x32
 80030ce:	4a07      	ldr	r2, [pc, #28]	; (80030ec <UART_SetConfig+0x1b0>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4403      	add	r3, r0
 80030dc:	608b      	str	r3, [r1, #8]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40013800 	.word	0x40013800
 80030ec:	51eb851f 	.word	0x51eb851f

080030f0 <main>:



#include "main.h"

int main(void){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  hwInit();
 80030f4:	f7fe f8cc 	bl	8001290 <hwInit>
  apInit();
 80030f8:	f7fd f828 	bl	800014c <apInit>

  apMain();
 80030fc:	f7fd f830 	bl	8000160 <apMain>
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2500      	movs	r5, #0
 800310c:	4e0c      	ldr	r6, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1ba4      	subs	r4, r4, r6
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a5      	cmp	r5, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	f000 fc72 	bl	8003a00 <_init>
 800311c:	2500      	movs	r5, #0
 800311e:	4e0a      	ldr	r6, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1ba4      	subs	r4, r4, r6
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a5      	cmp	r5, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003130:	4798      	blx	r3
 8003132:	3501      	adds	r5, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800313a:	4798      	blx	r3
 800313c:	3501      	adds	r5, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	08003b24 	.word	0x08003b24
 8003144:	08003b24 	.word	0x08003b24
 8003148:	08003b24 	.word	0x08003b24
 800314c:	08003b28 	.word	0x08003b28

08003150 <memset>:
 8003150:	4603      	mov	r3, r0
 8003152:	4402      	add	r2, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <_vsniprintf_r>:
 8003160:	b530      	push	{r4, r5, lr}
 8003162:	1e14      	subs	r4, r2, #0
 8003164:	4605      	mov	r5, r0
 8003166:	b09b      	sub	sp, #108	; 0x6c
 8003168:	4618      	mov	r0, r3
 800316a:	da05      	bge.n	8003178 <_vsniprintf_r+0x18>
 800316c:	238b      	movs	r3, #139	; 0x8b
 800316e:	f04f 30ff 	mov.w	r0, #4294967295
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	b01b      	add	sp, #108	; 0x6c
 8003176:	bd30      	pop	{r4, r5, pc}
 8003178:	f44f 7302 	mov.w	r3, #520	; 0x208
 800317c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003180:	bf0c      	ite	eq
 8003182:	4623      	moveq	r3, r4
 8003184:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003188:	9302      	str	r3, [sp, #8]
 800318a:	9305      	str	r3, [sp, #20]
 800318c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003190:	9100      	str	r1, [sp, #0]
 8003192:	9104      	str	r1, [sp, #16]
 8003194:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003198:	4602      	mov	r2, r0
 800319a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800319c:	4669      	mov	r1, sp
 800319e:	4628      	mov	r0, r5
 80031a0:	f000 f874 	bl	800328c <_svfiprintf_r>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	bfbc      	itt	lt
 80031a8:	238b      	movlt	r3, #139	; 0x8b
 80031aa:	602b      	strlt	r3, [r5, #0]
 80031ac:	2c00      	cmp	r4, #0
 80031ae:	d0e1      	beq.n	8003174 <_vsniprintf_r+0x14>
 80031b0:	2200      	movs	r2, #0
 80031b2:	9b00      	ldr	r3, [sp, #0]
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e7dd      	b.n	8003174 <_vsniprintf_r+0x14>

080031b8 <vsniprintf>:
 80031b8:	b507      	push	{r0, r1, r2, lr}
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	460a      	mov	r2, r1
 80031c0:	4601      	mov	r1, r0
 80031c2:	4803      	ldr	r0, [pc, #12]	; (80031d0 <vsniprintf+0x18>)
 80031c4:	6800      	ldr	r0, [r0, #0]
 80031c6:	f7ff ffcb 	bl	8003160 <_vsniprintf_r>
 80031ca:	b003      	add	sp, #12
 80031cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80031d0:	20000014 	.word	0x20000014

080031d4 <__ssputs_r>:
 80031d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d8:	688e      	ldr	r6, [r1, #8]
 80031da:	4682      	mov	sl, r0
 80031dc:	429e      	cmp	r6, r3
 80031de:	460c      	mov	r4, r1
 80031e0:	4691      	mov	r9, r2
 80031e2:	4698      	mov	r8, r3
 80031e4:	d835      	bhi.n	8003252 <__ssputs_r+0x7e>
 80031e6:	898a      	ldrh	r2, [r1, #12]
 80031e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031ec:	d031      	beq.n	8003252 <__ssputs_r+0x7e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	6825      	ldr	r5, [r4, #0]
 80031f2:	6909      	ldr	r1, [r1, #16]
 80031f4:	1a6f      	subs	r7, r5, r1
 80031f6:	6965      	ldr	r5, [r4, #20]
 80031f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003200:	f108 0301 	add.w	r3, r8, #1
 8003204:	443b      	add	r3, r7
 8003206:	429d      	cmp	r5, r3
 8003208:	bf38      	it	cc
 800320a:	461d      	movcc	r5, r3
 800320c:	0553      	lsls	r3, r2, #21
 800320e:	d531      	bpl.n	8003274 <__ssputs_r+0xa0>
 8003210:	4629      	mov	r1, r5
 8003212:	f000 fb47 	bl	80038a4 <_malloc_r>
 8003216:	4606      	mov	r6, r0
 8003218:	b950      	cbnz	r0, 8003230 <__ssputs_r+0x5c>
 800321a:	230c      	movs	r3, #12
 800321c:	f8ca 3000 	str.w	r3, [sl]
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	f04f 30ff 	mov.w	r0, #4294967295
 8003226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003230:	463a      	mov	r2, r7
 8003232:	6921      	ldr	r1, [r4, #16]
 8003234:	f000 fac4 	bl	80037c0 <memcpy>
 8003238:	89a3      	ldrh	r3, [r4, #12]
 800323a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800323e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003242:	81a3      	strh	r3, [r4, #12]
 8003244:	6126      	str	r6, [r4, #16]
 8003246:	443e      	add	r6, r7
 8003248:	6026      	str	r6, [r4, #0]
 800324a:	4646      	mov	r6, r8
 800324c:	6165      	str	r5, [r4, #20]
 800324e:	1bed      	subs	r5, r5, r7
 8003250:	60a5      	str	r5, [r4, #8]
 8003252:	4546      	cmp	r6, r8
 8003254:	bf28      	it	cs
 8003256:	4646      	movcs	r6, r8
 8003258:	4649      	mov	r1, r9
 800325a:	4632      	mov	r2, r6
 800325c:	6820      	ldr	r0, [r4, #0]
 800325e:	f000 faba 	bl	80037d6 <memmove>
 8003262:	68a3      	ldr	r3, [r4, #8]
 8003264:	2000      	movs	r0, #0
 8003266:	1b9b      	subs	r3, r3, r6
 8003268:	60a3      	str	r3, [r4, #8]
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	441e      	add	r6, r3
 800326e:	6026      	str	r6, [r4, #0]
 8003270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003274:	462a      	mov	r2, r5
 8003276:	f000 fb73 	bl	8003960 <_realloc_r>
 800327a:	4606      	mov	r6, r0
 800327c:	2800      	cmp	r0, #0
 800327e:	d1e1      	bne.n	8003244 <__ssputs_r+0x70>
 8003280:	6921      	ldr	r1, [r4, #16]
 8003282:	4650      	mov	r0, sl
 8003284:	f000 fac2 	bl	800380c <_free_r>
 8003288:	e7c7      	b.n	800321a <__ssputs_r+0x46>
	...

0800328c <_svfiprintf_r>:
 800328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	b09d      	sub	sp, #116	; 0x74
 8003292:	9303      	str	r3, [sp, #12]
 8003294:	898b      	ldrh	r3, [r1, #12]
 8003296:	4680      	mov	r8, r0
 8003298:	061c      	lsls	r4, r3, #24
 800329a:	460d      	mov	r5, r1
 800329c:	4616      	mov	r6, r2
 800329e:	d50f      	bpl.n	80032c0 <_svfiprintf_r+0x34>
 80032a0:	690b      	ldr	r3, [r1, #16]
 80032a2:	b96b      	cbnz	r3, 80032c0 <_svfiprintf_r+0x34>
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	f000 fafd 	bl	80038a4 <_malloc_r>
 80032aa:	6028      	str	r0, [r5, #0]
 80032ac:	6128      	str	r0, [r5, #16]
 80032ae:	b928      	cbnz	r0, 80032bc <_svfiprintf_r+0x30>
 80032b0:	230c      	movs	r3, #12
 80032b2:	f8c8 3000 	str.w	r3, [r8]
 80032b6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ba:	e0c4      	b.n	8003446 <_svfiprintf_r+0x1ba>
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	616b      	str	r3, [r5, #20]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9309      	str	r3, [sp, #36]	; 0x24
 80032c4:	2320      	movs	r3, #32
 80032c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ca:	2330      	movs	r3, #48	; 0x30
 80032cc:	f04f 0b01 	mov.w	fp, #1
 80032d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032d4:	4637      	mov	r7, r6
 80032d6:	463c      	mov	r4, r7
 80032d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d13c      	bne.n	800335a <_svfiprintf_r+0xce>
 80032e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80032e4:	d00b      	beq.n	80032fe <_svfiprintf_r+0x72>
 80032e6:	4653      	mov	r3, sl
 80032e8:	4632      	mov	r2, r6
 80032ea:	4629      	mov	r1, r5
 80032ec:	4640      	mov	r0, r8
 80032ee:	f7ff ff71 	bl	80031d4 <__ssputs_r>
 80032f2:	3001      	adds	r0, #1
 80032f4:	f000 80a2 	beq.w	800343c <_svfiprintf_r+0x1b0>
 80032f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032fa:	4453      	add	r3, sl
 80032fc:	9309      	str	r3, [sp, #36]	; 0x24
 80032fe:	783b      	ldrb	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 809b 	beq.w	800343c <_svfiprintf_r+0x1b0>
 8003306:	2300      	movs	r3, #0
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	9304      	str	r3, [sp, #16]
 800330e:	9307      	str	r3, [sp, #28]
 8003310:	9205      	str	r2, [sp, #20]
 8003312:	9306      	str	r3, [sp, #24]
 8003314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003318:	931a      	str	r3, [sp, #104]	; 0x68
 800331a:	2205      	movs	r2, #5
 800331c:	7821      	ldrb	r1, [r4, #0]
 800331e:	4850      	ldr	r0, [pc, #320]	; (8003460 <_svfiprintf_r+0x1d4>)
 8003320:	f000 fa40 	bl	80037a4 <memchr>
 8003324:	1c67      	adds	r7, r4, #1
 8003326:	9b04      	ldr	r3, [sp, #16]
 8003328:	b9d8      	cbnz	r0, 8003362 <_svfiprintf_r+0xd6>
 800332a:	06d9      	lsls	r1, r3, #27
 800332c:	bf44      	itt	mi
 800332e:	2220      	movmi	r2, #32
 8003330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003334:	071a      	lsls	r2, r3, #28
 8003336:	bf44      	itt	mi
 8003338:	222b      	movmi	r2, #43	; 0x2b
 800333a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800333e:	7822      	ldrb	r2, [r4, #0]
 8003340:	2a2a      	cmp	r2, #42	; 0x2a
 8003342:	d016      	beq.n	8003372 <_svfiprintf_r+0xe6>
 8003344:	2100      	movs	r1, #0
 8003346:	200a      	movs	r0, #10
 8003348:	9a07      	ldr	r2, [sp, #28]
 800334a:	4627      	mov	r7, r4
 800334c:	783b      	ldrb	r3, [r7, #0]
 800334e:	3401      	adds	r4, #1
 8003350:	3b30      	subs	r3, #48	; 0x30
 8003352:	2b09      	cmp	r3, #9
 8003354:	d950      	bls.n	80033f8 <_svfiprintf_r+0x16c>
 8003356:	b1c9      	cbz	r1, 800338c <_svfiprintf_r+0x100>
 8003358:	e011      	b.n	800337e <_svfiprintf_r+0xf2>
 800335a:	2b25      	cmp	r3, #37	; 0x25
 800335c:	d0c0      	beq.n	80032e0 <_svfiprintf_r+0x54>
 800335e:	4627      	mov	r7, r4
 8003360:	e7b9      	b.n	80032d6 <_svfiprintf_r+0x4a>
 8003362:	4a3f      	ldr	r2, [pc, #252]	; (8003460 <_svfiprintf_r+0x1d4>)
 8003364:	463c      	mov	r4, r7
 8003366:	1a80      	subs	r0, r0, r2
 8003368:	fa0b f000 	lsl.w	r0, fp, r0
 800336c:	4318      	orrs	r0, r3
 800336e:	9004      	str	r0, [sp, #16]
 8003370:	e7d3      	b.n	800331a <_svfiprintf_r+0x8e>
 8003372:	9a03      	ldr	r2, [sp, #12]
 8003374:	1d11      	adds	r1, r2, #4
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	9103      	str	r1, [sp, #12]
 800337a:	2a00      	cmp	r2, #0
 800337c:	db01      	blt.n	8003382 <_svfiprintf_r+0xf6>
 800337e:	9207      	str	r2, [sp, #28]
 8003380:	e004      	b.n	800338c <_svfiprintf_r+0x100>
 8003382:	4252      	negs	r2, r2
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	9207      	str	r2, [sp, #28]
 800338a:	9304      	str	r3, [sp, #16]
 800338c:	783b      	ldrb	r3, [r7, #0]
 800338e:	2b2e      	cmp	r3, #46	; 0x2e
 8003390:	d10d      	bne.n	80033ae <_svfiprintf_r+0x122>
 8003392:	787b      	ldrb	r3, [r7, #1]
 8003394:	1c79      	adds	r1, r7, #1
 8003396:	2b2a      	cmp	r3, #42	; 0x2a
 8003398:	d132      	bne.n	8003400 <_svfiprintf_r+0x174>
 800339a:	9b03      	ldr	r3, [sp, #12]
 800339c:	3702      	adds	r7, #2
 800339e:	1d1a      	adds	r2, r3, #4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	9203      	str	r2, [sp, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bfb8      	it	lt
 80033a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80033ac:	9305      	str	r3, [sp, #20]
 80033ae:	4c2d      	ldr	r4, [pc, #180]	; (8003464 <_svfiprintf_r+0x1d8>)
 80033b0:	2203      	movs	r2, #3
 80033b2:	7839      	ldrb	r1, [r7, #0]
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 f9f5 	bl	80037a4 <memchr>
 80033ba:	b138      	cbz	r0, 80033cc <_svfiprintf_r+0x140>
 80033bc:	2340      	movs	r3, #64	; 0x40
 80033be:	1b00      	subs	r0, r0, r4
 80033c0:	fa03 f000 	lsl.w	r0, r3, r0
 80033c4:	9b04      	ldr	r3, [sp, #16]
 80033c6:	3701      	adds	r7, #1
 80033c8:	4303      	orrs	r3, r0
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	7839      	ldrb	r1, [r7, #0]
 80033ce:	2206      	movs	r2, #6
 80033d0:	4825      	ldr	r0, [pc, #148]	; (8003468 <_svfiprintf_r+0x1dc>)
 80033d2:	1c7e      	adds	r6, r7, #1
 80033d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d8:	f000 f9e4 	bl	80037a4 <memchr>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d035      	beq.n	800344c <_svfiprintf_r+0x1c0>
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <_svfiprintf_r+0x1e0>)
 80033e2:	b9fb      	cbnz	r3, 8003424 <_svfiprintf_r+0x198>
 80033e4:	9b03      	ldr	r3, [sp, #12]
 80033e6:	3307      	adds	r3, #7
 80033e8:	f023 0307 	bic.w	r3, r3, #7
 80033ec:	3308      	adds	r3, #8
 80033ee:	9303      	str	r3, [sp, #12]
 80033f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f2:	444b      	add	r3, r9
 80033f4:	9309      	str	r3, [sp, #36]	; 0x24
 80033f6:	e76d      	b.n	80032d4 <_svfiprintf_r+0x48>
 80033f8:	fb00 3202 	mla	r2, r0, r2, r3
 80033fc:	2101      	movs	r1, #1
 80033fe:	e7a4      	b.n	800334a <_svfiprintf_r+0xbe>
 8003400:	2300      	movs	r3, #0
 8003402:	240a      	movs	r4, #10
 8003404:	4618      	mov	r0, r3
 8003406:	9305      	str	r3, [sp, #20]
 8003408:	460f      	mov	r7, r1
 800340a:	783a      	ldrb	r2, [r7, #0]
 800340c:	3101      	adds	r1, #1
 800340e:	3a30      	subs	r2, #48	; 0x30
 8003410:	2a09      	cmp	r2, #9
 8003412:	d903      	bls.n	800341c <_svfiprintf_r+0x190>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ca      	beq.n	80033ae <_svfiprintf_r+0x122>
 8003418:	9005      	str	r0, [sp, #20]
 800341a:	e7c8      	b.n	80033ae <_svfiprintf_r+0x122>
 800341c:	fb04 2000 	mla	r0, r4, r0, r2
 8003420:	2301      	movs	r3, #1
 8003422:	e7f1      	b.n	8003408 <_svfiprintf_r+0x17c>
 8003424:	ab03      	add	r3, sp, #12
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	462a      	mov	r2, r5
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <_svfiprintf_r+0x1e4>)
 800342c:	a904      	add	r1, sp, #16
 800342e:	4640      	mov	r0, r8
 8003430:	f3af 8000 	nop.w
 8003434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003438:	4681      	mov	r9, r0
 800343a:	d1d9      	bne.n	80033f0 <_svfiprintf_r+0x164>
 800343c:	89ab      	ldrh	r3, [r5, #12]
 800343e:	065b      	lsls	r3, r3, #25
 8003440:	f53f af39 	bmi.w	80032b6 <_svfiprintf_r+0x2a>
 8003444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003446:	b01d      	add	sp, #116	; 0x74
 8003448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344c:	ab03      	add	r3, sp, #12
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	462a      	mov	r2, r5
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <_svfiprintf_r+0x1e4>)
 8003454:	a904      	add	r1, sp, #16
 8003456:	4640      	mov	r0, r8
 8003458:	f000 f884 	bl	8003564 <_printf_i>
 800345c:	e7ea      	b.n	8003434 <_svfiprintf_r+0x1a8>
 800345e:	bf00      	nop
 8003460:	08003af0 	.word	0x08003af0
 8003464:	08003af6 	.word	0x08003af6
 8003468:	08003afa 	.word	0x08003afa
 800346c:	00000000 	.word	0x00000000
 8003470:	080031d5 	.word	0x080031d5

08003474 <_printf_common>:
 8003474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	4691      	mov	r9, r2
 800347a:	461f      	mov	r7, r3
 800347c:	688a      	ldr	r2, [r1, #8]
 800347e:	690b      	ldr	r3, [r1, #16]
 8003480:	4606      	mov	r6, r0
 8003482:	4293      	cmp	r3, r2
 8003484:	bfb8      	it	lt
 8003486:	4613      	movlt	r3, r2
 8003488:	f8c9 3000 	str.w	r3, [r9]
 800348c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003490:	460c      	mov	r4, r1
 8003492:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003496:	b112      	cbz	r2, 800349e <_printf_common+0x2a>
 8003498:	3301      	adds	r3, #1
 800349a:	f8c9 3000 	str.w	r3, [r9]
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	0699      	lsls	r1, r3, #26
 80034a2:	bf42      	ittt	mi
 80034a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034a8:	3302      	addmi	r3, #2
 80034aa:	f8c9 3000 	strmi.w	r3, [r9]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	f015 0506 	ands.w	r5, r5, #6
 80034b4:	d107      	bne.n	80034c6 <_printf_common+0x52>
 80034b6:	f104 0a19 	add.w	sl, r4, #25
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	f8d9 2000 	ldr.w	r2, [r9]
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	429d      	cmp	r5, r3
 80034c4:	db2a      	blt.n	800351c <_printf_common+0xa8>
 80034c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	3300      	adds	r3, #0
 80034ce:	bf18      	it	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	0692      	lsls	r2, r2, #26
 80034d4:	d42f      	bmi.n	8003536 <_printf_common+0xc2>
 80034d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034da:	4639      	mov	r1, r7
 80034dc:	4630      	mov	r0, r6
 80034de:	47c0      	blx	r8
 80034e0:	3001      	adds	r0, #1
 80034e2:	d022      	beq.n	800352a <_printf_common+0xb6>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	68e5      	ldr	r5, [r4, #12]
 80034e8:	f003 0306 	and.w	r3, r3, #6
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	bf18      	it	ne
 80034f0:	2500      	movne	r5, #0
 80034f2:	f8d9 2000 	ldr.w	r2, [r9]
 80034f6:	f04f 0900 	mov.w	r9, #0
 80034fa:	bf08      	it	eq
 80034fc:	1aad      	subeq	r5, r5, r2
 80034fe:	68a3      	ldr	r3, [r4, #8]
 8003500:	6922      	ldr	r2, [r4, #16]
 8003502:	bf08      	it	eq
 8003504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003508:	4293      	cmp	r3, r2
 800350a:	bfc4      	itt	gt
 800350c:	1a9b      	subgt	r3, r3, r2
 800350e:	18ed      	addgt	r5, r5, r3
 8003510:	341a      	adds	r4, #26
 8003512:	454d      	cmp	r5, r9
 8003514:	d11b      	bne.n	800354e <_printf_common+0xda>
 8003516:	2000      	movs	r0, #0
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	2301      	movs	r3, #1
 800351e:	4652      	mov	r2, sl
 8003520:	4639      	mov	r1, r7
 8003522:	4630      	mov	r0, r6
 8003524:	47c0      	blx	r8
 8003526:	3001      	adds	r0, #1
 8003528:	d103      	bne.n	8003532 <_printf_common+0xbe>
 800352a:	f04f 30ff 	mov.w	r0, #4294967295
 800352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003532:	3501      	adds	r5, #1
 8003534:	e7c1      	b.n	80034ba <_printf_common+0x46>
 8003536:	2030      	movs	r0, #48	; 0x30
 8003538:	18e1      	adds	r1, r4, r3
 800353a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003544:	4422      	add	r2, r4
 8003546:	3302      	adds	r3, #2
 8003548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800354c:	e7c3      	b.n	80034d6 <_printf_common+0x62>
 800354e:	2301      	movs	r3, #1
 8003550:	4622      	mov	r2, r4
 8003552:	4639      	mov	r1, r7
 8003554:	4630      	mov	r0, r6
 8003556:	47c0      	blx	r8
 8003558:	3001      	adds	r0, #1
 800355a:	d0e6      	beq.n	800352a <_printf_common+0xb6>
 800355c:	f109 0901 	add.w	r9, r9, #1
 8003560:	e7d7      	b.n	8003512 <_printf_common+0x9e>
	...

08003564 <_printf_i>:
 8003564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003568:	4617      	mov	r7, r2
 800356a:	7e0a      	ldrb	r2, [r1, #24]
 800356c:	b085      	sub	sp, #20
 800356e:	2a6e      	cmp	r2, #110	; 0x6e
 8003570:	4698      	mov	r8, r3
 8003572:	4606      	mov	r6, r0
 8003574:	460c      	mov	r4, r1
 8003576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003578:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800357c:	f000 80bc 	beq.w	80036f8 <_printf_i+0x194>
 8003580:	d81a      	bhi.n	80035b8 <_printf_i+0x54>
 8003582:	2a63      	cmp	r2, #99	; 0x63
 8003584:	d02e      	beq.n	80035e4 <_printf_i+0x80>
 8003586:	d80a      	bhi.n	800359e <_printf_i+0x3a>
 8003588:	2a00      	cmp	r2, #0
 800358a:	f000 80c8 	beq.w	800371e <_printf_i+0x1ba>
 800358e:	2a58      	cmp	r2, #88	; 0x58
 8003590:	f000 808a 	beq.w	80036a8 <_printf_i+0x144>
 8003594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003598:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800359c:	e02a      	b.n	80035f4 <_printf_i+0x90>
 800359e:	2a64      	cmp	r2, #100	; 0x64
 80035a0:	d001      	beq.n	80035a6 <_printf_i+0x42>
 80035a2:	2a69      	cmp	r2, #105	; 0x69
 80035a4:	d1f6      	bne.n	8003594 <_printf_i+0x30>
 80035a6:	6821      	ldr	r1, [r4, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80035ae:	d023      	beq.n	80035f8 <_printf_i+0x94>
 80035b0:	1d11      	adds	r1, r2, #4
 80035b2:	6019      	str	r1, [r3, #0]
 80035b4:	6813      	ldr	r3, [r2, #0]
 80035b6:	e027      	b.n	8003608 <_printf_i+0xa4>
 80035b8:	2a73      	cmp	r2, #115	; 0x73
 80035ba:	f000 80b4 	beq.w	8003726 <_printf_i+0x1c2>
 80035be:	d808      	bhi.n	80035d2 <_printf_i+0x6e>
 80035c0:	2a6f      	cmp	r2, #111	; 0x6f
 80035c2:	d02a      	beq.n	800361a <_printf_i+0xb6>
 80035c4:	2a70      	cmp	r2, #112	; 0x70
 80035c6:	d1e5      	bne.n	8003594 <_printf_i+0x30>
 80035c8:	680a      	ldr	r2, [r1, #0]
 80035ca:	f042 0220 	orr.w	r2, r2, #32
 80035ce:	600a      	str	r2, [r1, #0]
 80035d0:	e003      	b.n	80035da <_printf_i+0x76>
 80035d2:	2a75      	cmp	r2, #117	; 0x75
 80035d4:	d021      	beq.n	800361a <_printf_i+0xb6>
 80035d6:	2a78      	cmp	r2, #120	; 0x78
 80035d8:	d1dc      	bne.n	8003594 <_printf_i+0x30>
 80035da:	2278      	movs	r2, #120	; 0x78
 80035dc:	496f      	ldr	r1, [pc, #444]	; (800379c <_printf_i+0x238>)
 80035de:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80035e2:	e064      	b.n	80036ae <_printf_i+0x14a>
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80035ea:	1d11      	adds	r1, r2, #4
 80035ec:	6019      	str	r1, [r3, #0]
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0a3      	b.n	8003740 <_printf_i+0x1dc>
 80035f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80035fc:	f102 0104 	add.w	r1, r2, #4
 8003600:	6019      	str	r1, [r3, #0]
 8003602:	d0d7      	beq.n	80035b4 <_printf_i+0x50>
 8003604:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da03      	bge.n	8003614 <_printf_i+0xb0>
 800360c:	222d      	movs	r2, #45	; 0x2d
 800360e:	425b      	negs	r3, r3
 8003610:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003614:	4962      	ldr	r1, [pc, #392]	; (80037a0 <_printf_i+0x23c>)
 8003616:	220a      	movs	r2, #10
 8003618:	e017      	b.n	800364a <_printf_i+0xe6>
 800361a:	6820      	ldr	r0, [r4, #0]
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003622:	d003      	beq.n	800362c <_printf_i+0xc8>
 8003624:	1d08      	adds	r0, r1, #4
 8003626:	6018      	str	r0, [r3, #0]
 8003628:	680b      	ldr	r3, [r1, #0]
 800362a:	e006      	b.n	800363a <_printf_i+0xd6>
 800362c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003630:	f101 0004 	add.w	r0, r1, #4
 8003634:	6018      	str	r0, [r3, #0]
 8003636:	d0f7      	beq.n	8003628 <_printf_i+0xc4>
 8003638:	880b      	ldrh	r3, [r1, #0]
 800363a:	2a6f      	cmp	r2, #111	; 0x6f
 800363c:	bf14      	ite	ne
 800363e:	220a      	movne	r2, #10
 8003640:	2208      	moveq	r2, #8
 8003642:	4957      	ldr	r1, [pc, #348]	; (80037a0 <_printf_i+0x23c>)
 8003644:	2000      	movs	r0, #0
 8003646:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800364a:	6865      	ldr	r5, [r4, #4]
 800364c:	2d00      	cmp	r5, #0
 800364e:	60a5      	str	r5, [r4, #8]
 8003650:	f2c0 809c 	blt.w	800378c <_printf_i+0x228>
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	f020 0004 	bic.w	r0, r0, #4
 800365a:	6020      	str	r0, [r4, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d13f      	bne.n	80036e0 <_printf_i+0x17c>
 8003660:	2d00      	cmp	r5, #0
 8003662:	f040 8095 	bne.w	8003790 <_printf_i+0x22c>
 8003666:	4675      	mov	r5, lr
 8003668:	2a08      	cmp	r2, #8
 800366a:	d10b      	bne.n	8003684 <_printf_i+0x120>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	07da      	lsls	r2, r3, #31
 8003670:	d508      	bpl.n	8003684 <_printf_i+0x120>
 8003672:	6923      	ldr	r3, [r4, #16]
 8003674:	6862      	ldr	r2, [r4, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	bfde      	ittt	le
 800367a:	2330      	movle	r3, #48	; 0x30
 800367c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003680:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003684:	ebae 0305 	sub.w	r3, lr, r5
 8003688:	6123      	str	r3, [r4, #16]
 800368a:	f8cd 8000 	str.w	r8, [sp]
 800368e:	463b      	mov	r3, r7
 8003690:	aa03      	add	r2, sp, #12
 8003692:	4621      	mov	r1, r4
 8003694:	4630      	mov	r0, r6
 8003696:	f7ff feed 	bl	8003474 <_printf_common>
 800369a:	3001      	adds	r0, #1
 800369c:	d155      	bne.n	800374a <_printf_i+0x1e6>
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	b005      	add	sp, #20
 80036a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036a8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80036ac:	493c      	ldr	r1, [pc, #240]	; (80037a0 <_printf_i+0x23c>)
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80036b6:	f100 0504 	add.w	r5, r0, #4
 80036ba:	601d      	str	r5, [r3, #0]
 80036bc:	d001      	beq.n	80036c2 <_printf_i+0x15e>
 80036be:	6803      	ldr	r3, [r0, #0]
 80036c0:	e002      	b.n	80036c8 <_printf_i+0x164>
 80036c2:	0655      	lsls	r5, r2, #25
 80036c4:	d5fb      	bpl.n	80036be <_printf_i+0x15a>
 80036c6:	8803      	ldrh	r3, [r0, #0]
 80036c8:	07d0      	lsls	r0, r2, #31
 80036ca:	bf44      	itt	mi
 80036cc:	f042 0220 	orrmi.w	r2, r2, #32
 80036d0:	6022      	strmi	r2, [r4, #0]
 80036d2:	b91b      	cbnz	r3, 80036dc <_printf_i+0x178>
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	f022 0220 	bic.w	r2, r2, #32
 80036da:	6022      	str	r2, [r4, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	e7b1      	b.n	8003644 <_printf_i+0xe0>
 80036e0:	4675      	mov	r5, lr
 80036e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80036e6:	fb02 3310 	mls	r3, r2, r0, r3
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036f0:	4603      	mov	r3, r0
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1f5      	bne.n	80036e2 <_printf_i+0x17e>
 80036f6:	e7b7      	b.n	8003668 <_printf_i+0x104>
 80036f8:	6808      	ldr	r0, [r1, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003700:	6949      	ldr	r1, [r1, #20]
 8003702:	d004      	beq.n	800370e <_printf_i+0x1aa>
 8003704:	1d10      	adds	r0, r2, #4
 8003706:	6018      	str	r0, [r3, #0]
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	6019      	str	r1, [r3, #0]
 800370c:	e007      	b.n	800371e <_printf_i+0x1ba>
 800370e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003712:	f102 0004 	add.w	r0, r2, #4
 8003716:	6018      	str	r0, [r3, #0]
 8003718:	6813      	ldr	r3, [r2, #0]
 800371a:	d0f6      	beq.n	800370a <_printf_i+0x1a6>
 800371c:	8019      	strh	r1, [r3, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	4675      	mov	r5, lr
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	e7b1      	b.n	800368a <_printf_i+0x126>
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	1d11      	adds	r1, r2, #4
 800372a:	6019      	str	r1, [r3, #0]
 800372c:	6815      	ldr	r5, [r2, #0]
 800372e:	2100      	movs	r1, #0
 8003730:	6862      	ldr	r2, [r4, #4]
 8003732:	4628      	mov	r0, r5
 8003734:	f000 f836 	bl	80037a4 <memchr>
 8003738:	b108      	cbz	r0, 800373e <_printf_i+0x1da>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	6060      	str	r0, [r4, #4]
 800373e:	6863      	ldr	r3, [r4, #4]
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	2300      	movs	r3, #0
 8003744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003748:	e79f      	b.n	800368a <_printf_i+0x126>
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	462a      	mov	r2, r5
 800374e:	4639      	mov	r1, r7
 8003750:	4630      	mov	r0, r6
 8003752:	47c0      	blx	r8
 8003754:	3001      	adds	r0, #1
 8003756:	d0a2      	beq.n	800369e <_printf_i+0x13a>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	079b      	lsls	r3, r3, #30
 800375c:	d507      	bpl.n	800376e <_printf_i+0x20a>
 800375e:	2500      	movs	r5, #0
 8003760:	f104 0919 	add.w	r9, r4, #25
 8003764:	68e3      	ldr	r3, [r4, #12]
 8003766:	9a03      	ldr	r2, [sp, #12]
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	429d      	cmp	r5, r3
 800376c:	db05      	blt.n	800377a <_printf_i+0x216>
 800376e:	68e0      	ldr	r0, [r4, #12]
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	4298      	cmp	r0, r3
 8003774:	bfb8      	it	lt
 8003776:	4618      	movlt	r0, r3
 8003778:	e793      	b.n	80036a2 <_printf_i+0x13e>
 800377a:	2301      	movs	r3, #1
 800377c:	464a      	mov	r2, r9
 800377e:	4639      	mov	r1, r7
 8003780:	4630      	mov	r0, r6
 8003782:	47c0      	blx	r8
 8003784:	3001      	adds	r0, #1
 8003786:	d08a      	beq.n	800369e <_printf_i+0x13a>
 8003788:	3501      	adds	r5, #1
 800378a:	e7eb      	b.n	8003764 <_printf_i+0x200>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1a7      	bne.n	80036e0 <_printf_i+0x17c>
 8003790:	780b      	ldrb	r3, [r1, #0]
 8003792:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003796:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800379a:	e765      	b.n	8003668 <_printf_i+0x104>
 800379c:	08003b12 	.word	0x08003b12
 80037a0:	08003b01 	.word	0x08003b01

080037a4 <memchr>:
 80037a4:	b510      	push	{r4, lr}
 80037a6:	b2c9      	uxtb	r1, r1
 80037a8:	4402      	add	r2, r0
 80037aa:	4290      	cmp	r0, r2
 80037ac:	4603      	mov	r3, r0
 80037ae:	d101      	bne.n	80037b4 <memchr+0x10>
 80037b0:	2000      	movs	r0, #0
 80037b2:	bd10      	pop	{r4, pc}
 80037b4:	781c      	ldrb	r4, [r3, #0]
 80037b6:	3001      	adds	r0, #1
 80037b8:	428c      	cmp	r4, r1
 80037ba:	d1f6      	bne.n	80037aa <memchr+0x6>
 80037bc:	4618      	mov	r0, r3
 80037be:	bd10      	pop	{r4, pc}

080037c0 <memcpy>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	1e43      	subs	r3, r0, #1
 80037c4:	440a      	add	r2, r1
 80037c6:	4291      	cmp	r1, r2
 80037c8:	d100      	bne.n	80037cc <memcpy+0xc>
 80037ca:	bd10      	pop	{r4, pc}
 80037cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d4:	e7f7      	b.n	80037c6 <memcpy+0x6>

080037d6 <memmove>:
 80037d6:	4288      	cmp	r0, r1
 80037d8:	b510      	push	{r4, lr}
 80037da:	eb01 0302 	add.w	r3, r1, r2
 80037de:	d803      	bhi.n	80037e8 <memmove+0x12>
 80037e0:	1e42      	subs	r2, r0, #1
 80037e2:	4299      	cmp	r1, r3
 80037e4:	d10c      	bne.n	8003800 <memmove+0x2a>
 80037e6:	bd10      	pop	{r4, pc}
 80037e8:	4298      	cmp	r0, r3
 80037ea:	d2f9      	bcs.n	80037e0 <memmove+0xa>
 80037ec:	1881      	adds	r1, r0, r2
 80037ee:	1ad2      	subs	r2, r2, r3
 80037f0:	42d3      	cmn	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memmove+0x20>
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037fe:	e7f7      	b.n	80037f0 <memmove+0x1a>
 8003800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003804:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003808:	e7eb      	b.n	80037e2 <memmove+0xc>
	...

0800380c <_free_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4605      	mov	r5, r0
 8003810:	2900      	cmp	r1, #0
 8003812:	d043      	beq.n	800389c <_free_r+0x90>
 8003814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003818:	1f0c      	subs	r4, r1, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfb8      	it	lt
 800381e:	18e4      	addlt	r4, r4, r3
 8003820:	f000 f8d4 	bl	80039cc <__malloc_lock>
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <_free_r+0x94>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	4610      	mov	r0, r2
 800382a:	b933      	cbnz	r3, 800383a <_free_r+0x2e>
 800382c:	6063      	str	r3, [r4, #4]
 800382e:	6014      	str	r4, [r2, #0]
 8003830:	4628      	mov	r0, r5
 8003832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003836:	f000 b8ca 	b.w	80039ce <__malloc_unlock>
 800383a:	42a3      	cmp	r3, r4
 800383c:	d90b      	bls.n	8003856 <_free_r+0x4a>
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	1862      	adds	r2, r4, r1
 8003842:	4293      	cmp	r3, r2
 8003844:	bf01      	itttt	eq
 8003846:	681a      	ldreq	r2, [r3, #0]
 8003848:	685b      	ldreq	r3, [r3, #4]
 800384a:	1852      	addeq	r2, r2, r1
 800384c:	6022      	streq	r2, [r4, #0]
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6004      	str	r4, [r0, #0]
 8003852:	e7ed      	b.n	8003830 <_free_r+0x24>
 8003854:	4613      	mov	r3, r2
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	b10a      	cbz	r2, 800385e <_free_r+0x52>
 800385a:	42a2      	cmp	r2, r4
 800385c:	d9fa      	bls.n	8003854 <_free_r+0x48>
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	1858      	adds	r0, r3, r1
 8003862:	42a0      	cmp	r0, r4
 8003864:	d10b      	bne.n	800387e <_free_r+0x72>
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	4401      	add	r1, r0
 800386a:	1858      	adds	r0, r3, r1
 800386c:	4282      	cmp	r2, r0
 800386e:	6019      	str	r1, [r3, #0]
 8003870:	d1de      	bne.n	8003830 <_free_r+0x24>
 8003872:	6810      	ldr	r0, [r2, #0]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	4401      	add	r1, r0
 8003878:	6019      	str	r1, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	e7d8      	b.n	8003830 <_free_r+0x24>
 800387e:	d902      	bls.n	8003886 <_free_r+0x7a>
 8003880:	230c      	movs	r3, #12
 8003882:	602b      	str	r3, [r5, #0]
 8003884:	e7d4      	b.n	8003830 <_free_r+0x24>
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	1821      	adds	r1, r4, r0
 800388a:	428a      	cmp	r2, r1
 800388c:	bf01      	itttt	eq
 800388e:	6811      	ldreq	r1, [r2, #0]
 8003890:	6852      	ldreq	r2, [r2, #4]
 8003892:	1809      	addeq	r1, r1, r0
 8003894:	6021      	streq	r1, [r4, #0]
 8003896:	6062      	str	r2, [r4, #4]
 8003898:	605c      	str	r4, [r3, #4]
 800389a:	e7c9      	b.n	8003830 <_free_r+0x24>
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	bf00      	nop
 80038a0:	20000158 	.word	0x20000158

080038a4 <_malloc_r>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	1ccd      	adds	r5, r1, #3
 80038a8:	f025 0503 	bic.w	r5, r5, #3
 80038ac:	3508      	adds	r5, #8
 80038ae:	2d0c      	cmp	r5, #12
 80038b0:	bf38      	it	cc
 80038b2:	250c      	movcc	r5, #12
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	4606      	mov	r6, r0
 80038b8:	db01      	blt.n	80038be <_malloc_r+0x1a>
 80038ba:	42a9      	cmp	r1, r5
 80038bc:	d903      	bls.n	80038c6 <_malloc_r+0x22>
 80038be:	230c      	movs	r3, #12
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	2000      	movs	r0, #0
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	f000 f881 	bl	80039cc <__malloc_lock>
 80038ca:	4a23      	ldr	r2, [pc, #140]	; (8003958 <_malloc_r+0xb4>)
 80038cc:	6814      	ldr	r4, [r2, #0]
 80038ce:	4621      	mov	r1, r4
 80038d0:	b991      	cbnz	r1, 80038f8 <_malloc_r+0x54>
 80038d2:	4c22      	ldr	r4, [pc, #136]	; (800395c <_malloc_r+0xb8>)
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	b91b      	cbnz	r3, 80038e0 <_malloc_r+0x3c>
 80038d8:	4630      	mov	r0, r6
 80038da:	f000 f867 	bl	80039ac <_sbrk_r>
 80038de:	6020      	str	r0, [r4, #0]
 80038e0:	4629      	mov	r1, r5
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 f862 	bl	80039ac <_sbrk_r>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d126      	bne.n	800393a <_malloc_r+0x96>
 80038ec:	230c      	movs	r3, #12
 80038ee:	4630      	mov	r0, r6
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	f000 f86c 	bl	80039ce <__malloc_unlock>
 80038f6:	e7e4      	b.n	80038c2 <_malloc_r+0x1e>
 80038f8:	680b      	ldr	r3, [r1, #0]
 80038fa:	1b5b      	subs	r3, r3, r5
 80038fc:	d41a      	bmi.n	8003934 <_malloc_r+0x90>
 80038fe:	2b0b      	cmp	r3, #11
 8003900:	d90f      	bls.n	8003922 <_malloc_r+0x7e>
 8003902:	600b      	str	r3, [r1, #0]
 8003904:	18cc      	adds	r4, r1, r3
 8003906:	50cd      	str	r5, [r1, r3]
 8003908:	4630      	mov	r0, r6
 800390a:	f000 f860 	bl	80039ce <__malloc_unlock>
 800390e:	f104 000b 	add.w	r0, r4, #11
 8003912:	1d23      	adds	r3, r4, #4
 8003914:	f020 0007 	bic.w	r0, r0, #7
 8003918:	1ac3      	subs	r3, r0, r3
 800391a:	d01b      	beq.n	8003954 <_malloc_r+0xb0>
 800391c:	425a      	negs	r2, r3
 800391e:	50e2      	str	r2, [r4, r3]
 8003920:	bd70      	pop	{r4, r5, r6, pc}
 8003922:	428c      	cmp	r4, r1
 8003924:	bf0b      	itete	eq
 8003926:	6863      	ldreq	r3, [r4, #4]
 8003928:	684b      	ldrne	r3, [r1, #4]
 800392a:	6013      	streq	r3, [r2, #0]
 800392c:	6063      	strne	r3, [r4, #4]
 800392e:	bf18      	it	ne
 8003930:	460c      	movne	r4, r1
 8003932:	e7e9      	b.n	8003908 <_malloc_r+0x64>
 8003934:	460c      	mov	r4, r1
 8003936:	6849      	ldr	r1, [r1, #4]
 8003938:	e7ca      	b.n	80038d0 <_malloc_r+0x2c>
 800393a:	1cc4      	adds	r4, r0, #3
 800393c:	f024 0403 	bic.w	r4, r4, #3
 8003940:	42a0      	cmp	r0, r4
 8003942:	d005      	beq.n	8003950 <_malloc_r+0xac>
 8003944:	1a21      	subs	r1, r4, r0
 8003946:	4630      	mov	r0, r6
 8003948:	f000 f830 	bl	80039ac <_sbrk_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d0cd      	beq.n	80038ec <_malloc_r+0x48>
 8003950:	6025      	str	r5, [r4, #0]
 8003952:	e7d9      	b.n	8003908 <_malloc_r+0x64>
 8003954:	bd70      	pop	{r4, r5, r6, pc}
 8003956:	bf00      	nop
 8003958:	20000158 	.word	0x20000158
 800395c:	2000015c 	.word	0x2000015c

08003960 <_realloc_r>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	4607      	mov	r7, r0
 8003964:	4614      	mov	r4, r2
 8003966:	460e      	mov	r6, r1
 8003968:	b921      	cbnz	r1, 8003974 <_realloc_r+0x14>
 800396a:	4611      	mov	r1, r2
 800396c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003970:	f7ff bf98 	b.w	80038a4 <_malloc_r>
 8003974:	b922      	cbnz	r2, 8003980 <_realloc_r+0x20>
 8003976:	f7ff ff49 	bl	800380c <_free_r>
 800397a:	4625      	mov	r5, r4
 800397c:	4628      	mov	r0, r5
 800397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003980:	f000 f826 	bl	80039d0 <_malloc_usable_size_r>
 8003984:	4284      	cmp	r4, r0
 8003986:	d90f      	bls.n	80039a8 <_realloc_r+0x48>
 8003988:	4621      	mov	r1, r4
 800398a:	4638      	mov	r0, r7
 800398c:	f7ff ff8a 	bl	80038a4 <_malloc_r>
 8003990:	4605      	mov	r5, r0
 8003992:	2800      	cmp	r0, #0
 8003994:	d0f2      	beq.n	800397c <_realloc_r+0x1c>
 8003996:	4631      	mov	r1, r6
 8003998:	4622      	mov	r2, r4
 800399a:	f7ff ff11 	bl	80037c0 <memcpy>
 800399e:	4631      	mov	r1, r6
 80039a0:	4638      	mov	r0, r7
 80039a2:	f7ff ff33 	bl	800380c <_free_r>
 80039a6:	e7e9      	b.n	800397c <_realloc_r+0x1c>
 80039a8:	4635      	mov	r5, r6
 80039aa:	e7e7      	b.n	800397c <_realloc_r+0x1c>

080039ac <_sbrk_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	2300      	movs	r3, #0
 80039b0:	4c05      	ldr	r4, [pc, #20]	; (80039c8 <_sbrk_r+0x1c>)
 80039b2:	4605      	mov	r5, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	f000 f814 	bl	80039e4 <_sbrk>
 80039bc:	1c43      	adds	r3, r0, #1
 80039be:	d102      	bne.n	80039c6 <_sbrk_r+0x1a>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	b103      	cbz	r3, 80039c6 <_sbrk_r+0x1a>
 80039c4:	602b      	str	r3, [r5, #0]
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
 80039c8:	20000608 	.word	0x20000608

080039cc <__malloc_lock>:
 80039cc:	4770      	bx	lr

080039ce <__malloc_unlock>:
 80039ce:	4770      	bx	lr

080039d0 <_malloc_usable_size_r>:
 80039d0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	f1a0 0004 	sub.w	r0, r0, #4
 80039da:	bfbc      	itt	lt
 80039dc:	580b      	ldrlt	r3, [r1, r0]
 80039de:	18c0      	addlt	r0, r0, r3
 80039e0:	4770      	bx	lr
	...

080039e4 <_sbrk>:
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <_sbrk+0x14>)
 80039e6:	4602      	mov	r2, r0
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	b909      	cbnz	r1, 80039f0 <_sbrk+0xc>
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <_sbrk+0x18>)
 80039ee:	6019      	str	r1, [r3, #0]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	4402      	add	r2, r0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	4770      	bx	lr
 80039f8:	20000160 	.word	0x20000160
 80039fc:	20000610 	.word	0x20000610

08003a00 <_init>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr

08003a0c <_fini>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	bf00      	nop
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr
