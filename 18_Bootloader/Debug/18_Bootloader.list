
18_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800469c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001978  20000010  080046a8  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001988  080046a8  00021988  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009025  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002588  00000000  00000000  0002905a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ae8  00000000  00000000  0002b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000970  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000631f  00000000  00000000  0002ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002f7d  00000000  00000000  00032d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00035cdc  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000028c0  00000000  00000000  00035d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004610 	.word	0x08004610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004610 	.word	0x08004610

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <apInit>:
cmd_t cmd_boot;



void apInit(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  cmdInit(&cmd_boot);
 8000160:	4805      	ldr	r0, [pc, #20]	; (8000178 <apInit+0x1c>)
 8000162:	f000 face 	bl	8000702 <cmdInit>
  cmdBegin(&cmd_boot, _DEF_UART1, 115200);
 8000166:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800016a:	2100      	movs	r1, #0
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <apInit+0x1c>)
 800016e:	f000 fade 	bl	800072e <cmdBegin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	200001f8 	.word	0x200001f8

0800017c <apMain>:

void apMain(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  uint32_t pre_time;


  pre_time = millis();
 8000182:	f001 ffea 	bl	800215a <millis>
 8000186:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (cmdReceivePacket(&cmd_boot) == true)
 8000188:	480b      	ldr	r0, [pc, #44]	; (80001b8 <apMain+0x3c>)
 800018a:	f000 fb09 	bl	80007a0 <cmdReceivePacket>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d002      	beq.n	800019a <apMain+0x1e>
    {
      bootProcessCmd(&cmd_boot);
 8000194:	4808      	ldr	r0, [pc, #32]	; (80001b8 <apMain+0x3c>)
 8000196:	f000 f97d 	bl	8000494 <bootProcessCmd>
    }

    if (millis()-pre_time >= 100)
 800019a:	f001 ffde 	bl	800215a <millis>
 800019e:	4602      	mov	r2, r0
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	1ad3      	subs	r3, r2, r3
 80001a4:	2b63      	cmp	r3, #99	; 0x63
 80001a6:	d9ef      	bls.n	8000188 <apMain+0xc>
    {
      pre_time = millis();
 80001a8:	f001 ffd7 	bl	800215a <millis>
 80001ac:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 80001ae:	2000      	movs	r0, #0
 80001b0:	f001 fae0 	bl	8001774 <ledToggle>
    if (cmdReceivePacket(&cmd_boot) == true)
 80001b4:	e7e8      	b.n	8000188 <apMain+0xc>
 80001b6:	bf00      	nop
 80001b8:	200001f8 	.word	0x200001f8

080001bc <bootJumpToFw>:
{
}


void bootJumpToFw(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
  void (**jump_func)(void) = (void (**)(void))(FLASH_FW_ADDR_START + 4);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <bootJumpToFw+0x1c>)
 80001c4:	607b      	str	r3, [r7, #4]

  bspDeInit();
 80001c6:	f000 fa0f 	bl	80005e8 <bspDeInit>
  (*jump_func)();
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4798      	blx	r3
}
 80001d0:	bf00      	nop
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	08008004 	.word	0x08008004

080001dc <bootCheckFw>:

bool bootCheckFw(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
  void (**jump_func)(void) = (void (**)(void))(FLASH_FW_ADDR_START + 4);
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <bootCheckFw+0x24>)
 80001e4:	607b      	str	r3, [r7, #4]


  if ((uint32_t)(*jump_func) != 0xFFFFFFFF)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ee:	d001      	beq.n	80001f4 <bootCheckFw+0x18>
  {
    return true;
 80001f0:	2301      	movs	r3, #1
 80001f2:	e000      	b.n	80001f6 <bootCheckFw+0x1a>
  }
  else
  {
    return false;
 80001f4:	2300      	movs	r3, #0
  }
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	08008004 	.word	0x08008004

08000204 <bootCmdReadVersion>:

void bootCmdReadVersion(cmd_t *p_cmd)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b08a      	sub	sp, #40	; 0x28
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  uint8_t fw_version_str[32] = "B180824R1";
 800020c:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <bootCmdReadVersion+0x3c>)
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	ca07      	ldmia	r2, {r0, r1, r2}
 8000214:	c303      	stmia	r3!, {r0, r1}
 8000216:	801a      	strh	r2, [r3, #0]
 8000218:	f107 0312 	add.w	r3, r7, #18
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	829a      	strh	r2, [r3, #20]

  cmdSendResp(p_cmd, OK, fw_version_str, 9);
 800022a:	f107 0208 	add.w	r2, r7, #8
 800022e:	2309      	movs	r3, #9
 8000230:	2100      	movs	r1, #0
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 fbc0 	bl	80009b8 <cmdSendResp>
}
 8000238:	bf00      	nop
 800023a:	3728      	adds	r7, #40	; 0x28
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	08004628 	.word	0x08004628

08000244 <bootCmdReadBoardName>:

void bootCmdReadBoardName(cmd_t *p_cmd)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08b      	sub	sp, #44	; 0x2c
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  uint8_t data[32] = "nucleof103 R1.0";
 800024c:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <bootCmdReadBoardName+0x44>)
 800024e:	f107 0408 	add.w	r4, r7, #8
 8000252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]


  cmdSendResp(p_cmd, OK, data, strlen((char *)data));
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff6e 	bl	800014c <strlen>
 8000270:	4603      	mov	r3, r0
 8000272:	f107 0208 	add.w	r2, r7, #8
 8000276:	2100      	movs	r1, #0
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f000 fb9d 	bl	80009b8 <cmdSendResp>
}
 800027e:	bf00      	nop
 8000280:	372c      	adds	r7, #44	; 0x2c
 8000282:	46bd      	mov	sp, r7
 8000284:	bd90      	pop	{r4, r7, pc}
 8000286:	bf00      	nop
 8000288:	08004648 	.word	0x08004648

0800028c <bootCmdFlashErase>:

void bootCmdFlashErase(cmd_t *p_cmd)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint8_t err_code = OK;
 8000294:	2300      	movs	r3, #0
 8000296:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_begin;
  uint32_t addr_end;
  uint32_t length;


  addr_begin  = p_cmd->rx_packet.data[0]<<0;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f893 3828 	ldrb.w	r3, [r3, #2088]	; 0x828
 800029e:	613b      	str	r3, [r7, #16]
  addr_begin |= p_cmd->rx_packet.data[1]<<8;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f893 3829 	ldrb.w	r3, [r3, #2089]	; 0x829
 80002a6:	021b      	lsls	r3, r3, #8
 80002a8:	461a      	mov	r2, r3
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	613b      	str	r3, [r7, #16]
  addr_begin |= p_cmd->rx_packet.data[2]<<16;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f893 382a 	ldrb.w	r3, [r3, #2090]	; 0x82a
 80002b6:	041b      	lsls	r3, r3, #16
 80002b8:	461a      	mov	r2, r3
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
  addr_begin |= p_cmd->rx_packet.data[3]<<24;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f893 382b 	ldrb.w	r3, [r3, #2091]	; 0x82b
 80002c6:	061b      	lsls	r3, r3, #24
 80002c8:	461a      	mov	r2, r3
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	613b      	str	r3, [r7, #16]

  length      = p_cmd->rx_packet.data[4]<<0;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f893 382c 	ldrb.w	r3, [r3, #2092]	; 0x82c
 80002d6:	60fb      	str	r3, [r7, #12]
  length     |= p_cmd->rx_packet.data[5]<<8;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f893 382d 	ldrb.w	r3, [r3, #2093]	; 0x82d
 80002de:	021b      	lsls	r3, r3, #8
 80002e0:	461a      	mov	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]
  length     |= p_cmd->rx_packet.data[6]<<16;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f893 382e 	ldrb.w	r3, [r3, #2094]	; 0x82e
 80002ee:	041b      	lsls	r3, r3, #16
 80002f0:	461a      	mov	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	60fb      	str	r3, [r7, #12]
  length     |= p_cmd->rx_packet.data[7]<<24;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f893 382f 	ldrb.w	r3, [r3, #2095]	; 0x82f
 80002fe:	061b      	lsls	r3, r3, #24
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4313      	orrs	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]

  addr_end    = addr_begin + length - 1;
 8000308:	693a      	ldr	r2, [r7, #16]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	3b01      	subs	r3, #1
 8000310:	60bb      	str	r3, [r7, #8]


  if ((addr_begin >= FLASH_FW_ADDR_START) && (addr_begin < FLASH_FW_ADDR_END) &&
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	4a13      	ldr	r2, [pc, #76]	; (8000364 <bootCmdFlashErase+0xd8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d918      	bls.n	800034c <bootCmdFlashErase+0xc0>
 800031a:	693b      	ldr	r3, [r7, #16]
 800031c:	4a12      	ldr	r2, [pc, #72]	; (8000368 <bootCmdFlashErase+0xdc>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d814      	bhi.n	800034c <bootCmdFlashErase+0xc0>
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <bootCmdFlashErase+0xd8>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d910      	bls.n	800034c <bootCmdFlashErase+0xc0>
      (addr_end   >= FLASH_FW_ADDR_START) && (addr_end   < FLASH_FW_ADDR_END))
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <bootCmdFlashErase+0xdc>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d80c      	bhi.n	800034c <bootCmdFlashErase+0xc0>
  {
    if (flashErase(addr_begin, length) == false)
 8000332:	68f9      	ldr	r1, [r7, #12]
 8000334:	6938      	ldr	r0, [r7, #16]
 8000336:	f001 f951 	bl	80015dc <flashErase>
 800033a:	4603      	mov	r3, r0
 800033c:	f083 0301 	eor.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d004      	beq.n	8000350 <bootCmdFlashErase+0xc4>
    {
      err_code = ERR_FLASH_ERASE;
 8000346:	23fb      	movs	r3, #251	; 0xfb
 8000348:	75fb      	strb	r3, [r7, #23]
    if (flashErase(addr_begin, length) == false)
 800034a:	e001      	b.n	8000350 <bootCmdFlashErase+0xc4>
    }
  }
  else
  {
    err_code = ERR_FLASH_INVALID_ADDR;
 800034c:	23f4      	movs	r3, #244	; 0xf4
 800034e:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, err_code, NULL, 0);
 8000350:	7df9      	ldrb	r1, [r7, #23]
 8000352:	2300      	movs	r3, #0
 8000354:	2200      	movs	r2, #0
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 fb2e 	bl	80009b8 <cmdSendResp>

}
 800035c:	bf00      	nop
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	08007fff 	.word	0x08007fff
 8000368:	0801ffff 	.word	0x0801ffff

0800036c <bootCmdFlashWrite>:

void bootCmdFlashWrite(cmd_t *p_cmd)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  uint8_t err_code = OK;
 8000374:	2300      	movs	r3, #0
 8000376:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_begin;
  uint32_t addr_end;
  uint32_t length;


  addr_begin  = p_cmd->rx_packet.data[0]<<0;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f893 3828 	ldrb.w	r3, [r3, #2088]	; 0x828
 800037e:	613b      	str	r3, [r7, #16]
  addr_begin |= p_cmd->rx_packet.data[1]<<8;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f893 3829 	ldrb.w	r3, [r3, #2089]	; 0x829
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	461a      	mov	r2, r3
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	4313      	orrs	r3, r2
 800038e:	613b      	str	r3, [r7, #16]
  addr_begin |= p_cmd->rx_packet.data[2]<<16;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f893 382a 	ldrb.w	r3, [r3, #2090]	; 0x82a
 8000396:	041b      	lsls	r3, r3, #16
 8000398:	461a      	mov	r2, r3
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	4313      	orrs	r3, r2
 800039e:	613b      	str	r3, [r7, #16]
  addr_begin |= p_cmd->rx_packet.data[3]<<24;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f893 382b 	ldrb.w	r3, [r3, #2091]	; 0x82b
 80003a6:	061b      	lsls	r3, r3, #24
 80003a8:	461a      	mov	r2, r3
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	613b      	str	r3, [r7, #16]

  length      = p_cmd->rx_packet.data[4]<<0;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f893 382c 	ldrb.w	r3, [r3, #2092]	; 0x82c
 80003b6:	60fb      	str	r3, [r7, #12]
  length     |= p_cmd->rx_packet.data[5]<<8;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f893 382d 	ldrb.w	r3, [r3, #2093]	; 0x82d
 80003be:	021b      	lsls	r3, r3, #8
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]
  length     |= p_cmd->rx_packet.data[6]<<16;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f893 382e 	ldrb.w	r3, [r3, #2094]	; 0x82e
 80003ce:	041b      	lsls	r3, r3, #16
 80003d0:	461a      	mov	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	60fb      	str	r3, [r7, #12]
  length     |= p_cmd->rx_packet.data[7]<<24;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f893 382f 	ldrb.w	r3, [r3, #2095]	; 0x82f
 80003de:	061b      	lsls	r3, r3, #24
 80003e0:	461a      	mov	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	60fb      	str	r3, [r7, #12]

  addr_end    = addr_begin + length - 1;
 80003e8:	693a      	ldr	r2, [r7, #16]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4413      	add	r3, r2
 80003ee:	3b01      	subs	r3, #1
 80003f0:	60bb      	str	r3, [r7, #8]


  if ((addr_begin >= FLASH_FW_ADDR_START) && (addr_begin < FLASH_FW_ADDR_END) &&
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	4a15      	ldr	r2, [pc, #84]	; (800044c <bootCmdFlashWrite+0xe0>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d91c      	bls.n	8000434 <bootCmdFlashWrite+0xc8>
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <bootCmdFlashWrite+0xe4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d818      	bhi.n	8000434 <bootCmdFlashWrite+0xc8>
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	4a11      	ldr	r2, [pc, #68]	; (800044c <bootCmdFlashWrite+0xe0>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d914      	bls.n	8000434 <bootCmdFlashWrite+0xc8>
      (addr_end   >= FLASH_FW_ADDR_START) && (addr_end   < FLASH_FW_ADDR_END))
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	4a10      	ldr	r2, [pc, #64]	; (8000450 <bootCmdFlashWrite+0xe4>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d810      	bhi.n	8000434 <bootCmdFlashWrite+0xc8>
  {
    if (flashWrite(addr_begin, &p_cmd->rx_packet.data[8], length) == false)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	4619      	mov	r1, r3
 800041c:	6938      	ldr	r0, [r7, #16]
 800041e:	f001 f923 	bl	8001668 <flashWrite>
 8000422:	4603      	mov	r3, r0
 8000424:	f083 0301 	eor.w	r3, r3, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <bootCmdFlashWrite+0xcc>
    {
      err_code = ERR_FLASH_WRITE;
 800042e:	23f9      	movs	r3, #249	; 0xf9
 8000430:	75fb      	strb	r3, [r7, #23]
    if (flashWrite(addr_begin, &p_cmd->rx_packet.data[8], length) == false)
 8000432:	e001      	b.n	8000438 <bootCmdFlashWrite+0xcc>
    }
  }
  else
  {
    err_code = ERR_FLASH_INVALID_ADDR;
 8000434:	23f4      	movs	r3, #244	; 0xf4
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, err_code, NULL, 0);
 8000438:	7df9      	ldrb	r1, [r7, #23]
 800043a:	2300      	movs	r3, #0
 800043c:	2200      	movs	r2, #0
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f000 faba 	bl	80009b8 <cmdSendResp>
}
 8000444:	bf00      	nop
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	08007fff 	.word	0x08007fff
 8000450:	0801ffff 	.word	0x0801ffff

08000454 <bootCmdJumpToFw>:

void bootCmdJumpToFw(cmd_t *p_cmd)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if (bootCheckFw() == true)
 800045c:	f7ff febe 	bl	80001dc <bootCheckFw>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d00b      	beq.n	800047e <bootCmdJumpToFw+0x2a>
  {
    cmdSendResp(p_cmd, OK, NULL, 0);
 8000466:	2300      	movs	r3, #0
 8000468:	2200      	movs	r2, #0
 800046a:	2100      	movs	r1, #0
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 faa3 	bl	80009b8 <cmdSendResp>
    delay(100);
 8000472:	2064      	movs	r0, #100	; 0x64
 8000474:	f001 fe66 	bl	8002144 <delay>
    bootJumpToFw();
 8000478:	f7ff fea0 	bl	80001bc <bootJumpToFw>
  }
  else
  {
    cmdSendResp(p_cmd, ERR_INVALID_FW, NULL, 0);
  }
}
 800047c:	e005      	b.n	800048a <bootCmdJumpToFw+0x36>
    cmdSendResp(p_cmd, ERR_INVALID_FW, NULL, 0);
 800047e:	2300      	movs	r3, #0
 8000480:	2200      	movs	r2, #0
 8000482:	21f2      	movs	r1, #242	; 0xf2
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 fa97 	bl	80009b8 <cmdSendResp>
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <bootProcessCmd>:

void bootProcessCmd(cmd_t *p_cmd)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  switch(p_cmd->rx_packet.cmd)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f893 3820 	ldrb.w	r3, [r3, #2080]	; 0x820
 80004a2:	2b08      	cmp	r3, #8
 80004a4:	d828      	bhi.n	80004f8 <bootProcessCmd+0x64>
 80004a6:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <bootProcessCmd+0x18>)
 80004a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ac:	080004d1 	.word	0x080004d1
 80004b0:	080004d9 	.word	0x080004d9
 80004b4:	080004e1 	.word	0x080004e1
 80004b8:	080004e9 	.word	0x080004e9
 80004bc:	080004f9 	.word	0x080004f9
 80004c0:	080004f9 	.word	0x080004f9
 80004c4:	080004f9 	.word	0x080004f9
 80004c8:	080004f9 	.word	0x080004f9
 80004cc:	080004f1 	.word	0x080004f1
  {
    case BOOT_CMD_READ_VERSION:
      bootCmdReadVersion(p_cmd);
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff fe97 	bl	8000204 <bootCmdReadVersion>
      break;
 80004d6:	e016      	b.n	8000506 <bootProcessCmd+0x72>

    case BOOT_CMD_READ_BOARD_NAME:
      bootCmdReadBoardName(p_cmd);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff feb3 	bl	8000244 <bootCmdReadBoardName>
      break;
 80004de:	e012      	b.n	8000506 <bootProcessCmd+0x72>

    case BOOT_CMD_FLASH_ERASE:
      bootCmdFlashErase(p_cmd);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff fed3 	bl	800028c <bootCmdFlashErase>
      break;
 80004e6:	e00e      	b.n	8000506 <bootProcessCmd+0x72>

    case BOOT_CMD_FLASH_WRITE:
      bootCmdFlashWrite(p_cmd);
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ff3f 	bl	800036c <bootCmdFlashWrite>
      break;
 80004ee:	e00a      	b.n	8000506 <bootProcessCmd+0x72>

    case BOOT_CMD_JUMP_TO_FW:
      bootCmdJumpToFw(p_cmd);
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f7ff ffaf 	bl	8000454 <bootCmdJumpToFw>
      break;
 80004f6:	e006      	b.n	8000506 <bootProcessCmd+0x72>


    default:
      cmdSendResp(p_cmd, ERR_INVALID_CMD, NULL, 0);
 80004f8:	2300      	movs	r3, #0
 80004fa:	2200      	movs	r2, #0
 80004fc:	2164      	movs	r1, #100	; 0x64
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 fa5a 	bl	80009b8 <cmdSendResp>
      break;
 8000504:	bf00      	nop
  }
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop

08000510 <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	; 0x40
 8000514:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2228      	movs	r2, #40	; 0x28
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 f867 	bl	8004600 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000542:	2310      	movs	r3, #16
 8000544:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 8000552:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fe2c 	bl	80031b8 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d000      	beq.n	8000568 <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 8000566:	e7fe      	b.n	8000566 <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000568:	230f      	movs	r3, #15
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2302      	movs	r3, #2
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 800057e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000582:	2102      	movs	r1, #2
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f897 	bl	80036b8 <HAL_RCC_ClockConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d000      	beq.n	8000592 <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 8000590:	e7fe      	b.n	8000590 <SystemClock_Config+0x80>
  }
}
 8000592:	bf00      	nop
 8000594:	3740      	adds	r7, #64	; 0x40
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <bspInit>:




void bspInit(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    HAL_Init();
 80005a2:	f001 fde1 	bl	8002168 <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 80005a6:	f7ff ffb3 	bl	8000510 <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <bspInit+0x48>)
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <bspInit+0x48>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <bspInit+0x48>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <bspInit+0x48>)
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <bspInit+0x48>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f043 0310 	orr.w	r3, r3, #16
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <bspInit+0x48>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0310 	and.w	r3, r3, #16
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <bspDeInit>:

void bspDeInit(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  HAL_RCC_DeInit();
 80005ec:	f002 fd4a 	bl	8003084 <HAL_RCC_DeInit>
  HAL_DeInit();
 80005f0:	f001 fdd0 	bl	8002194 <HAL_DeInit>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005fc:	4a15      	ldr	r2, [pc, #84]	; (8000654 <SystemInit+0x5c>)
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <SystemInit+0x5c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000608:	4912      	ldr	r1, [pc, #72]	; (8000654 <SystemInit+0x5c>)
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <SystemInit+0x5c>)
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <SystemInit+0x60>)
 8000610:	4013      	ands	r3, r2
 8000612:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000614:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <SystemInit+0x5c>)
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <SystemInit+0x5c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800061e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <SystemInit+0x5c>)
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SystemInit+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800062e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <SystemInit+0x5c>)
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <SystemInit+0x5c>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800063a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <SystemInit+0x5c>)
 800063e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000642:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <SystemInit+0x64>)
 8000646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800064a:	609a      	str	r2, [r3, #8]
#endif 
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	f8ff0000 	.word	0xf8ff0000
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000660:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000662:	e003      	b.n	800066c <LoopCopyDataInit>

08000664 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000666:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000668:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800066a:	3104      	adds	r1, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000670:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000672:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000674:	d3f6      	bcc.n	8000664 <CopyDataInit>
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000678:	e002      	b.n	8000680 <LoopFillZerobss>

0800067a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800067c:	f842 3b04 	str.w	r3, [r2], #4

08000680 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000682:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000684:	d3f9      	bcc.n	800067a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000686:	f7ff ffb7 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800068a:	f003 ff95 	bl	80045b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f003 ff87 	bl	80045a0 <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r3, =_sidata
 8000694:	0800469c 	.word	0x0800469c
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800069c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006a0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80006a4:	20001988 	.word	0x20001988

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>

080006aa <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  Noned
  * @retval None
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <MemManage_Handler+0x4>

080006c2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <UsageFault_Handler+0x4>

080006ce <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
extern void swtimerISR(void);
void SysTick_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80006f6:	f001 fda1 	bl	800223c <HAL_IncTick>
  swtimerISR();
 80006fa:	f001 f891 	bl	8001820 <swtimerISR>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}

08000702 <cmdInit>:

static void cmdPutch(uint8_t ch, uint8_t data);


void cmdInit(cmd_t *p_cmd)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  p_cmd->init  = false;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2200      	movs	r2, #0
 800070e:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	709a      	strb	r2, [r3, #2]

  p_cmd->rx_packet.error = 0;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822
  p_cmd->tx_packet.error = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	759a      	strb	r2, [r3, #22]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <cmdBegin>:

bool cmdBegin(cmd_t *p_cmd, uint8_t ch, uint32_t baud)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	460b      	mov	r3, r1
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	72fb      	strb	r3, [r7, #11]
  p_cmd->ch   = ch;     // channel.
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	7afa      	ldrb	r2, [r7, #11]
 8000740:	701a      	strb	r2, [r3, #0]
  p_cmd->baud = baud;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	605a      	str	r2, [r3, #4]
  p_cmd->init = true;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2201      	movs	r2, #1
 800074c:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2200      	movs	r2, #0
 8000752:	709a      	strb	r2, [r3, #2]

  p_cmd->save_time[0] = millis();
 8000754:	f001 fd01 	bl	800215a <millis>
 8000758:	4602      	mov	r2, r0
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	609a      	str	r2, [r3, #8]
  p_cmd->save_time[1] = millis();
 800075e:	f001 fcfc 	bl	800215a <millis>
 8000762:	4602      	mov	r2, r0
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	60da      	str	r2, [r3, #12]

  return uartOpen(ch, baud);
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f98f 	bl	8001a90 <uartOpen>
 8000772:	4603      	mov	r3, r0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <cmdPutch>:

void cmdPutch(uint8_t ch, uint8_t data)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	71bb      	strb	r3, [r7, #6]
  uartPutch(ch, data);
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fb0c 	bl	8001db0 <uartPutch>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <cmdReceivePacket>:

bool cmdReceivePacket(cmd_t *p_cmd)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  bool     ret = false;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint8_t  ch;
  uint32_t index;
  //-- 명령어 수신
  //
  if( uartAvailable(p_cmd->ch) )
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fa2d 	bl	8001c10 <uartAvailable>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d010      	beq.n	80007de <cmdReceivePacket+0x3e>
  {
    ch = uartRead(p_cmd->ch);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fb43 	bl	8001e4c <uartRead>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73bb      	strb	r3, [r7, #14]
  {
    return false;
  }
 //-- 바이트간 타임아웃 설정(500ms)
  //
  if((millis()-p_cmd->save_time[0]) > 500)
 80007ca:	f001 fcc6 	bl	800215a <millis>
 80007ce:	4602      	mov	r2, r0
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007da:	d905      	bls.n	80007e8 <cmdReceivePacket+0x48>
 80007dc:	e001      	b.n	80007e2 <cmdReceivePacket+0x42>
    return false;
 80007de:	2300      	movs	r3, #0
 80007e0:	e0e6      	b.n	80009b0 <cmdReceivePacket+0x210>
  {
    p_cmd->state        = CMD_STATE_WAIT_STX;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	709a      	strb	r2, [r3, #2]
  }
  p_cmd->save_time[0] = millis();
 80007e8:	f001 fcb7 	bl	800215a <millis>
 80007ec:	4602      	mov	r2, r0
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
  //-- 명령어 상태
  //
  switch(p_cmd->state)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	2b08      	cmp	r3, #8
 80007f8:	f200 80d9 	bhi.w	80009ae <cmdReceivePacket+0x20e>
 80007fc:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <cmdReceivePacket+0x64>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	08000829 	.word	0x08000829
 8000808:	08000849 	.word	0x08000849
 800080c:	0800086b 	.word	0x0800086b
 8000810:	080009af 	.word	0x080009af
 8000814:	08000895 	.word	0x08000895
 8000818:	080008b9 	.word	0x080008b9
 800081c:	08000921 	.word	0x08000921
 8000820:	08000977 	.word	0x08000977
 8000824:	08000987 	.word	0x08000987
    //-- STX 문자 기다리는 상태
    //
    case CMD_STATE_WAIT_STX:

      // 시작 문자를 기다림
      if( ch == CMD_STX )
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b02      	cmp	r3, #2
 800082c:	f040 80bc 	bne.w	80009a8 <cmdReceivePacket+0x208>
      {
        p_cmd->state               = CMD_STATE_WAIT_CMD;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2201      	movs	r2, #1
 8000834:	709a      	strb	r2, [r3, #2]
        p_cmd->rx_packet.check_sum = 0x00;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
        p_cmd->rx_packet.length    = 0;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      }
      break;
 8000846:	e0af      	b.n	80009a8 <cmdReceivePacket+0x208>

    //-- 명령어 기다리는 상태
    //
    case CMD_STATE_WAIT_CMD:
      p_cmd->rx_packet.cmd        = ch;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
      p_cmd->rx_packet.check_sum ^= ch;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	4053      	eors	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_OPTION_ERROR;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2202      	movs	r2, #2
 8000866:	709a      	strb	r2, [r3, #2]
      break;
 8000868:	e0a1      	b.n	80009ae <cmdReceivePacket+0x20e>

    case CMD_STATE_WAIT_OPTION_ERROR:
      p_cmd->rx_packet.option     = ch;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	7bba      	ldrb	r2, [r7, #14]
 800086e:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821
      p_cmd->rx_packet.error      = ch;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7bba      	ldrb	r2, [r7, #14]
 8000876:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822
      p_cmd->rx_packet.check_sum ^= ch;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	4053      	eors	r3, r2
 8000884:	b2da      	uxtb	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_L;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2204      	movs	r2, #4
 8000890:	709a      	strb	r2, [r3, #2]
      break;
 8000892:	e08c      	b.n	80009ae <cmdReceivePacket+0x20e>

    //-- 데이터 사이즈 기다리는 상태
    //
    case CMD_STATE_WAIT_LENGTH_L:
      p_cmd->rx_packet.length     = ch;
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	b29a      	uxth	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      p_cmd->rx_packet.check_sum ^= ch;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	4053      	eors	r3, r2
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_H;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2205      	movs	r2, #5
 80008b4:	709a      	strb	r2, [r3, #2]
      break;
 80008b6:	e07a      	b.n	80009ae <cmdReceivePacket+0x20e>

    case CMD_STATE_WAIT_LENGTH_H:
      p_cmd->rx_packet.length    |= ch<<8;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 80008be:	b21a      	sxth	r2, r3
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      p_cmd->rx_packet.check_sum ^= ch;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	4053      	eors	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_H;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2205      	movs	r2, #5
 80008e8:	709a      	strb	r2, [r3, #2]

      if (p_cmd->rx_packet.length <= CMD_MAX_DATA_LENGTH)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 80008f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008f4:	d810      	bhi.n	8000918 <cmdReceivePacket+0x178>
      {
        if (p_cmd->rx_packet.length > 0)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d007      	beq.n	8000910 <cmdReceivePacket+0x170>
        {
          p_cmd->rx_packet.index = 0;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
          p_cmd->state = CMD_STATE_WAIT_DATA;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2206      	movs	r2, #6
 800090c:	709a      	strb	r2, [r3, #2]
      }
      else
      {
        p_cmd->state = CMD_STATE_WAIT_STX;
      }
      break;
 800090e:	e04e      	b.n	80009ae <cmdReceivePacket+0x20e>
          p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2207      	movs	r2, #7
 8000914:	709a      	strb	r2, [r3, #2]
      break;
 8000916:	e04a      	b.n	80009ae <cmdReceivePacket+0x20e>
        p_cmd->state = CMD_STATE_WAIT_STX;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	709a      	strb	r2, [r3, #2]
      break;
 800091e:	e046      	b.n	80009ae <cmdReceivePacket+0x20e>

    //-- 데이터를 기다리는 상태
    //
    case CMD_STATE_WAIT_DATA:

      index = p_cmd->rx_packet.index;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000926:	60bb      	str	r3, [r7, #8]

      p_cmd->rx_packet.check_sum ^= ch;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	4053      	eors	r3, r2
 8000932:	b2da      	uxtb	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      index = p_cmd->rx_packet.index;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000940:	60bb      	str	r3, [r7, #8]
      p_cmd->rx_packet.data[index] = ch;
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4413      	add	r3, r2
 8000948:	f603 0328 	addw	r3, r3, #2088	; 0x828
 800094c:	7bba      	ldrb	r2, [r7, #14]
 800094e:	701a      	strb	r2, [r3, #0]

      p_cmd->rx_packet.index++;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

      if (p_cmd->rx_packet.index >= p_cmd->rx_packet.length)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	f8b2 2824 	ldrh.w	r2, [r2, #2084]	; 0x824
 800096a:	4293      	cmp	r3, r2
 800096c:	d31e      	bcc.n	80009ac <cmdReceivePacket+0x20c>
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2207      	movs	r2, #7
 8000972:	709a      	strb	r2, [r3, #2]
      }
      break;
 8000974:	e01a      	b.n	80009ac <cmdReceivePacket+0x20c>
    //-- 체크섬을 기다리는 상태
    //
    case CMD_STATE_WAIT_CHECKSUM:


      p_cmd->rx_packet.check_sum_recv = ch;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7bba      	ldrb	r2, [r7, #14]
 800097a:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
      p_cmd->state                    = CMD_STATE_WAIT_ETX;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2208      	movs	r2, #8
 8000982:	709a      	strb	r2, [r3, #2]
      break;
 8000984:	e013      	b.n	80009ae <cmdReceivePacket+0x20e>

    //-- ETX 기다리는 상태
    //
    case CMD_STATE_WAIT_ETX:

      if (ch == CMD_ETX)
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d109      	bne.n	80009a0 <cmdReceivePacket+0x200>
      {
        if (p_cmd->rx_packet.check_sum_recv == p_cmd->rx_packet.check_sum)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f893 2827 	ldrb.w	r2, [r3, #2087]	; 0x827
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f893 3826 	ldrb.w	r3, [r3, #2086]	; 0x826
 8000998:	429a      	cmp	r2, r3
 800099a:	d101      	bne.n	80009a0 <cmdReceivePacket+0x200>
        {
          ret = true;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
        }
      }
      p_cmd->state = CMD_STATE_WAIT_STX;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	709a      	strb	r2, [r3, #2]
      break;
 80009a6:	e002      	b.n	80009ae <cmdReceivePacket+0x20e>
      break;
 80009a8:	bf00      	nop
 80009aa:	e000      	b.n	80009ae <cmdReceivePacket+0x20e>
      break;
 80009ac:	bf00      	nop
  }

  return ret;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <cmdSendResp>:

void cmdSendResp(cmd_t *p_cmd, uint8_t err_code, uint8_t *p_data, uint32_t length)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	460b      	mov	r3, r1
 80009c6:	72fb      	strb	r3, [r7, #11]
  uint32_t i;
  uint8_t  ch;
  uint8_t  check_sum = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	74fb      	strb	r3, [r7, #19]
  uint8_t  data;

  ch = p_cmd->ch;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	74bb      	strb	r3, [r7, #18]




  p_cmd->tx_packet.cmd   = p_cmd->rx_packet.cmd;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f893 2820 	ldrb.w	r2, [r3, #2080]	; 0x820
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	751a      	strb	r2, [r3, #20]
  p_cmd->tx_packet.error = err_code;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	7afa      	ldrb	r2, [r7, #11]
 80009e0:	759a      	strb	r2, [r3, #22]

  if (p_data != NULL)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d013      	beq.n	8000a10 <cmdSendResp+0x58>
  {
    for(i=0; i<length; i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00c      	b.n	8000a08 <cmdSendResp+0x50>
    {
      p_cmd->tx_packet.data[i] = p_data[i];
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	7819      	ldrb	r1, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	4413      	add	r3, r2
 80009fc:	331c      	adds	r3, #28
 80009fe:	460a      	mov	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
    for(i=0; i<length; i++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3ee      	bcc.n	80009ee <cmdSendResp+0x36>
    }
  }
  p_cmd->tx_packet.length = length;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	831a      	strh	r2, [r3, #24]


  cmdPutch(ch, CMD_STX);
 8000a18:	7cbb      	ldrb	r3, [r7, #18]
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fead 	bl	800077c <cmdPutch>
  cmdPutch(ch, p_cmd->tx_packet.cmd);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	7d1a      	ldrb	r2, [r3, #20]
 8000a26:	7cbb      	ldrb	r3, [r7, #18]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fea6 	bl	800077c <cmdPutch>
  check_sum ^= p_cmd->tx_packet.cmd;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	7d1a      	ldrb	r2, [r3, #20]
 8000a34:	7cfb      	ldrb	r3, [r7, #19]
 8000a36:	4053      	eors	r3, r2
 8000a38:	74fb      	strb	r3, [r7, #19]

  cmdPutch(ch, p_cmd->tx_packet.error);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	7d9a      	ldrb	r2, [r3, #22]
 8000a3e:	7cbb      	ldrb	r3, [r7, #18]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe9a 	bl	800077c <cmdPutch>
  check_sum ^= p_cmd->tx_packet.error;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	7d9a      	ldrb	r2, [r3, #22]
 8000a4c:	7cfb      	ldrb	r3, [r7, #19]
 8000a4e:	4053      	eors	r3, r2
 8000a50:	74fb      	strb	r3, [r7, #19]

  data = p_cmd->tx_packet.length & 0xFF;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	8b1b      	ldrh	r3, [r3, #24]
 8000a56:	747b      	strb	r3, [r7, #17]
  cmdPutch(ch, data); check_sum ^= data;
 8000a58:	7c7a      	ldrb	r2, [r7, #17]
 8000a5a:	7cbb      	ldrb	r3, [r7, #18]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe8c 	bl	800077c <cmdPutch>
 8000a64:	7cfa      	ldrb	r2, [r7, #19]
 8000a66:	7c7b      	ldrb	r3, [r7, #17]
 8000a68:	4053      	eors	r3, r2
 8000a6a:	74fb      	strb	r3, [r7, #19]
  data = (p_cmd->tx_packet.length>>8) & 0xFF;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	8b1b      	ldrh	r3, [r3, #24]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	747b      	strb	r3, [r7, #17]
  cmdPutch(ch, data); check_sum ^= data;
 8000a76:	7c7a      	ldrb	r2, [r7, #17]
 8000a78:	7cbb      	ldrb	r3, [r7, #18]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe7d 	bl	800077c <cmdPutch>
 8000a82:	7cfa      	ldrb	r2, [r7, #19]
 8000a84:	7c7b      	ldrb	r3, [r7, #17]
 8000a86:	4053      	eors	r3, r2
 8000a88:	74fb      	strb	r3, [r7, #19]


  for( i=0; i<p_cmd->tx_packet.length && i<CMD_MAX_DATA_LENGTH; i++ )
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e014      	b.n	8000aba <cmdSendResp+0x102>
  {
    cmdPutch(ch, p_cmd->tx_packet.data[i]);
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	331c      	adds	r3, #28
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	7cbb      	ldrb	r3, [r7, #18]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fe6c 	bl	800077c <cmdPutch>
    check_sum ^= p_cmd->tx_packet.data[i];
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	331c      	adds	r3, #28
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	7cfb      	ldrb	r3, [r7, #19]
 8000ab0:	4053      	eors	r3, r2
 8000ab2:	74fb      	strb	r3, [r7, #19]
  for( i=0; i<p_cmd->tx_packet.length && i<CMD_MAX_DATA_LENGTH; i++ )
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	8b1b      	ldrh	r3, [r3, #24]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d903      	bls.n	8000ace <cmdSendResp+0x116>
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000acc:	d3e0      	bcc.n	8000a90 <cmdSendResp+0xd8>
  }

  cmdPutch(ch, check_sum);
 8000ace:	7cfa      	ldrb	r2, [r7, #19]
 8000ad0:	7cbb      	ldrb	r3, [r7, #18]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe51 	bl	800077c <cmdPutch>
  cmdPutch(ch, CMD_ETX);
 8000ada:	7cbb      	ldrb	r3, [r7, #18]
 8000adc:	2103      	movs	r1, #3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fe4c 	bl	800077c <cmdPutch>
}
 8000ae4:	bf00      	nop
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000af8:	2301      	movs	r3, #1
 8000afa:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d104      	bne.n	8000b26 <qbufferCreate+0x3a>
    p_node->length = 0;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    ret = false;
 8000b22:	2300      	movs	r3, #0
 8000b24:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8000b26:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 8000b28:	4618      	mov	r0, r3
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 8000b32:	b480      	push	{r7}
 8000b34:	b089      	sub	sp, #36	; 0x24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <qbufferWrite+0x1c>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e02d      	b.n	8000baa <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e025      	b.n	8000ba0 <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d101      	bne.n	8000b70 <qbufferWrite+0x3e>
      next_index = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d00c      	beq.n	8000b94 <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4413      	add	r3, r2
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	440a      	add	r2, r1
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e002      	b.n	8000b9a <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 8000b94:	2300      	movs	r3, #0
 8000b96:	77fb      	strb	r3, [r7, #31]
      break;
 8000b98:	e006      	b.n	8000ba8 <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d3d5      	bcc.n	8000b54 <qbufferWrite+0x22>
    }
  }
  return ret;
 8000ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <qbufferRead+0x1c>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e02d      	b.n	8000c2c <qbufferRead+0x78>
  for(i=0; i<length; i++){
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e025      	b.n	8000c22 <qbufferRead+0x6e>
    index      = p_node->ptr_out;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_out + 1;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	3301      	adds	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the out index is end of the buffer.
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d101      	bne.n	8000bf2 <qbufferRead+0x3e>
      next_index = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
    }
    if(index != p_node->ptr_in){      // if the buffer is not empty
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d00c      	beq.n	8000c16 <qbufferRead+0x62>
      p_data[i]       = p_node->p_buf[index];
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	68d1      	ldr	r1, [r2, #12]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	440a      	add	r2, r1
 8000c0a:	7812      	ldrb	r2, [r2, #0]
 8000c0c:	701a      	strb	r2, [r3, #0]
      p_node->ptr_out = next_index;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	e002      	b.n	8000c1c <qbufferRead+0x68>
    }
    else{                             // if the buffer is empty ERR_EMPTY
      ret = false;
 8000c16:	2300      	movs	r3, #0
 8000c18:	77fb      	strb	r3, [r7, #31]
      break;
 8000c1a:	e006      	b.n	8000c2a <qbufferRead+0x76>
  for(i=0; i<length; i++){
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3d5      	bcc.n	8000bd6 <qbufferRead+0x22>
    }
  }
  return ret;
 8000c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3724      	adds	r7, #36	; 0x24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node){  // How many is there the buffer elements could be used.
 8000c36:	b480      	push	{r7}
 8000c38:	b085      	sub	sp, #20
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	441a      	add	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	6892      	ldr	r2, [r2, #8]
 8000c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c56:	fb02 f201 	mul.w	r2, r2, r1
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]

  return length;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node){
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <button_isr>:
  uint32_t released_end_time;
}button_t;

static button_t button_tbl[BUTTON_MAX_CH];

void button_isr(void *arg){
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<BUTTON_MAX_CH; i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e09f      	b.n	8000dd6 <button_isr+0x14e>
    if(buttonGetPressed(i)){
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f905 	bl	8000ea8 <buttonGetPressed>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d056      	beq.n	8000d52 <button_isr+0xca>
      if(button_tbl[i].pressed == false){
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	4950      	ldr	r1, [pc, #320]	; (8000de8 <button_isr+0x160>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d015      	beq.n	8000cea <button_isr+0x62>
        button_tbl[i].pressed_event = true;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	4949      	ldr	r1, [pc, #292]	; (8000de8 <button_isr+0x160>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	3301      	adds	r3, #1
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = millis();
 8000cd2:	7bfc      	ldrb	r4, [r7, #15]
 8000cd4:	f001 fa41 	bl	800215a <millis>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	4a43      	ldr	r2, [pc, #268]	; (8000de8 <button_isr+0x160>)
 8000cdc:	4623      	mov	r3, r4
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4423      	add	r3, r4
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = true;
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	493e      	ldr	r1, [pc, #248]	; (8000de8 <button_isr+0x160>)
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	493a      	ldr	r1, [pc, #232]	; (8000de8 <button_isr+0x160>)
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	440b      	add	r3, r1
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b298      	uxth	r0, r3
 8000d12:	4935      	ldr	r1, [pc, #212]	; (8000de8 <button_isr+0x160>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	3302      	adds	r3, #2
 8000d20:	4602      	mov	r2, r0
 8000d22:	801a      	strh	r2, [r3, #0]

      button_tbl[i].pressed_end_time = millis();
 8000d24:	7bfc      	ldrb	r4, [r7, #15]
 8000d26:	f001 fa18 	bl	800215a <millis>
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	4a2e      	ldr	r2, [pc, #184]	; (8000de8 <button_isr+0x160>)
 8000d2e:	4623      	mov	r3, r4
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4423      	add	r3, r4
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	3308      	adds	r3, #8
 8000d3a:	6019      	str	r1, [r3, #0]
      button_tbl[i].released = false;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	492a      	ldr	r1, [pc, #168]	; (8000de8 <button_isr+0x160>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	330c      	adds	r3, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	e03e      	b.n	8000dd0 <button_isr+0x148>
    }
    else{                                   // not pressed
      if(button_tbl[i].pressed == true){
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4924      	ldr	r1, [pc, #144]	; (8000de8 <button_isr+0x160>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d015      	beq.n	8000d92 <button_isr+0x10a>
        button_tbl[i].released_event = true;
 8000d66:	7bfa      	ldrb	r2, [r7, #15]
 8000d68:	491f      	ldr	r1, [pc, #124]	; (8000de8 <button_isr+0x160>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	330d      	adds	r3, #13
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = millis();
 8000d7a:	7bfc      	ldrb	r4, [r7, #15]
 8000d7c:	f001 f9ed 	bl	800215a <millis>
 8000d80:	4601      	mov	r1, r0
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <button_isr+0x160>)
 8000d84:	4623      	mov	r3, r4
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4423      	add	r3, r4
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3310      	adds	r3, #16
 8000d90:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = false;
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <button_isr+0x160>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	4910      	ldr	r1, [pc, #64]	; (8000de8 <button_isr+0x160>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	330c      	adds	r3, #12
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = millis();
 8000db8:	7bfc      	ldrb	r4, [r7, #15]
 8000dba:	f001 f9ce 	bl	800215a <millis>
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <button_isr+0x160>)
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4423      	add	r3, r4
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	3314      	adds	r3, #20
 8000dce:	6019      	str	r1, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f43f af5c 	beq.w	8000c96 <button_isr+0xe>
    }
  }
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000002c 	.word	0x2000002c

08000dec <buttonInit>:

void buttonInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af02      	add	r7, sp, #8
  swtimer_handle_t h_button_timer;
  uint32_t i;

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e02:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4824      	ldr	r0, [pc, #144]	; (8000e9c <buttonInit+0xb0>)
 8000e0a:	f001 fef5 	bl	8002bf8 <HAL_GPIO_Init>

  for(i=0; i<BUTTON_MAX_CH; i++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e029      	b.n	8000e68 <buttonInit+0x7c>
    button_tbl[i].pressed_cnt    = 0;
 8000e14:	4922      	ldr	r1, [pc, #136]	; (8000ea0 <buttonInit+0xb4>)
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	3302      	adds	r3, #2
 8000e24:	2200      	movs	r2, #0
 8000e26:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed        = 0;
 8000e28:	491d      	ldr	r1, [pc, #116]	; (8000ea0 <buttonInit+0xb4>)
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	440b      	add	r3, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released       = 0;
 8000e3a:	4919      	ldr	r1, [pc, #100]	; (8000ea0 <buttonInit+0xb4>)
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	330c      	adds	r3, #12
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8000e4e:	4914      	ldr	r1, [pc, #80]	; (8000ea0 <buttonInit+0xb4>)
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	330d      	adds	r3, #13
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0d2      	beq.n	8000e14 <buttonInit+0x28>
  }

  h_button_timer = swtimerGetHandle();
 8000e6e:	f000 fdc7 	bl	8001a00 <swtimerGetHandle>
 8000e72:	4603      	mov	r3, r0
 8000e74:	827b      	strh	r3, [r7, #18]
  swtimerSet(h_button_timer, 1, LOOP_TIME, button_isr, NULL);
 8000e76:	8a7b      	ldrh	r3, [r7, #18]
 8000e78:	b2d8      	uxtb	r0, r3
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <buttonInit+0xb8>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	2101      	movs	r1, #1
 8000e84:	f000 fd50 	bl	8001928 <swtimerSet>
  swtimerStart(h_button_timer);
 8000e88:	8a7b      	ldrh	r3, [r7, #18]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fd8d 	bl	80019ac <swtimerStart>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	2000002c 	.word	0x2000002c
 8000ea4:	08000c89 	.word	0x08000c89

08000ea8 <buttonGetPressed>:
  button_tbl[ch].released_start_time   = 0;
  button_tbl[ch].released_end_time     = 0;
}

bool buttonGetPressed(uint8_t ch)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <buttonGetPressed+0x28>)
 8000eb8:	f002 f8b4 	bl	8003024 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <buttonGetPressed+0x1e>
  {
    return true;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <buttonGetPressed+0x20>
  }
  else
  {
    return false;
 8000ec6:	2300      	movs	r3, #0
  }
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40011000 	.word	0x40011000

08000ed4 <eepromInit>:




bool eepromInit()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  uint16_t i;
  for( i=0; i<NB_OF_VAR; i++ )
 8000eda:	2300      	movs	r3, #0
 8000edc:	80fb      	strh	r3, [r7, #6]
 8000ede:	e007      	b.n	8000ef0 <eepromInit+0x1c>
  {
    VirtAddVarTab[i] = i;
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <eepromInit+0x44>)
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for( i=0; i<NB_OF_VAR; i++ )
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	3301      	adds	r3, #1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef4:	d9f4      	bls.n	8000ee0 <eepromInit+0xc>
  }
  HAL_FLASH_Unlock();         // Because Emulating EEPROM on the flash.
 8000ef6:	f001 fcef 	bl	80028d8 <HAL_FLASH_Unlock>
  if( EE_Init() == HAL_OK )
 8000efa:	f000 f811 	bl	8000f20 <EE_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <eepromInit+0x36>
  {
    IsInit = true;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <eepromInit+0x48>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
  }
  return IsInit;
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <eepromInit+0x48>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000048 	.word	0x20000048
 8000f1c:	20000044 	.word	0x20000044

08000f20 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000f26:	2306      	movs	r3, #6
 8000f28:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	83fb      	strh	r3, [r7, #30]
 8000f36:	2300      	movs	r3, #0
 8000f38:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8000f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000f44:	4b9e      	ldr	r3, [pc, #632]	; (80011c0 <EE_Init+0x2a0>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000f4a:	4b9e      	ldr	r3, [pc, #632]	; (80011c4 <EE_Init+0x2a4>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000f54:	4b9a      	ldr	r3, [pc, #616]	; (80011c0 <EE_Init+0x2a0>)
 8000f56:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8000f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f5e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d057      	beq.n	8001016 <EE_Init+0xf6>
 8000f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <EE_Init+0x56>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80f4 	beq.w	800115c <EE_Init+0x23c>
 8000f74:	e18d      	b.n	8001292 <EE_Init+0x372>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000f76:	8c3b      	ldrh	r3, [r7, #32]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d116      	bne.n	8000faa <EE_Init+0x8a>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000f7c:	4890      	ldr	r0, [pc, #576]	; (80011c0 <EE_Init+0x2a0>)
 8000f7e:	f000 f9a9 	bl	80012d4 <EE_VerifyPageFullyErased>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f040 818e 	bne.w	80012a6 <EE_Init+0x386>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000f8a:	f107 0214 	add.w	r2, r7, #20
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fd88 	bl	8002aa8 <HAL_FLASHEx_Erase>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000f9c:	7efb      	ldrb	r3, [r7, #27]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8181 	beq.w	80012a6 <EE_Init+0x386>
          {
            return flashstatus;
 8000fa4:	7efb      	ldrb	r3, [r7, #27]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	e185      	b.n	80012b6 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000faa:	8c3b      	ldrh	r3, [r7, #32]
 8000fac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d125      	bne.n	8001000 <EE_Init+0xe0>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000fb4:	4882      	ldr	r0, [pc, #520]	; (80011c0 <EE_Init+0x2a0>)
 8000fb6:	f000 f98d 	bl	80012d4 <EE_VerifyPageFullyErased>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10e      	bne.n	8000fde <EE_Init+0xbe>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000fc0:	f107 0214 	add.w	r2, r7, #20
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fd6d 	bl	8002aa8 <HAL_FLASHEx_Erase>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000fd2:	7efb      	ldrb	r3, [r7, #27]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <EE_Init+0xbe>
          {
            return flashstatus;
 8000fd8:	7efb      	ldrb	r3, [r7, #27]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	e16b      	b.n	80012b6 <EE_Init+0x396>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	4977      	ldr	r1, [pc, #476]	; (80011c4 <EE_Init+0x2a4>)
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f001 fc05 	bl	80027f8 <HAL_FLASH_Program>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000ff2:	7efb      	ldrb	r3, [r7, #27]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 8156 	beq.w	80012a6 <EE_Init+0x386>
        {
          return flashstatus;
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	e15a      	b.n	80012b6 <EE_Init+0x396>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001000:	f000 f9d8 	bl	80013b4 <EE_Format>
 8001004:	4603      	mov	r3, r0
 8001006:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001008:	7efb      	ldrb	r3, [r7, #27]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 814b 	beq.w	80012a6 <EE_Init+0x386>
        {
          return flashstatus;
 8001010:	7efb      	ldrb	r3, [r7, #27]
 8001012:	b29b      	uxth	r3, r3
 8001014:	e14f      	b.n	80012b6 <EE_Init+0x396>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001016:	8c3b      	ldrh	r3, [r7, #32]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d163      	bne.n	80010e4 <EE_Init+0x1c4>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800101c:	2300      	movs	r3, #0
 800101e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001020:	e030      	b.n	8001084 <EE_Init+0x164>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8001022:	4b69      	ldr	r3, [pc, #420]	; (80011c8 <EE_Init+0x2a8>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	b29a      	uxth	r2, r3
 8001028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800102a:	4968      	ldr	r1, [pc, #416]	; (80011cc <EE_Init+0x2ac>)
 800102c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001030:	429a      	cmp	r2, r3
 8001032:	d101      	bne.n	8001038 <EE_Init+0x118>
          {
            x = varidx;
 8001034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001036:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8001038:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800103a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800103e:	429a      	cmp	r2, r3
 8001040:	d01d      	beq.n	800107e <EE_Init+0x15e>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001044:	4a61      	ldr	r2, [pc, #388]	; (80011cc <EE_Init+0x2ac>)
 8001046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104a:	4961      	ldr	r1, [pc, #388]	; (80011d0 <EE_Init+0x2b0>)
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f967 	bl	8001320 <EE_ReadVariable>
 8001052:	4603      	mov	r3, r0
 8001054:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001056:	8bbb      	ldrh	r3, [r7, #28]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d010      	beq.n	800107e <EE_Init+0x15e>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 800105c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800105e:	4a5b      	ldr	r2, [pc, #364]	; (80011cc <EE_Init+0x2ac>)
 8001060:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001064:	4b5a      	ldr	r3, [pc, #360]	; (80011d0 <EE_Init+0x2b0>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4610      	mov	r0, r2
 800106c:	f000 fa36 	bl	80014dc <EE_VerifyPageFullWriteVariable>
 8001070:	4603      	mov	r3, r0
 8001072:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001074:	8bfb      	ldrh	r3, [r7, #30]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <EE_Init+0x15e>
              {
                return eepromstatus;
 800107a:	8bfb      	ldrh	r3, [r7, #30]
 800107c:	e11b      	b.n	80012b6 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800107e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001080:	3301      	adds	r3, #1
 8001082:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001086:	2b7f      	cmp	r3, #127	; 0x7f
 8001088:	d9cb      	bls.n	8001022 <EE_Init+0x102>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	494b      	ldr	r1, [pc, #300]	; (80011c0 <EE_Init+0x2a0>)
 8001094:	2001      	movs	r0, #1
 8001096:	f001 fbaf 	bl	80027f8 <HAL_FLASH_Program>
 800109a:	4603      	mov	r3, r0
 800109c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800109e:	7efb      	ldrb	r3, [r7, #27]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <EE_Init+0x18a>
        {
          return flashstatus;
 80010a4:	7efb      	ldrb	r3, [r7, #27]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	e105      	b.n	80012b6 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80010ae:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <EE_Init+0x2a4>)
 80010b0:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80010b6:	4843      	ldr	r0, [pc, #268]	; (80011c4 <EE_Init+0x2a4>)
 80010b8:	f000 f90c 	bl	80012d4 <EE_VerifyPageFullyErased>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 80f3 	bne.w	80012aa <EE_Init+0x38a>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80010c4:	f107 0214 	add.w	r2, r7, #20
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fceb 	bl	8002aa8 <HAL_FLASHEx_Erase>
 80010d2:	4603      	mov	r3, r0
 80010d4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80010d6:	7efb      	ldrb	r3, [r7, #27]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80e6 	beq.w	80012aa <EE_Init+0x38a>
          {
            return flashstatus;
 80010de:	7efb      	ldrb	r3, [r7, #27]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	e0e8      	b.n	80012b6 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 80010e4:	8c3b      	ldrh	r3, [r7, #32]
 80010e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <EE_Init+0x226>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <EE_Init+0x2a4>)
 80010f4:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80010fa:	4832      	ldr	r0, [pc, #200]	; (80011c4 <EE_Init+0x2a4>)
 80010fc:	f000 f8ea 	bl	80012d4 <EE_VerifyPageFullyErased>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10e      	bne.n	8001124 <EE_Init+0x204>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001106:	f107 0214 	add.w	r2, r7, #20
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fcca 	bl	8002aa8 <HAL_FLASHEx_Erase>
 8001114:	4603      	mov	r3, r0
 8001116:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001118:	7efb      	ldrb	r3, [r7, #27]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <EE_Init+0x204>
          {
            return flashstatus;
 800111e:	7efb      	ldrb	r3, [r7, #27]
 8001120:	b29b      	uxth	r3, r3
 8001122:	e0c8      	b.n	80012b6 <EE_Init+0x396>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	4924      	ldr	r1, [pc, #144]	; (80011c0 <EE_Init+0x2a0>)
 800112e:	2001      	movs	r0, #1
 8001130:	f001 fb62 	bl	80027f8 <HAL_FLASH_Program>
 8001134:	4603      	mov	r3, r0
 8001136:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001138:	7efb      	ldrb	r3, [r7, #27]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80b5 	beq.w	80012aa <EE_Init+0x38a>
        {
          return flashstatus;
 8001140:	7efb      	ldrb	r3, [r7, #27]
 8001142:	b29b      	uxth	r3, r3
 8001144:	e0b7      	b.n	80012b6 <EE_Init+0x396>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001146:	f000 f935 	bl	80013b4 <EE_Format>
 800114a:	4603      	mov	r3, r0
 800114c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80aa 	beq.w	80012aa <EE_Init+0x38a>
        {
          return flashstatus;
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	b29b      	uxth	r3, r3
 800115a:	e0ac      	b.n	80012b6 <EE_Init+0x396>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800115c:	8c3b      	ldrh	r3, [r7, #32]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <EE_Init+0x258>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001162:	f000 f927 	bl	80013b4 <EE_Format>
 8001166:	4603      	mov	r3, r0
 8001168:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800116a:	7efb      	ldrb	r3, [r7, #27]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 809e 	beq.w	80012ae <EE_Init+0x38e>
        {
          return flashstatus;
 8001172:	7efb      	ldrb	r3, [r7, #27]
 8001174:	b29b      	uxth	r3, r3
 8001176:	e09e      	b.n	80012b6 <EE_Init+0x396>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001178:	8c3b      	ldrh	r3, [r7, #32]
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	4293      	cmp	r3, r2
 8001180:	d11b      	bne.n	80011ba <EE_Init+0x29a>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <EE_Init+0x2a4>)
 8001188:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <EE_Init+0x2a4>)
 8001190:	f000 f8a0 	bl	80012d4 <EE_VerifyPageFullyErased>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 8089 	bne.w	80012ae <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800119c:	f107 0214 	add.w	r2, r7, #20
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fc7f 	bl	8002aa8 <HAL_FLASHEx_Erase>
 80011aa:	4603      	mov	r3, r0
 80011ac:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80011ae:	7efb      	ldrb	r3, [r7, #27]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d07c      	beq.n	80012ae <EE_Init+0x38e>
          {
            return flashstatus;
 80011b4:	7efb      	ldrb	r3, [r7, #27]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	e07d      	b.n	80012b6 <EE_Init+0x396>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011be:	e03a      	b.n	8001236 <EE_Init+0x316>
 80011c0:	08007800 	.word	0x08007800
 80011c4:	08007c00 	.word	0x08007c00
 80011c8:	08007806 	.word	0x08007806
 80011cc:	20000048 	.word	0x20000048
 80011d0:	20000148 	.word	0x20000148
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <EE_Init+0x3a0>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011dc:	4939      	ldr	r1, [pc, #228]	; (80012c4 <EE_Init+0x3a4>)
 80011de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d101      	bne.n	80011ea <EE_Init+0x2ca>
          {
            x = varidx;
 80011e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e8:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 80011ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d01d      	beq.n	8001230 <EE_Init+0x310>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80011f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011f6:	4a33      	ldr	r2, [pc, #204]	; (80012c4 <EE_Init+0x3a4>)
 80011f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011fc:	4932      	ldr	r1, [pc, #200]	; (80012c8 <EE_Init+0x3a8>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f88e 	bl	8001320 <EE_ReadVariable>
 8001204:	4603      	mov	r3, r0
 8001206:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001208:	8bbb      	ldrh	r3, [r7, #28]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d010      	beq.n	8001230 <EE_Init+0x310>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 800120e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001210:	4a2c      	ldr	r2, [pc, #176]	; (80012c4 <EE_Init+0x3a4>)
 8001212:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <EE_Init+0x3a8>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f000 f95d 	bl	80014dc <EE_VerifyPageFullWriteVariable>
 8001222:	4603      	mov	r3, r0
 8001224:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001226:	8bfb      	ldrh	r3, [r7, #30]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <EE_Init+0x310>
              {
                return eepromstatus;
 800122c:	8bfb      	ldrh	r3, [r7, #30]
 800122e:	e042      	b.n	80012b6 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001232:	3301      	adds	r3, #1
 8001234:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001236:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001238:	2b7f      	cmp	r3, #127	; 0x7f
 800123a:	d9cb      	bls.n	80011d4 <EE_Init+0x2b4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	4921      	ldr	r1, [pc, #132]	; (80012cc <EE_Init+0x3ac>)
 8001246:	2001      	movs	r0, #1
 8001248:	f001 fad6 	bl	80027f8 <HAL_FLASH_Program>
 800124c:	4603      	mov	r3, r0
 800124e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001250:	7efb      	ldrb	r3, [r7, #27]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <EE_Init+0x33c>
        {
          return flashstatus;
 8001256:	7efb      	ldrb	r3, [r7, #27]
 8001258:	b29b      	uxth	r3, r3
 800125a:	e02c      	b.n	80012b6 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <EE_Init+0x3b0>)
 8001262:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <EE_Init+0x3b0>)
 800126a:	f000 f833 	bl	80012d4 <EE_VerifyPageFullyErased>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11c      	bne.n	80012ae <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001274:	f107 0214 	add.w	r2, r7, #20
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fc13 	bl	8002aa8 <HAL_FLASHEx_Erase>
 8001282:	4603      	mov	r3, r0
 8001284:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d010      	beq.n	80012ae <EE_Init+0x38e>
          {
            return flashstatus;
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	b29b      	uxth	r3, r3
 8001290:	e011      	b.n	80012b6 <EE_Init+0x396>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 8001292:	f000 f88f 	bl	80013b4 <EE_Format>
 8001296:	4603      	mov	r3, r0
 8001298:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 800129a:	7efb      	ldrb	r3, [r7, #27]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <EE_Init+0x392>
      {
        return flashstatus;
 80012a0:	7efb      	ldrb	r3, [r7, #27]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	e007      	b.n	80012b6 <EE_Init+0x396>
      break;
 80012a6:	bf00      	nop
 80012a8:	e004      	b.n	80012b4 <EE_Init+0x394>
      break;
 80012aa:	bf00      	nop
 80012ac:	e002      	b.n	80012b4 <EE_Init+0x394>
      break;
 80012ae:	bf00      	nop
 80012b0:	e000      	b.n	80012b4 <EE_Init+0x394>
      }
      break;
 80012b2:	bf00      	nop
  }

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3728      	adds	r7, #40	; 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08007c06 	.word	0x08007c06
 80012c4:	20000048 	.word	0x20000048
 80012c8:	20000148 	.word	0x20000148
 80012cc:	08007c00 	.word	0x08007c00
 80012d0:	08007800 	.word	0x08007800

080012d4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 80012e0:	f245 5355 	movw	r3, #21845	; 0x5555
 80012e4:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80012e6:	e00d      	b.n	8001304 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 80012ee:	897b      	ldrh	r3, [r7, #10]
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d002      	beq.n	80012fe <EE_VerifyPageFullyErased+0x2a>
    {
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
      break;
 80012fc:	e006      	b.n	800130c <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3304      	adds	r3, #4
 8001302:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <EE_VerifyPageFullyErased+0x48>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d9ed      	bls.n	80012e8 <EE_VerifyPageFullyErased+0x14>
  }
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	b29b      	uxth	r3, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	08007bff 	.word	0x08007bff

08001320 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 800132c:	2300      	movs	r3, #0
 800132e:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001330:	f245 5355 	movw	r3, #21845	; 0x5555
 8001334:	81bb      	strh	r3, [r7, #12]
 8001336:	2301      	movs	r3, #1
 8001338:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <EE_ReadVariable+0x8c>)
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <EE_ReadVariable+0x8c>)
 8001340:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 f886 	bl	8001454 <EE_FindValidPage>
 8001348:	4603      	mov	r3, r0
 800134a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	2bab      	cmp	r3, #171	; 0xab
 8001350:	d101      	bne.n	8001356 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001352:	23ab      	movs	r3, #171	; 0xab
 8001354:	e025      	b.n	80013a2 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800135c:	331e      	adds	r3, #30
 800135e:	029b      	lsls	r3, r3, #10
 8001360:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	3301      	adds	r3, #1
 8001366:	029a      	lsls	r2, r3, #10
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <EE_ReadVariable+0x90>)
 800136a:	4413      	add	r3, r2
 800136c:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 800136e:	e012      	b.n	8001396 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 8001376:	89ba      	ldrh	r2, [r7, #12]
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429a      	cmp	r2, r3
 800137c:	d108      	bne.n	8001390 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	3b02      	subs	r3, #2
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29a      	uxth	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	82fb      	strh	r3, [r7, #22]

      break;
 800138e:	e007      	b.n	80013a0 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	3b04      	subs	r3, #4
 8001394:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1c9a      	adds	r2, r3, #2
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3e7      	bcc.n	8001370 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 80013a0:	8afb      	ldrh	r3, [r7, #22]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08007800 	.word	0x08007800
 80013b0:	080077fe 	.word	0x080077fe

080013b4 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <EE_Format+0x98>)
 80013c8:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80013ce:	481f      	ldr	r0, [pc, #124]	; (800144c <EE_Format+0x98>)
 80013d0:	f7ff ff80 	bl	80012d4 <EE_VerifyPageFullyErased>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10d      	bne.n	80013f6 <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80013da:	f107 0210 	add.w	r2, r7, #16
 80013de:	463b      	mov	r3, r7
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fb60 	bl	8002aa8 <HAL_FLASHEx_Erase>
 80013e8:	4603      	mov	r3, r0
 80013ea:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <EE_Format+0x42>
    {
      return flashstatus;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	e025      	b.n	8001442 <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	4913      	ldr	r1, [pc, #76]	; (800144c <EE_Format+0x98>)
 8001400:	2001      	movs	r0, #1
 8001402:	f001 f9f9 	bl	80027f8 <HAL_FLASH_Program>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <EE_Format+0x60>
  {
    return flashstatus;
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	e016      	b.n	8001442 <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <EE_Format+0x9c>)
 8001416:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <EE_Format+0x9c>)
 800141a:	f7ff ff5b 	bl	80012d4 <EE_VerifyPageFullyErased>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10d      	bne.n	8001440 <EE_Format+0x8c>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001424:	f107 0210 	add.w	r2, r7, #16
 8001428:	463b      	mov	r3, r7
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fb3b 	bl	8002aa8 <HAL_FLASHEx_Erase>
 8001432:	4603      	mov	r3, r0
 8001434:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <EE_Format+0x8c>
    {
      return flashstatus;
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	e000      	b.n	8001442 <EE_Format+0x8e>
    }
  }

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	08007800 	.word	0x08007800
 8001450:	08007c00 	.word	0x08007c00

08001454 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 800145e:	2306      	movs	r3, #6
 8001460:	81fb      	strh	r3, [r7, #14]
 8001462:	2306      	movs	r3, #6
 8001464:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <EE_FindValidPage+0x80>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <EE_FindValidPage+0x84>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <EE_FindValidPage+0x5c>
 8001478:	2b01      	cmp	r3, #1
 800147a:	d125      	bne.n	80014c8 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 800147c:	89bb      	ldrh	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d108      	bne.n	8001494 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001488:	4293      	cmp	r3, r2
 800148a:	d101      	bne.n	8001490 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800148c:	2300      	movs	r3, #0
 800148e:	e01c      	b.n	80014ca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	e01a      	b.n	80014ca <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d108      	bne.n	80014ac <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 800149a:	89bb      	ldrh	r3, [r7, #12]
 800149c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80014a4:	2340      	movs	r3, #64	; 0x40
 80014a6:	e010      	b.n	80014ca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80014a8:	2300      	movs	r3, #0
 80014aa:	e00e      	b.n	80014ca <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80014ac:	23ab      	movs	r3, #171	; 0xab
 80014ae:	e00c      	b.n	80014ca <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80014b6:	2300      	movs	r3, #0
 80014b8:	e007      	b.n	80014ca <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 80014ba:	89bb      	ldrh	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	e002      	b.n	80014ca <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80014c4:	23ab      	movs	r3, #171	; 0xab
 80014c6:	e000      	b.n	80014ca <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80014c8:	2300      	movs	r3, #0
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	08007800 	.word	0x08007800
 80014d8:	08007c00 	.word	0x08007c00

080014dc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <EE_VerifyPageFullWriteVariable+0xb0>)
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <EE_VerifyPageFullWriteVariable+0xb4>)
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff ffa9 	bl	8001454 <EE_FindValidPage>
 8001502:	4603      	mov	r3, r0
 8001504:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001506:	8a3b      	ldrh	r3, [r7, #16]
 8001508:	2bab      	cmp	r3, #171	; 0xab
 800150a:	d101      	bne.n	8001510 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 800150c:	23ab      	movs	r3, #171	; 0xab
 800150e:	e039      	b.n	8001584 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8001510:	8a3b      	ldrh	r3, [r7, #16]
 8001512:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001516:	331e      	adds	r3, #30
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 800151c:	8a3b      	ldrh	r3, [r7, #16]
 800151e:	3301      	adds	r3, #1
 8001520:	029a      	lsls	r2, r3, #10
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <EE_VerifyPageFullWriteVariable+0xb8>)
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8001528:	e027      	b.n	800157a <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001532:	d11f      	bne.n	8001574 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	f04f 0400 	mov.w	r4, #0
 800153a:	461a      	mov	r2, r3
 800153c:	4623      	mov	r3, r4
 800153e:	6979      	ldr	r1, [r7, #20]
 8001540:	2001      	movs	r0, #1
 8001542:	f001 f959 	bl	80027f8 <HAL_FLASH_Program>
 8001546:	4603      	mov	r3, r0
 8001548:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 800154a:	7cfb      	ldrb	r3, [r7, #19]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return flashstatus;
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	b29b      	uxth	r3, r3
 8001554:	e016      	b.n	8001584 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	1c99      	adds	r1, r3, #2
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	f04f 0400 	mov.w	r4, #0
 8001560:	461a      	mov	r2, r3
 8001562:	4623      	mov	r3, r4
 8001564:	2001      	movs	r0, #1
 8001566:	f001 f947 	bl	80027f8 <HAL_FLASH_Program>
 800156a:	4603      	mov	r3, r0
 800156c:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	b29b      	uxth	r3, r3
 8001572:	e007      	b.n	8001584 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3304      	adds	r3, #4
 8001578:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3d3      	bcc.n	800152a <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }
  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001582:	2380      	movs	r3, #128	; 0x80
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}
 800158c:	08007800 	.word	0x08007800
 8001590:	08007c00 	.word	0x08007c00
 8001594:	080077ff 	.word	0x080077ff

08001598 <flashInit>:
static int32_t getPage(uint32_t Address);



void flashInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
  uint32_t i;


  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	e011      	b.n	80015c8 <flashInit+0x30>
  {
    flash_tbl[i].address = 0x08000000 + ( i * FLASH_PAGE_SIZE ); // Main memory Flash module start at 0x08000000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80015aa:	029a      	lsls	r2, r3, #10
 80015ac:	490a      	ldr	r1, [pc, #40]	; (80015d8 <flashInit+0x40>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    flash_tbl[i].length  = FLASH_PAGE_SIZE;                      // 0x400U = 1024 -> 1Kbyte = Page Size.
 80015b4:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <flashInit+0x40>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c0:	605a      	str	r2, [r3, #4]
  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3301      	adds	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b7f      	cmp	r3, #127	; 0x7f
 80015cc:	d9ea      	bls.n	80015a4 <flashInit+0xc>
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20001220 	.word	0x20001220

080015dc <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int32_t first_page = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  int32_t num_page = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t SECTORError = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef EraseInitStruct;



  HAL_FLASH_Unlock();
 80015f8:	f001 f96e 	bl	80028d8 <HAL_FLASH_Unlock>



  first_page = getPage(addr);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f873 	bl	80016e8 <getPage>
 8001602:	6238      	str	r0, [r7, #32]
  num_page   = getPage(addr + length - 1) - first_page + 1;
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	4413      	add	r3, r2
 800160a:	3b01      	subs	r3, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f86b 	bl	80016e8 <getPage>
 8001612:	4602      	mov	r2, r0
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	3301      	adds	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]


  if (first_page < 0)
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da01      	bge.n	8001626 <flashErase+0x4a>
  {
    return false;
 8001622:	2300      	movs	r3, #0
 8001624:	e01a      	b.n	800165c <flashErase+0x80>
  }

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
  EraseInitStruct.PageAddress = flash_tbl[first_page].address;
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <flashErase+0x88>)
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001632:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbPages     = num_page;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	617b      	str	r3, [r7, #20]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001638:	f107 0218 	add.w	r2, r7, #24
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fa30 	bl	8002aa8 <HAL_FLASHEx_Erase>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <flashErase+0x78>
  {
    ret = false;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }


  HAL_FLASH_Lock();
 8001654:	f001 f966 	bl	8002924 <HAL_FLASH_Lock>


  return ret;
 8001658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20001220 	.word	0x20001220

08001668 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001674:	2301      	movs	r3, #1
 8001676:	77fb      	strb	r3, [r7, #31]
  uint64_t data;


  // 2byte align
  if (addr%2 != 0)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <flashWrite+0x1e>
  {
    return false;
 8001682:	2300      	movs	r3, #0
 8001684:	e02b      	b.n	80016de <flashWrite+0x76>
  }

  HAL_FLASH_Unlock();
 8001686:	f001 f927 	bl	80028d8 <HAL_FLASH_Unlock>

  for (uint32_t i=0; i<length; i += 2)
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	e01f      	b.n	80016d0 <flashWrite+0x68>
  {
    data = (p_data[i+1] << 8) | (p_data[i+0] << 0);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	440a      	add	r2, r1
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016aa:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, data) != HAL_OK)
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	18d1      	adds	r1, r2, r3
 80016b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016b8:	2001      	movs	r0, #1
 80016ba:	f001 f89d 	bl	80027f8 <HAL_FLASH_Program>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <flashWrite+0x62>
    {
      ret = false;
 80016c4:	2300      	movs	r3, #0
 80016c6:	77fb      	strb	r3, [r7, #31]
      break;
 80016c8:	e006      	b.n	80016d8 <flashWrite+0x70>
  for (uint32_t i=0; i<length; i += 2)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	3302      	adds	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3db      	bcc.n	8001690 <flashWrite+0x28>
    }
  }


  HAL_FLASH_Lock();
 80016d8:	f001 f924 	bl	8002924 <HAL_FLASH_Lock>

  return ret;
 80016dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
	...

080016e8 <getPage>:

static int32_t getPage(uint32_t address)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  int32_t page = -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	60bb      	str	r3, [r7, #8]


  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e019      	b.n	8001730 <getPage+0x48>
  {
    if (address >= flash_tbl[i].address && address < (flash_tbl[i].address + flash_tbl[i].length))
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <getPage+0x5c>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d80f      	bhi.n	800172a <getPage+0x42>
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <getPage+0x5c>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001712:	490c      	ldr	r1, [pc, #48]	; (8001744 <getPage+0x5c>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	441a      	add	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d902      	bls.n	800172a <getPage+0x42>
    {
      page = i;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	60bb      	str	r3, [r7, #8]
      break;
 8001728:	e005      	b.n	8001736 <getPage+0x4e>
  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b7f      	cmp	r3, #127	; 0x7f
 8001734:	d9e2      	bls.n	80016fc <getPage+0x14>
    }
  }

  return page;
 8001736:	68bb      	ldr	r3, [r7, #8]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20001220 	.word	0x20001220

08001748 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001752:	2301      	movs	r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 800175a:	2320      	movs	r3, #32
 800175c:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <ledInit+0x28>)
 8001764:	f001 fa48 	bl	8002bf8 <HAL_GPIO_Init>
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40010800 	.word	0x40010800

08001774 <ledToggle>:
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}

void ledToggle(uint8_t ch)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800177e:	2120      	movs	r1, #32
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <ledToggle+0x1c>)
 8001782:	f001 fc66 	bl	8003052 <HAL_GPIO_TogglePin>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40010800 	.word	0x40010800

08001794 <swtimerInit>:

static volatile uint32_t sw_timer_counter      = 0;     // SW Timer Counter
static volatile uint16_t sw_timer_handle_index = 0;
static swtimer_t swtimer_tbl[_HW_DEF_SW_TIMER_MAX];

bool swtimerInit(void){
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t execute = 0;

  if(execute == 1){  // if you have already run it,
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <swtimerInit+0x84>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <swtimerInit+0x12>
    return false;    // return false.
 80017a2:	2300      	movs	r3, #0
 80017a4:	e033      	b.n	800180e <swtimerInit+0x7a>
  }

  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 80017a6:	2300      	movs	r3, #0
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e029      	b.n	8001800 <swtimerInit+0x6c>
    swtimer_tbl[i].Timer_En = OFF;
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	491b      	ldr	r1, [pc, #108]	; (800181c <swtimerInit+0x88>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn = 0;
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	4916      	ldr	r1, [pc, #88]	; (800181c <swtimerInit+0x88>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3304      	adds	r3, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	4911      	ldr	r1, [pc, #68]	; (800181c <swtimerInit+0x88>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3308      	adds	r3, #8
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct = NULL;
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <swtimerInit+0x88>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	330c      	adds	r3, #12
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	3301      	adds	r3, #1
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b07      	cmp	r3, #7
 8001804:	d9d2      	bls.n	80017ac <swtimerInit+0x18>
  }

  execute = 1;
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <swtimerInit+0x84>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
  return true;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	200001f4 	.word	0x200001f4
 800181c:	20000154 	.word	0x20000154

08001820 <swtimerISR>:


void swtimerISR(void){    // = Software Timer Interrupt Service Request = SW Timer Interrupt Handler
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  uint8_t i;
  sw_timer_counter++;     // count up
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <swtimerISR+0xfc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a3b      	ldr	r2, [pc, #236]	; (800191c <swtimerISR+0xfc>)
 800182e:	6013      	str	r3, [r2, #0]

  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 8001830:	2300      	movs	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	e063      	b.n	80018fe <swtimerISR+0xde>
    if( swtimer_tbl[i].Timer_En == ON ){                               // If the Timer is enable
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	4939      	ldr	r1, [pc, #228]	; (8001920 <swtimerISR+0x100>)
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d156      	bne.n	80018f8 <swtimerISR+0xd8>
      swtimer_tbl[i].Timer_Ctn--;                                      // Decount the Timer counter
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	4934      	ldr	r1, [pc, #208]	; (8001920 <swtimerISR+0x100>)
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3304      	adds	r3, #4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	1e59      	subs	r1, r3, #1
 800185e:	4830      	ldr	r0, [pc, #192]	; (8001920 <swtimerISR+0x100>)
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	3304      	adds	r3, #4
 800186c:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Ctn == 0){                               // If the overflow happens ( because of the short of the timer )
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	492b      	ldr	r1, [pc, #172]	; (8001920 <swtimerISR+0x100>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3304      	adds	r3, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d139      	bne.n	80018f8 <swtimerISR+0xd8>
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME){                     // If the Mode is ONE TIME
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	4926      	ldr	r1, [pc, #152]	; (8001920 <swtimerISR+0x100>)
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3301      	adds	r3, #1
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d108      	bne.n	80018ac <swtimerISR+0x8c>
          swtimer_tbl[i].Timer_En = OFF;                               // Timer is Unable
 800189a:	79fa      	ldrb	r2, [r7, #7]
 800189c:	4920      	ldr	r1, [pc, #128]	; (8001920 <swtimerISR+0x100>)
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
        }
        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;          // Initialize the Timer
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	79f9      	ldrb	r1, [r7, #7]
 80018b0:	481b      	ldr	r0, [pc, #108]	; (8001920 <swtimerISR+0x100>)
 80018b2:	460b      	mov	r3, r1
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4403      	add	r3, r0
 80018bc:	3308      	adds	r3, #8
 80018be:	6819      	ldr	r1, [r3, #0]
 80018c0:	4817      	ldr	r0, [pc, #92]	; (8001920 <swtimerISR+0x100>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4403      	add	r3, r0
 80018cc:	3304      	adds	r3, #4
 80018ce:	6019      	str	r1, [r3, #0]
        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);          // Run the Timer function
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4913      	ldr	r1, [pc, #76]	; (8001920 <swtimerISR+0x100>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	330c      	adds	r3, #12
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <swtimerISR+0x100>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4403      	add	r3, r0
 80018f0:	3310      	adds	r3, #16
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	4788      	blx	r1
  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	3301      	adds	r3, #1
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b07      	cmp	r3, #7
 8001902:	d806      	bhi.n	8001912 <swtimerISR+0xf2>
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <swtimerISR+0x104>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	429a      	cmp	r2, r3
 8001910:	d391      	bcc.n	8001836 <swtimerISR+0x16>
      }
    }
  }
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000014c 	.word	0x2000014c
 8001920:	20000154 	.word	0x20000154
 8001924:	20000150 	.word	0x20000150

08001928 <swtimerSet>:


void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *), void *arg){
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	4613      	mov	r3, r2
 8001938:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	491a      	ldr	r1, [pc, #104]	; (80019a8 <swtimerSet+0x80>)
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3301      	adds	r3, #1
 800194a:	7bba      	ldrb	r2, [r7, #14]
 800194c:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	4915      	ldr	r1, [pc, #84]	; (80019a8 <swtimerSet+0x80>)
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	330c      	adds	r3, #12
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	4910      	ldr	r1, [pc, #64]	; (80019a8 <swtimerSet+0x80>)
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3310      	adds	r3, #16
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	490b      	ldr	r1, [pc, #44]	; (80019a8 <swtimerSet+0x80>)
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	3304      	adds	r3, #4
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <swtimerSet+0x80>)
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3308      	adds	r3, #8
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000154 	.word	0x20000154

080019ac <swtimerStart>:



void swtimerStart(uint8_t TmrNum){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if(TmrNum < _HW_DEF_SW_TIMER_MAX){
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d81a      	bhi.n	80019f2 <swtimerStart+0x46>
    swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	79f9      	ldrb	r1, [r7, #7]
 80019c0:	480e      	ldr	r0, [pc, #56]	; (80019fc <swtimerStart+0x50>)
 80019c2:	460b      	mov	r3, r1
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4403      	add	r3, r0
 80019cc:	3308      	adds	r3, #8
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	480a      	ldr	r0, [pc, #40]	; (80019fc <swtimerStart+0x50>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4403      	add	r3, r0
 80019dc:	3304      	adds	r3, #4
 80019de:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En  = ON;
 80019e0:	79fa      	ldrb	r2, [r7, #7]
 80019e2:	4906      	ldr	r1, [pc, #24]	; (80019fc <swtimerStart+0x50>)
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000154 	.word	0x20000154

08001a00 <swtimerGetHandle>:
void swtimerReset(uint8_t TmrNum){
  swtimer_tbl[TmrNum].Timer_En  = OFF;
  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void){
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <swtimerGetHandle+0x2c>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	80fb      	strh	r3, [r7, #6]
  sw_timer_handle_index++;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <swtimerGetHandle+0x2c>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <swtimerGetHandle+0x2c>)
 8001a1a:	801a      	strh	r2, [r3, #0]
  return TmrIndex;
 8001a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000150 	.word	0x20000150

08001a30 <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	e01f      	b.n	8001a7c <uartInit+0x4c>
  {
    uart_tbl[i].is_open = false;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <uartInit+0x5c>)
 8001a40:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <uartInit+0x5c>)
 8001a52:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3309      	adds	r3, #9
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <uartInit+0x5c>)
 8001a66:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3308      	adds	r3, #8
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d9dc      	bls.n	8001a3c <uartInit+0xc>
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20001620 	.word	0x20001620

08001a90 <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;
  switch(channel){
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <uartOpen+0x1c>
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d054      	beq.n	8001b54 <uartOpen+0xc4>
 8001aaa:	e076      	b.n	8001b9a <uartOpen+0x10a>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <uartOpen+0x114>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <uartOpen+0x118>)
 8001ac0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
      p_uart->handle.Init.BaudRate   = baud;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	220c      	movs	r2, #12
 8001af0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

      p_uart->rx_mode = UART_MODE_DMA;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2202      	movs	r2, #2
 8001af8:	725a      	strb	r2, [r3, #9]

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 ffc2 	bl	8003a8a <HAL_UART_DeInit>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <uartOpen+0x82>
        ret = false;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
        break;
 8001b10:	e043      	b.n	8001b9a <uartOpen+0x10a>
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 ff69 	bl	80039f0 <HAL_UART_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <uartOpen+0x9a>
        ret = false;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
        break;
 8001b28:	e037      	b.n	8001b9a <uartOpen+0x10a>
      }
      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	330a      	adds	r3, #10
 8001b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe ffd7 	bl	8000aec <qbufferCreate>

     // p_uart->rx_mode = UART_MODE_INTERRUPT;
      p_uart->baud    = baud;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 f82d 	bl	8001bac <uartStartRx>
      break;
 8001b52:	e022      	b.n	8001b9a <uartOpen+0x10a>

    case _DEF_UART2 :
      p_uart = &uart_tbl[channel];
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <uartOpen+0x114>)
 8001b60:	4413      	add	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
      p_uart->baud = baud;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
      p_uart->rx_mode = UART_MODE_LOOPBACK;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2204      	movs	r2, #4
 8001b74:	725a      	strb	r2, [r3, #9]
      p_uart->tx_mode = UART_MODE_LOOPBACK;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	721a      	strb	r2, [r3, #8]

      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	330a      	adds	r3, #10
 8001b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7fe ffae 	bl	8000aec <qbufferCreate>
      uartStartRx(channel);
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f80a 	bl	8001bac <uartStartRx>
      break;
 8001b98:	bf00      	nop
  }
  return ret;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20001620 	.word	0x20001620
 8001ba8:	40004400 	.word	0x40004400

08001bac <uartStartRx>:

void uartStartRx(uint8_t channel){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel to uart.
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <uartStartRx+0x60>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	7a5b      	ldrb	r3, [r3, #9]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <uartStartRx+0x34>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	330a      	adds	r3, #10
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f002 f819 	bl	8003c12 <HAL_UART_Receive_IT>
  }

  if (p_uart->rx_mode == UART_MODE_DMA)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	7a5b      	ldrb	r3, [r3, #9]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d10c      	bne.n	8001c02 <uartStartRx+0x56>
    {
      HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f002 f85d 	bl	8003cbc <HAL_UART_Receive_DMA>
    }
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20001620 	.word	0x20001620

08001c10 <uartAvailable>:
    }
  }
  return ret;
}

uint32_t uartAvailable(uint8_t channel){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;
  uart_t *p_uart = &uart_tbl[channel];
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <uartAvailable+0xa8>)
 8001c26:	4413      	add	r3, r2
 8001c28:	60bb      	str	r3, [r7, #8]

  if(channel >= UART_MAX_CH)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d901      	bls.n	8001c34 <uartAvailable+0x24>
    return 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e03c      	b.n	8001cae <uartAvailable+0x9e>

  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10e      	bne.n	8001c5a <uartAvailable+0x4a>
  {
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <uartAvailable+0xa8>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fff0 	bl	8000c36 <qbufferAvailable>
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	e028      	b.n	8001cac <uartAvailable+0x9c>
  }
  else if (p_uart->rx_mode == UART_MODE_DMA)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	7a5b      	ldrb	r3, [r3, #9]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d112      	bne.n	8001c88 <uartAvailable+0x78>
  {
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma_rx.Instance->CNDTR;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	1ad2      	subs	r2, r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe ffd9 	bl	8000c36 <qbufferAvailable>
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	e011      	b.n	8001cac <uartAvailable+0x9c>

  }
  else if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	7a5b      	ldrb	r3, [r3, #9]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d10d      	bne.n	8001cac <uartAvailable+0x9c>
  {
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <uartAvailable+0xa8>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe ffc6 	bl	8000c36 <qbufferAvailable>
 8001caa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20001620 	.word	0x20001620

08001cbc <uartFlush>:

void uartFlush(uint8_t channel){
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if (uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4a38      	ldr	r2, [pc, #224]	; (8001dac <uartFlush+0xf0>)
 8001cca:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3309      	adds	r3, #9
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10c      	bne.n	8001cf6 <uartFlush+0x3a>
  {
      qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <uartFlush+0xf0>)
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe ffba 	bl	8000c6a <qbufferFlush>
  }
  if (uart_tbl[channel].rx_mode == UART_MODE_DMA)
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <uartFlush+0xf0>)
 8001cfa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3309      	adds	r3, #9
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d133      	bne.n	8001d74 <uartFlush+0xb8>
  {
      uart_tbl[channel].qbuffer_rx.ptr_in  = uart_tbl[channel].qbuffer_rx.length - uart_tbl[channel].hdma_rx.Instance->CNDTR;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	4926      	ldr	r1, [pc, #152]	; (8001dac <uartFlush+0xf0>)
 8001d12:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8001d16:	fb00 f202 	mul.w	r2, r0, r2
 8001d1a:	440a      	add	r2, r1
 8001d1c:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8001d20:	6811      	ldr	r1, [r2, #0]
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	4821      	ldr	r0, [pc, #132]	; (8001dac <uartFlush+0xf0>)
 8001d26:	f44f 74d0 	mov.w	r4, #416	; 0x1a0
 8001d2a:	fb04 f202 	mul.w	r2, r4, r2
 8001d2e:	4402      	add	r2, r0
 8001d30:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	6852      	ldr	r2, [r2, #4]
 8001d38:	1a8a      	subs	r2, r1, r2
 8001d3a:	491c      	ldr	r1, [pc, #112]	; (8001dac <uartFlush+0xf0>)
 8001d3c:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8001d40:	fb00 f303 	mul.w	r3, r0, r3
 8001d44:	440b      	add	r3, r1
 8001d46:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001d4a:	601a      	str	r2, [r3, #0]
      uart_tbl[channel].qbuffer_rx.ptr_out = uart_tbl[channel].qbuffer_rx.ptr_in;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	4916      	ldr	r1, [pc, #88]	; (8001dac <uartFlush+0xf0>)
 8001d52:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8001d56:	fb00 f202 	mul.w	r2, r0, r2
 8001d5a:	440a      	add	r2, r1
 8001d5c:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	4912      	ldr	r1, [pc, #72]	; (8001dac <uartFlush+0xf0>)
 8001d64:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8001d68:	fb00 f303 	mul.w	r3, r0, r3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001d72:	601a      	str	r2, [r3, #0]
  }
  if (uart_tbl[channel].rx_mode == UART_MODE_LOOPBACK)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <uartFlush+0xf0>)
 8001d78:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	3309      	adds	r3, #9
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d10c      	bne.n	8001da4 <uartFlush+0xe8>
  {
      qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <uartFlush+0xf0>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ff63 	bl	8000c6a <qbufferFlush>
  }
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	20001620 	.word	0x20001620

08001db0 <uartPutch>:


void uartPutch(uint8_t channel, uint8_t ch){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	460a      	mov	r2, r1
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	71bb      	strb	r3, [r7, #6]
  uartWrite(channel, &ch, 1);
 8001dc0:	1db9      	adds	r1, r7, #6
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f804 	bl	8001dd4 <uartWrite>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <uartWrite>:
  }
  return ret;
}


int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uart_t *p_uart = &uart_tbl[channel];
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <uartWrite+0x74>)
 8001df2:	4413      	add	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
  /*if(p_uart->x_mode == UART_MODE_INTERRUPT){
    if( HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK ){
      ret = length;
    }
  }*/
  if (p_uart->tx_mode == UART_MODE_POLLING)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	7a1b      	ldrb	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10e      	bne.n	8001e1c <uartWrite+0x48>
    {
      if (HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	f001 fe68 	bl	8003ae2 <HAL_UART_Transmit>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <uartWrite+0x48>
      {
        ret = length;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	617b      	str	r3, [r7, #20]
      }
    }

  if (p_uart->tx_mode == UART_MODE_LOOPBACK)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	7a1b      	ldrb	r3, [r3, #8]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d10c      	bne.n	8001e3e <uartWrite+0x6a>
  {
    if (qbufferWrite(&p_uart->qbuffer_rx, p_data, length) == true)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fe7f 	bl	8000b32 <qbufferWrite>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <uartWrite+0x6a>
    {
      ret = length;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001e3e:	697b      	ldr	r3, [r7, #20]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20001620 	.word	0x20001620

08001e4c <uartRead>:

uint8_t uartRead(uint8_t channel){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	72fb      	strb	r3, [r7, #11]
  uart_t *p_uart = &uart_tbl[channel];
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <uartRead+0x78>)
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	7a5b      	ldrb	r3, [r3, #9]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <uartRead+0x38>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001e78:	f107 010b 	add.w	r1, r7, #11
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fe98 	bl	8000bb4 <qbufferRead>
  }
  if (p_uart->rx_mode == UART_MODE_DMA)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	7a5b      	ldrb	r3, [r3, #9]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d108      	bne.n	8001e9e <uartRead+0x52>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001e92:	f107 010b 	add.w	r1, r7, #11
 8001e96:	2201      	movs	r2, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fe8b 	bl	8000bb4 <qbufferRead>
  }
  if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	7a5b      	ldrb	r3, [r3, #9]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d108      	bne.n	8001eb8 <uartRead+0x6c>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001eac:	f107 010b 	add.w	r1, r7, #11
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fe7e 	bl	8000bb4 <qbufferRead>
  }
  return ret;
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20001620 	.word	0x20001620

08001ec8 <uartRxHandler>:

  return ret;
}

void uartRxHandler(uint8_t channel)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <uartRxHandler+0x4c>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	7a5b      	ldrb	r3, [r3, #9]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d110      	bne.n	8001f0c <uartRxHandler+0x44>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	330a      	adds	r3, #10
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fe1b 	bl	8000b32 <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
      uartStartRx(channel);
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fe50 	bl	8001bac <uartStartRx>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20001620 	.word	0x20001620

08001f18 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fec9 	bl	8001cbc <uartFlush>
  uartStartRx(channel);
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fe3d 	bl	8001bac <uartStartRx>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_UART_RxCpltCallback+0x20>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d102      	bne.n	8001f54 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff ffba 	bl	8001ec8 <uartRxHandler>
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40004400 	.word	0x40004400

08001f60 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f001 fd8e 	bl	8003a8a <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f001 fd3e 	bl	80039f0 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_UART_ErrorCallback+0x2c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d102      	bne.n	8001f84 <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff ffca 	bl	8001f18 <uartErrHandler>
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004400 	.word	0x40004400

08001f90 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <USART2_IRQHandler+0x10>)
 8001f96:	f001 ff11 	bl	8003dbc <HAL_UART_IRQHandler>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20001780 	.word	0x20001780

08001fa4 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <HAL_UART_MspInit+0x114>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d17c      	bne.n	80020b0 <HAL_UART_MspInit+0x10c>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4a41      	ldr	r2, [pc, #260]	; (80020bc <HAL_UART_MspInit+0x118>)
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_UART_MspInit+0x118>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <HAL_UART_MspInit+0x118>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fce:	4a3b      	ldr	r2, [pc, #236]	; (80020bc <HAL_UART_MspInit+0x118>)
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_UART_MspInit+0x118>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_UART_MspInit+0x118>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4830      	ldr	r0, [pc, #192]	; (80020c0 <HAL_UART_MspInit+0x11c>)
 8001ffe:	f000 fdfb 	bl	8002bf8 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8002002:	2308      	movs	r3, #8
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	482b      	ldr	r0, [pc, #172]	; (80020c0 <HAL_UART_MspInit+0x11c>)
 8002012:	f000 fdf1 	bl	8002bf8 <HAL_GPIO_Init>

    if (uart_tbl[_DEF_UART1].rx_mode == UART_MODE_DMA)
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_UART_MspInit+0x120>)
 8002018:	7a5b      	ldrb	r3, [r3, #9]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d140      	bne.n	80020a0 <HAL_UART_MspInit+0xfc>
    {
      uart_t *p_uart = &uart_tbl[_DEF_UART1];
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_UART_MspInit+0x120>)
 8002020:	627b      	str	r3, [r7, #36]	; 0x24


      __HAL_RCC_DMA1_CLK_ENABLE();
 8002022:	4a26      	ldr	r2, [pc, #152]	; (80020bc <HAL_UART_MspInit+0x118>)
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_UART_MspInit+0x118>)
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6153      	str	r3, [r2, #20]
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_UART_MspInit+0x118>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]


      /* Configure the DMA handler for reception process */
      p_uart->hdma_rx.Instance                 = DMA1_Channel6;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <HAL_UART_MspInit+0x124>)
 800203e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      p_uart->hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	2200      	movs	r2, #0
 8002046:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
      p_uart->hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	2200      	movs	r2, #0
 800204e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
      p_uart->hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
      p_uart->hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	2200      	movs	r2, #0
 800205e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      p_uart->hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	2200      	movs	r2, #0
 8002066:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
      p_uart->hdma_rx.Init.Mode                = DMA_CIRCULAR;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	2220      	movs	r2, #32
 800206e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      p_uart->hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002078:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138


      HAL_DMA_Init(&p_uart->hdma_rx);
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fa54 	bl	8002530 <HAL_DMA_Init>

          /* Associate the initialized DMA handle to the the UART handle */
      __HAL_LINKDMA((&p_uart->handle), hdmarx, (p_uart->hdma_rx));
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    }

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2100      	movs	r1, #0
 80020a4:	2026      	movs	r0, #38	; 0x26
 80020a6:	f000 f9fe 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020aa:	2026      	movs	r0, #38	; 0x26
 80020ac:	f000 fa17 	bl	80024de <HAL_NVIC_EnableIRQ>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40004400 	.word	0x40004400
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010800 	.word	0x40010800
 80020c4:	20001620 	.word	0x20001620
 80020c8:	4002006c 	.word	0x4002006c

080020cc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_UART_MspDeInit+0x48>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d116      	bne.n	800210c <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <HAL_UART_MspDeInit+0x4c>)
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_UART_MspDeInit+0x4c>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e8:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_UART_MspDeInit+0x4c>)
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_UART_MspDeInit+0x4c>)
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80020f4:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80020f6:	2104      	movs	r1, #4
 80020f8:	4808      	ldr	r0, [pc, #32]	; (800211c <HAL_UART_MspDeInit+0x50>)
 80020fa:	f000 fed7 	bl	8002eac <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 80020fe:	2108      	movs	r1, #8
 8002100:	4806      	ldr	r0, [pc, #24]	; (800211c <HAL_UART_MspDeInit+0x50>)
 8002102:	f000 fed3 	bl	8002eac <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002106:	2026      	movs	r0, #38	; 0x26
 8002108:	f000 f9f7 	bl	80024fa <HAL_NVIC_DisableIRQ>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40004400 	.word	0x40004400
 8002118:	40021000 	.word	0x40021000
 800211c:	40010800 	.word	0x40010800

08002120 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  bspInit();
 8002124:	f7fe fa3a 	bl	800059c <bspInit>

  swtimerInit();
 8002128:	f7ff fb34 	bl	8001794 <swtimerInit>
  ledInit();
 800212c:	f7ff fb0c 	bl	8001748 <ledInit>
  buttonInit();
 8002130:	f7fe fe5c 	bl	8000dec <buttonInit>
  uartInit();
 8002134:	f7ff fc7c 	bl	8001a30 <uartInit>
  flashInit();
 8002138:	f7ff fa2e 	bl	8001598 <flashInit>
  eepromInit();
 800213c:	f7fe feca 	bl	8000ed4 <eepromInit>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <delay>:


void delay(uint32_t time_ms)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f891 	bl	8002274 <HAL_Delay>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <millis>:


uint32_t millis(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800215e:	f000 f87f 	bl	8002260 <HAL_GetTick>
 8002162:	4603      	mov	r3, r0
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_Init+0x28>)
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x28>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 f989 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	200f      	movs	r0, #15
 8002180:	f000 f82c 	bl	80021dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f000 f81e 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_DeInit+0x2c>)
 800219a:	f04f 32ff 	mov.w	r2, #4294967295
 800219e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_DeInit+0x2c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_DeInit+0x2c>)
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_DeInit+0x2c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80021b4:	f000 f80c 	bl	80021d0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_InitTick+0x54>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x58>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f98b 	bl	8002516 <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f000 f945 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_InitTick+0x5c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000000 	.word	0x20000000
 8002234:	20000008 	.word	0x20000008
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_IncTick+0x1c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_IncTick+0x20>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <HAL_IncTick+0x20>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000008 	.word	0x20000008
 800225c:	20001960 	.word	0x20001960

08002260 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return uwTick;
 8002264:	4b02      	ldr	r3, [pc, #8]	; (8002270 <HAL_GetTick+0x10>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20001960 	.word	0x20001960

08002274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fff0 	bl	8002260 <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d005      	beq.n	800229a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_Delay+0x40>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800229a:	bf00      	nop
 800229c:	f7ff ffe0 	bl	8002260 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad2      	subs	r2, r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3f7      	bcc.n	800229c <HAL_Delay+0x28>
  {
  }
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000008 	.word	0x20000008

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_EnableIRQ+0x34>)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	79fa      	ldrb	r2, [r7, #7]
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100

08002354 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	db10      	blt.n	8002388 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002366:	490b      	ldr	r1, [pc, #44]	; (8002394 <__NVIC_DisableIRQ+0x40>)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	79fa      	ldrb	r2, [r7, #7]
 8002370:	f002 021f 	and.w	r2, r2, #31
 8002374:	2001      	movs	r0, #1
 8002376:	fa00 f202 	lsl.w	r2, r0, r2
 800237a:	3320      	adds	r3, #32
 800237c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002384:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	490d      	ldr	r1, [pc, #52]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	4909      	ldr	r1, [pc, #36]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	2201      	movs	r2, #1
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	1e5a      	subs	r2, r3, #1
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	401a      	ands	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002432:	2101      	movs	r1, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	1e59      	subs	r1, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff92 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff0d 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff22 	bl	8002300 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff92 	bl	80023ec <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff61 	bl	8002398 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff15 	bl	800231c <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff23 	bl	8002354 <__NVIC_DisableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff94 	bl	800244c <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e043      	b.n	80025ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_DMA_Init+0xa8>)
 800254e:	4413      	add	r3, r2
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_DMA_Init+0xac>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	009a      	lsls	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_DMA_Init+0xb0>)
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800257a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800257e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	bffdfff8 	.word	0xbffdfff8
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	40020000 	.word	0x40020000

080025e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Start_IT+0x20>
 8002600:	2302      	movs	r3, #2
 8002602:	e04a      	b.n	800269a <HAL_DMA_Start_IT+0xb6>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002612:	2b01      	cmp	r3, #1
 8002614:	d13a      	bne.n	800268c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f8ae 	bl	800279c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	f042 020e 	orr.w	r2, r2, #14
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e00f      	b.n	800267a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	f022 0204 	bic.w	r2, r2, #4
 8002668:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f042 020a 	orr.w	r2, r2, #10
 8002678:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e005      	b.n	8002698 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002694:	2302      	movs	r3, #2
 8002696:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d005      	beq.n	80026c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2204      	movs	r2, #4
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e057      	b.n	8002776 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	f022 020e 	bic.w	r2, r2, #14
 80026d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026e6:	4a26      	ldr	r2, [pc, #152]	; (8002780 <HAL_DMA_Abort_IT+0xdc>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_DMA_Abort_IT+0xe0>)
 80026f0:	4299      	cmp	r1, r3
 80026f2:	d02e      	beq.n	8002752 <HAL_DMA_Abort_IT+0xae>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_DMA_Abort_IT+0xe4>)
 80026fc:	4299      	cmp	r1, r3
 80026fe:	d026      	beq.n	800274e <HAL_DMA_Abort_IT+0xaa>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_DMA_Abort_IT+0xe8>)
 8002708:	4299      	cmp	r1, r3
 800270a:	d01d      	beq.n	8002748 <HAL_DMA_Abort_IT+0xa4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <HAL_DMA_Abort_IT+0xec>)
 8002714:	4299      	cmp	r1, r3
 8002716:	d014      	beq.n	8002742 <HAL_DMA_Abort_IT+0x9e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_DMA_Abort_IT+0xf0>)
 8002720:	4299      	cmp	r1, r3
 8002722:	d00b      	beq.n	800273c <HAL_DMA_Abort_IT+0x98>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_DMA_Abort_IT+0xf4>)
 800272c:	4299      	cmp	r1, r3
 800272e:	d102      	bne.n	8002736 <HAL_DMA_Abort_IT+0x92>
 8002730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002734:	e00e      	b.n	8002754 <HAL_DMA_Abort_IT+0xb0>
 8002736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800273a:	e00b      	b.n	8002754 <HAL_DMA_Abort_IT+0xb0>
 800273c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002740:	e008      	b.n	8002754 <HAL_DMA_Abort_IT+0xb0>
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	e005      	b.n	8002754 <HAL_DMA_Abort_IT+0xb0>
 8002748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800274c:	e002      	b.n	8002754 <HAL_DMA_Abort_IT+0xb0>
 800274e:	2310      	movs	r3, #16
 8002750:	e000      	b.n	8002754 <HAL_DMA_Abort_IT+0xb0>
 8002752:	2301      	movs	r3, #1
 8002754:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    } 
  }
  return status;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40020000 	.word	0x40020000
 8002784:	40020008 	.word	0x40020008
 8002788:	4002001c 	.word	0x4002001c
 800278c:	40020030 	.word	0x40020030
 8002790:	40020044 	.word	0x40020044
 8002794:	40020058 	.word	0x40020058
 8002798:	4002006c 	.word	0x4002006c

0800279c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d108      	bne.n	80027dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027da:	e007      	b.n	80027ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_FLASH_Program+0xd8>)
 8002814:	7e1b      	ldrb	r3, [r3, #24]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_FLASH_Program+0x26>
 800281a:	2302      	movs	r3, #2
 800281c:	e054      	b.n	80028c8 <HAL_FLASH_Program+0xd0>
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_FLASH_Program+0xd8>)
 8002820:	2201      	movs	r2, #1
 8002822:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002824:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002828:	f000 f8a8 	bl	800297c <FLASH_WaitForLastOperation>
 800282c:	4603      	mov	r3, r0
 800282e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d144      	bne.n	80028c0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800283c:	2301      	movs	r3, #1
 800283e:	757b      	strb	r3, [r7, #21]
 8002840:	e007      	b.n	8002852 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d102      	bne.n	800284e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002848:	2302      	movs	r3, #2
 800284a:	757b      	strb	r3, [r7, #21]
 800284c:	e001      	b.n	8002852 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800284e:	2304      	movs	r3, #4
 8002850:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002852:	2300      	movs	r3, #0
 8002854:	75bb      	strb	r3, [r7, #22]
 8002856:	e02d      	b.n	80028b4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002858:	7dbb      	ldrb	r3, [r7, #22]
 800285a:	005a      	lsls	r2, r3, #1
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	eb02 0e03 	add.w	lr, r2, r3
 8002862:	7dbb      	ldrb	r3, [r7, #22]
 8002864:	0119      	lsls	r1, r3, #4
 8002866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800286a:	f1c1 0620 	rsb	r6, r1, #32
 800286e:	f1a1 0020 	sub.w	r0, r1, #32
 8002872:	fa22 f401 	lsr.w	r4, r2, r1
 8002876:	fa03 f606 	lsl.w	r6, r3, r6
 800287a:	4334      	orrs	r4, r6
 800287c:	fa23 f000 	lsr.w	r0, r3, r0
 8002880:	4304      	orrs	r4, r0
 8002882:	fa23 f501 	lsr.w	r5, r3, r1
 8002886:	b2a3      	uxth	r3, r4
 8002888:	4619      	mov	r1, r3
 800288a:	4670      	mov	r0, lr
 800288c:	f000 f85a 	bl	8002944 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002890:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002894:	f000 f872 	bl	800297c <FLASH_WaitForLastOperation>
 8002898:	4603      	mov	r3, r0
 800289a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_FLASH_Program+0xdc>)
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_FLASH_Program+0xdc>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80028ae:	7dbb      	ldrb	r3, [r7, #22]
 80028b0:	3301      	adds	r3, #1
 80028b2:	75bb      	strb	r3, [r7, #22]
 80028b4:	7dba      	ldrb	r2, [r7, #22]
 80028b6:	7d7b      	ldrb	r3, [r7, #21]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3cd      	bcc.n	8002858 <HAL_FLASH_Program+0x60>
 80028bc:	e000      	b.n	80028c0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80028be:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_FLASH_Program+0xd8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	761a      	strb	r2, [r3, #24]

  return status;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d0:	20001968 	.word	0x20001968
 80028d4:	40022000 	.word	0x40022000

080028d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_FLASH_Unlock+0x40>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_FLASH_Unlock+0x40>)
 80028f0:	4a0a      	ldr	r2, [pc, #40]	; (800291c <HAL_FLASH_Unlock+0x44>)
 80028f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_FLASH_Unlock+0x40>)
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_FLASH_Unlock+0x48>)
 80028f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_FLASH_Unlock+0x40>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800290a:	79fb      	ldrb	r3, [r7, #7]
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40022000 	.word	0x40022000
 800291c:	45670123 	.word	0x45670123
 8002920:	cdef89ab 	.word	0xcdef89ab

08002924 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002928:	4a05      	ldr	r2, [pc, #20]	; (8002940 <HAL_FLASH_Lock+0x1c>)
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_FLASH_Lock+0x1c>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002932:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40022000 	.word	0x40022000

08002944 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <FLASH_Program_HalfWord+0x30>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <FLASH_Program_HalfWord+0x34>)
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <FLASH_Program_HalfWord+0x34>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	887a      	ldrh	r2, [r7, #2]
 8002966:	801a      	strh	r2, [r3, #0]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20001968 	.word	0x20001968
 8002978:	40022000 	.word	0x40022000

0800297c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fc6c 	bl	8002260 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800298a:	e010      	b.n	80029ae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d00c      	beq.n	80029ae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <FLASH_WaitForLastOperation+0x2e>
 800299a:	f7ff fc61 	bl	8002260 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d901      	bls.n	80029ae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e025      	b.n	80029fa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <FLASH_WaitForLastOperation+0x88>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e8      	bne.n	800298c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <FLASH_WaitForLastOperation+0x88>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <FLASH_WaitForLastOperation+0x88>)
 80029c8:	2220      	movs	r2, #32
 80029ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <FLASH_WaitForLastOperation+0x88>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <FLASH_WaitForLastOperation+0x88>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <FLASH_WaitForLastOperation+0x88>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80029f0:	f000 f80a 	bl	8002a08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40022000 	.word	0x40022000

08002a08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <FLASH_SetErrorCode+0x9c>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <FLASH_SetErrorCode+0x9c>)
 8002a28:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f043 0310 	orr.w	r3, r3, #16
 8002a30:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <FLASH_SetErrorCode+0x9c>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <FLASH_SetErrorCode+0x9c>)
 8002a48:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f043 0304 	orr.w	r3, r3, #4
 8002a50:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <FLASH_SetErrorCode+0x9c>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <FLASH_SetErrorCode+0x9c>)
 8002a68:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002a6a:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f240 1201 	movw	r2, #257	; 0x101
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d106      	bne.n	8002a8e <FLASH_SetErrorCode+0x86>
 8002a80:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	61d3      	str	r3, [r2, #28]
}  
 8002a8c:	e002      	b.n	8002a94 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <FLASH_SetErrorCode+0x98>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	60d3      	str	r3, [r2, #12]
}  
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	20001968 	.word	0x20001968

08002aa8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_FLASHEx_Erase+0xd0>)
 8002abc:	7e1b      	ldrb	r3, [r3, #24]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_FLASHEx_Erase+0x1e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e053      	b.n	8002b6e <HAL_FLASHEx_Erase+0xc6>
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <HAL_FLASHEx_Erase+0xd0>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d116      	bne.n	8002b02 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ad4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ad8:	f7ff ff50 	bl	800297c <FLASH_WaitForLastOperation>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d141      	bne.n	8002b66 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 f84c 	bl	8002b80 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ae8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aec:	f7ff ff46 	bl	800297c <FLASH_WaitForLastOperation>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <HAL_FLASHEx_Erase+0xd4>)
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_FLASHEx_Erase+0xd4>)
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6113      	str	r3, [r2, #16]
 8002b00:	e031      	b.n	8002b66 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b06:	f7ff ff39 	bl	800297c <FLASH_WaitForLastOperation>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d12a      	bne.n	8002b66 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f04f 32ff 	mov.w	r2, #4294967295
 8002b16:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	e019      	b.n	8002b54 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002b20:	68b8      	ldr	r0, [r7, #8]
 8002b22:	f000 f849 	bl	8002bb8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b2a:	f7ff ff27 	bl	800297c <FLASH_WaitForLastOperation>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_FLASHEx_Erase+0xd4>)
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_FLASHEx_Erase+0xd4>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f023 0302 	bic.w	r3, r3, #2
 8002b3c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	601a      	str	r2, [r3, #0]
            break;
 8002b4a:	e00c      	b.n	8002b66 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b52:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	029a      	lsls	r2, r3, #10
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d8dc      	bhi.n	8002b20 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <HAL_FLASHEx_Erase+0xd0>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	761a      	strb	r2, [r3, #24]

  return status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20001968 	.word	0x20001968
 8002b7c:	40022000 	.word	0x40022000

08002b80 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <FLASH_MassErase+0x30>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <FLASH_MassErase+0x34>)
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <FLASH_MassErase+0x34>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b9a:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <FLASH_MassErase+0x34>)
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <FLASH_MassErase+0x34>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	20001968 	.word	0x20001968
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <FLASH_PageErase+0x38>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <FLASH_PageErase+0x3c>)
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <FLASH_PageErase+0x3c>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <FLASH_PageErase+0x3c>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <FLASH_PageErase+0x3c>)
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <FLASH_PageErase+0x3c>)
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20001968 	.word	0x20001968
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b08b      	sub	sp, #44	; 0x2c
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0a:	e127      	b.n	8002e5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 8116 	bne.w	8002e56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d034      	beq.n	8002c9c <HAL_GPIO_Init+0xa4>
 8002c32:	2b12      	cmp	r3, #18
 8002c34:	d80d      	bhi.n	8002c52 <HAL_GPIO_Init+0x5a>
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d02b      	beq.n	8002c92 <HAL_GPIO_Init+0x9a>
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d804      	bhi.n	8002c48 <HAL_GPIO_Init+0x50>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d031      	beq.n	8002ca6 <HAL_GPIO_Init+0xae>
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d01c      	beq.n	8002c80 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c46:	e048      	b.n	8002cda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d043      	beq.n	8002cd4 <HAL_GPIO_Init+0xdc>
 8002c4c:	2b11      	cmp	r3, #17
 8002c4e:	d01b      	beq.n	8002c88 <HAL_GPIO_Init+0x90>
          break;
 8002c50:	e043      	b.n	8002cda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c52:	4a89      	ldr	r2, [pc, #548]	; (8002e78 <HAL_GPIO_Init+0x280>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d026      	beq.n	8002ca6 <HAL_GPIO_Init+0xae>
 8002c58:	4a87      	ldr	r2, [pc, #540]	; (8002e78 <HAL_GPIO_Init+0x280>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d806      	bhi.n	8002c6c <HAL_GPIO_Init+0x74>
 8002c5e:	4a87      	ldr	r2, [pc, #540]	; (8002e7c <HAL_GPIO_Init+0x284>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d020      	beq.n	8002ca6 <HAL_GPIO_Init+0xae>
 8002c64:	4a86      	ldr	r2, [pc, #536]	; (8002e80 <HAL_GPIO_Init+0x288>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01d      	beq.n	8002ca6 <HAL_GPIO_Init+0xae>
          break;
 8002c6a:	e036      	b.n	8002cda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c6c:	4a85      	ldr	r2, [pc, #532]	; (8002e84 <HAL_GPIO_Init+0x28c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d019      	beq.n	8002ca6 <HAL_GPIO_Init+0xae>
 8002c72:	4a85      	ldr	r2, [pc, #532]	; (8002e88 <HAL_GPIO_Init+0x290>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d016      	beq.n	8002ca6 <HAL_GPIO_Init+0xae>
 8002c78:	4a84      	ldr	r2, [pc, #528]	; (8002e8c <HAL_GPIO_Init+0x294>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_GPIO_Init+0xae>
          break;
 8002c7e:	e02c      	b.n	8002cda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	623b      	str	r3, [r7, #32]
          break;
 8002c86:	e028      	b.n	8002cda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	623b      	str	r3, [r7, #32]
          break;
 8002c90:	e023      	b.n	8002cda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	3308      	adds	r3, #8
 8002c98:	623b      	str	r3, [r7, #32]
          break;
 8002c9a:	e01e      	b.n	8002cda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	623b      	str	r3, [r7, #32]
          break;
 8002ca4:	e019      	b.n	8002cda <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	623b      	str	r3, [r7, #32]
          break;
 8002cb2:	e012      	b.n	8002cda <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	611a      	str	r2, [r3, #16]
          break;
 8002cc6:	e008      	b.n	8002cda <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc8:	2308      	movs	r3, #8
 8002cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	615a      	str	r2, [r3, #20]
          break;
 8002cd2:	e002      	b.n	8002cda <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	623b      	str	r3, [r7, #32]
          break;
 8002cd8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2bff      	cmp	r3, #255	; 0xff
 8002cde:	d801      	bhi.n	8002ce4 <HAL_GPIO_Init+0xec>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	e001      	b.n	8002ce8 <HAL_GPIO_Init+0xf0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2bff      	cmp	r3, #255	; 0xff
 8002cee:	d802      	bhi.n	8002cf6 <HAL_GPIO_Init+0xfe>
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x104>
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	3b08      	subs	r3, #8
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	210f      	movs	r1, #15
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	6a39      	ldr	r1, [r7, #32]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	431a      	orrs	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8096 	beq.w	8002e56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d2a:	4a59      	ldr	r2, [pc, #356]	; (8002e90 <HAL_GPIO_Init+0x298>)
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_GPIO_Init+0x298>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6193      	str	r3, [r2, #24]
 8002d36:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <HAL_GPIO_Init+0x298>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d42:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <HAL_GPIO_Init+0x29c>)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4b      	ldr	r2, [pc, #300]	; (8002e98 <HAL_GPIO_Init+0x2a0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x19e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4a      	ldr	r2, [pc, #296]	; (8002e9c <HAL_GPIO_Init+0x2a4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00d      	beq.n	8002d92 <HAL_GPIO_Init+0x19a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a49      	ldr	r2, [pc, #292]	; (8002ea0 <HAL_GPIO_Init+0x2a8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <HAL_GPIO_Init+0x196>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a48      	ldr	r2, [pc, #288]	; (8002ea4 <HAL_GPIO_Init+0x2ac>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_GPIO_Init+0x192>
 8002d86:	2303      	movs	r3, #3
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x1a0>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e004      	b.n	8002d98 <HAL_GPIO_Init+0x1a0>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_Init+0x1a0>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x1a0>
 8002d96:	2300      	movs	r3, #0
 8002d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9a:	f002 0203 	and.w	r2, r2, #3
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	4093      	lsls	r3, r2
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002da8:	493a      	ldr	r1, [pc, #232]	; (8002e94 <HAL_GPIO_Init+0x29c>)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3302      	adds	r3, #2
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d006      	beq.n	8002dd0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dc2:	4939      	ldr	r1, [pc, #228]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dc4:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
 8002dce:	e006      	b.n	8002dde <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dd0:	4935      	ldr	r1, [pc, #212]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dd2:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	4013      	ands	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dea:	492f      	ldr	r1, [pc, #188]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dec:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
 8002df6:	e006      	b.n	8002e06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002df8:	492b      	ldr	r1, [pc, #172]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4013      	ands	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e12:	4925      	ldr	r1, [pc, #148]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
 8002e1e:	e006      	b.n	8002e2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e20:	4921      	ldr	r1, [pc, #132]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e3a:	491b      	ldr	r1, [pc, #108]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60cb      	str	r3, [r1, #12]
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e48:	4917      	ldr	r1, [pc, #92]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_GPIO_Init+0x2b0>)
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	4013      	ands	r3, r2
 8002e54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	3301      	adds	r3, #1
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f47f aed0 	bne.w	8002c0c <HAL_GPIO_Init+0x14>
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	372c      	adds	r7, #44	; 0x2c
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	10210000 	.word	0x10210000
 8002e7c:	10110000 	.word	0x10110000
 8002e80:	10120000 	.word	0x10120000
 8002e84:	10310000 	.word	0x10310000
 8002e88:	10320000 	.word	0x10320000
 8002e8c:	10220000 	.word	0x10220000
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	40010c00 	.word	0x40010c00
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	40010400 	.word	0x40010400

08002eac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002eba:	e09a      	b.n	8002ff2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 808e 	beq.w	8002fec <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002ed0:	4a4e      	ldr	r2, [pc, #312]	; (800300c <HAL_GPIO_DeInit+0x160>)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002edc:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a46      	ldr	r2, [pc, #280]	; (8003010 <HAL_GPIO_DeInit+0x164>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_DeInit+0x76>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a45      	ldr	r2, [pc, #276]	; (8003014 <HAL_GPIO_DeInit+0x168>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <HAL_GPIO_DeInit+0x72>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a44      	ldr	r2, [pc, #272]	; (8003018 <HAL_GPIO_DeInit+0x16c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_DeInit+0x6e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a43      	ldr	r2, [pc, #268]	; (800301c <HAL_GPIO_DeInit+0x170>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_GPIO_DeInit+0x6a>
 8002f12:	2303      	movs	r3, #3
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_DeInit+0x78>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_DeInit+0x78>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_DeInit+0x78>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_DeInit+0x78>
 8002f22:	2300      	movs	r3, #0
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f002 0203 	and.w	r2, r2, #3
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	fa03 f202 	lsl.w	r2, r3, r2
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d132      	bne.n	8002f9c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002f46:	4831      	ldr	r0, [pc, #196]	; (800300c <HAL_GPIO_DeInit+0x160>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	492f      	ldr	r1, [pc, #188]	; (800300c <HAL_GPIO_DeInit+0x160>)
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	0892      	lsrs	r2, r2, #2
 8002f52:	3202      	adds	r2, #2
 8002f54:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	43d2      	mvns	r2, r2
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	3302      	adds	r3, #2
 8002f60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002f64:	492e      	ldr	r1, [pc, #184]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	4013      	ands	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002f72:	492b      	ldr	r1, [pc, #172]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002f80:	4927      	ldr	r1, [pc, #156]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002f8e:	4924      	ldr	r1, [pc, #144]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f90:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_GPIO_DeInit+0x174>)
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2bff      	cmp	r3, #255	; 0xff
 8002fa0:	d801      	bhi.n	8002fa6 <HAL_GPIO_DeInit+0xfa>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	e001      	b.n	8002faa <HAL_GPIO_DeInit+0xfe>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2bff      	cmp	r3, #255	; 0xff
 8002fb0:	d802      	bhi.n	8002fb8 <HAL_GPIO_DeInit+0x10c>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	e002      	b.n	8002fbe <HAL_GPIO_DeInit+0x112>
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3b08      	subs	r3, #8
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f47f af5e 	bne.w	8002ebc <HAL_GPIO_DeInit+0x10>
  }
}
 8003000:	bf00      	nop
 8003002:	3724      	adds	r7, #36	; 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40010800 	.word	0x40010800
 8003014:	40010c00 	.word	0x40010c00
 8003018:	40011000 	.word	0x40011000
 800301c:	40011400 	.word	0x40011400
 8003020:	40010400 	.word	0x40010400

08003024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e001      	b.n	8003046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003070:	e002      	b.n	8003078 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	611a      	str	r2, [r3, #16]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800308a:	f7ff f8e9 	bl	8002260 <HAL_GetTick>
 800308e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003090:	4a45      	ldr	r2, [pc, #276]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003092:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7ff f8df 	bl	8002260 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e077      	b.n	80031a0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80030b0:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80030bc:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 80030be:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80030cc:	f7ff f8c8 	bl	8002260 <HAL_GetTick>
 80030d0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80030d2:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030da:	f7ff f8c1 	bl	8002260 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e057      	b.n	80031a0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80030f0:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ee      	bne.n	80030da <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_RCC_DeInit+0x128>)
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <HAL_RCC_DeInit+0x12c>)
 8003100:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003102:	4b2c      	ldr	r3, [pc, #176]	; (80031b4 <HAL_RCC_DeInit+0x130>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f868 	bl	80021dc <HAL_InitTick>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e044      	b.n	80031a0 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003116:	f7ff f8a3 	bl	8002260 <HAL_GetTick>
 800311a:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7ff f899 	bl	8002260 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e031      	b.n	80031a0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8003148:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800314e:	f7ff f887 	bl	8002260 <HAL_GetTick>
 8003152:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800315e:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003162:	f7ff f87d 	bl	8002260 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	; 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e015      	b.n	80031a0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003180:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318a:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003196:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_DeInit+0x124>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	20000000 	.word	0x20000000
 80031b0:	007a1200 	.word	0x007a1200
 80031b4:	20000004 	.word	0x20000004

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e26c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8087 	beq.w	80032e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d8:	4b92      	ldr	r3, [pc, #584]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d00c      	beq.n	80031fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e4:	4b8f      	ldr	r3, [pc, #572]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d112      	bne.n	8003216 <HAL_RCC_OscConfig+0x5e>
 80031f0:	4b8c      	ldr	r3, [pc, #560]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d10b      	bne.n	8003216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fe:	4b89      	ldr	r3, [pc, #548]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d06c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x12c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d168      	bne.n	80032e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e246      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x76>
 8003220:	4a80      	ldr	r2, [pc, #512]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003222:	4b80      	ldr	r3, [pc, #512]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e02e      	b.n	800328c <HAL_RCC_OscConfig+0xd4>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x98>
 8003236:	4a7b      	ldr	r2, [pc, #492]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003238:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4a78      	ldr	r2, [pc, #480]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003244:	4b77      	ldr	r3, [pc, #476]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e01d      	b.n	800328c <HAL_RCC_OscConfig+0xd4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0xbc>
 800325a:	4a72      	ldr	r2, [pc, #456]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800325c:	4b71      	ldr	r3, [pc, #452]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4a6f      	ldr	r2, [pc, #444]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003268:	4b6e      	ldr	r3, [pc, #440]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0xd4>
 8003274:	4a6b      	ldr	r2, [pc, #428]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003276:	4b6b      	ldr	r3, [pc, #428]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4a68      	ldr	r2, [pc, #416]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003282:	4b68      	ldr	r3, [pc, #416]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe ffe4 	bl	8002260 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe ffe0 	bl	8002260 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1fa      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0xe4>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe ffd0 	bl	8002260 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe ffcc 	bl	8002260 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1e6      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x10c>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d063      	beq.n	80033ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f2:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032fe:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b08      	cmp	r3, #8
 8003308:	d11c      	bne.n	8003344 <HAL_RCC_OscConfig+0x18c>
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d116      	bne.n	8003344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x176>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e1ba      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332e:	493d      	ldr	r1, [pc, #244]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	e03a      	b.n	80033ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d020      	beq.n	800338e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <HAL_RCC_OscConfig+0x270>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe ff85 	bl	8002260 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335a:	f7fe ff81 	bl	8002260 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e19b      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	492a      	ldr	r1, [pc, #168]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800337a:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
 800338c:	e015      	b.n	80033ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_RCC_OscConfig+0x270>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe ff64 	bl	8002260 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fe ff60 	bl	8002260 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e17a      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03a      	beq.n	800343c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d019      	beq.n	8003402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d4:	f7fe ff44 	bl	8002260 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033dc:	f7fe ff40 	bl	8002260 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e15a      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033fa:	2001      	movs	r0, #1
 80033fc:	f000 fada 	bl	80039b4 <RCC_Delay>
 8003400:	e01c      	b.n	800343c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fe ff2a 	bl	8002260 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340e:	e00f      	b.n	8003430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003410:	f7fe ff26 	bl	8002260 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d908      	bls.n	8003430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e140      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	42420000 	.word	0x42420000
 800342c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	4b9e      	ldr	r3, [pc, #632]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e9      	bne.n	8003410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a6 	beq.w	8003596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b97      	ldr	r3, [pc, #604]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4a94      	ldr	r2, [pc, #592]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800345c:	4b93      	ldr	r3, [pc, #588]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	61d3      	str	r3, [r2, #28]
 8003466:	4b91      	ldr	r3, [pc, #580]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4a8b      	ldr	r2, [pc, #556]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003484:	4b8a      	ldr	r3, [pc, #552]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fe fee7 	bl	8002260 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fe fee3 	bl	8002260 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0fd      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b81      	ldr	r3, [pc, #516]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x312>
 80034bc:	4a7b      	ldr	r2, [pc, #492]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034be:	4b7b      	ldr	r3, [pc, #492]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	e02d      	b.n	8003526 <HAL_RCC_OscConfig+0x36e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x334>
 80034d2:	4a76      	ldr	r2, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	4b75      	ldr	r3, [pc, #468]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	4a73      	ldr	r2, [pc, #460]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	4b72      	ldr	r3, [pc, #456]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	e01c      	b.n	8003526 <HAL_RCC_OscConfig+0x36e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_OscConfig+0x356>
 80034f4:	4a6d      	ldr	r2, [pc, #436]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	4b6d      	ldr	r3, [pc, #436]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	4a6a      	ldr	r2, [pc, #424]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003502:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	e00b      	b.n	8003526 <HAL_RCC_OscConfig+0x36e>
 800350e:	4a67      	ldr	r2, [pc, #412]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003510:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	4a64      	ldr	r2, [pc, #400]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800351c:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe fe97 	bl	8002260 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe fe93 	bl	8002260 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0ab      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	4b57      	ldr	r3, [pc, #348]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ee      	beq.n	8003536 <HAL_RCC_OscConfig+0x37e>
 8003558:	e014      	b.n	8003584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355a:	f7fe fe81 	bl	8002260 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe fe7d 	bl	8002260 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e095      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4a48      	ldr	r2, [pc, #288]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800358c:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8081 	beq.w	80036a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a0:	4b42      	ldr	r3, [pc, #264]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d061      	beq.n	8003670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d146      	bne.n	8003642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_RCC_OscConfig+0x4fc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ba:	f7fe fe51 	bl	8002260 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fe fe4d 	bl	8002260 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e067      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d4:	4b35      	ldr	r3, [pc, #212]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d108      	bne.n	80035fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ea:	4930      	ldr	r1, [pc, #192]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fc:	482b      	ldr	r0, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a19      	ldr	r1, [r3, #32]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	430b      	orrs	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <HAL_RCC_OscConfig+0x4fc>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fe fe21 	bl	8002260 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe fe1d 	bl	8002260 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e037      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x46a>
 8003640:	e02f      	b.n	80036a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_RCC_OscConfig+0x4fc>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fe0a 	bl	8002260 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fe06 	bl	8002260 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e020      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x498>
 800366e:	e018      	b.n	80036a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e013      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	42420060 	.word	0x42420060

080036b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0d0      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0207 	and.w	r2, r3, #7
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d210      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4967      	ldr	r1, [pc, #412]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	4b66      	ldr	r3, [pc, #408]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 0207 	bic.w	r2, r3, #7
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0207 	and.w	r2, r3, #7
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0b8      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003714:	4a59      	ldr	r2, [pc, #356]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800371e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800372c:	4a53      	ldr	r2, [pc, #332]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4950      	ldr	r1, [pc, #320]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4b50      	ldr	r3, [pc, #320]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d040      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d115      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07f      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b41      	ldr	r3, [pc, #260]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e073      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e06b      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4939      	ldr	r1, [pc, #228]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 0203 	bic.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a8:	f7fe fd5a 	bl	8002260 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fe fd56 	bl	8002260 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e053      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b2d      	ldr	r3, [pc, #180]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0207 	and.w	r2, r3, #7
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d910      	bls.n	8003808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4924      	ldr	r1, [pc, #144]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 0207 	bic.w	r2, r3, #7
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0207 	and.w	r2, r3, #7
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e032      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003814:	4919      	ldr	r1, [pc, #100]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003832:	4912      	ldr	r1, [pc, #72]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003846:	f000 f821 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800384a:	4601      	mov	r1, r0
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	fa21 f303 	lsr.w	r3, r1, r3
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1cc>)
 8003860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x1d0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fcb8 	bl	80021dc <HAL_InitTick>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40022000 	.word	0x40022000
 800387c:	40021000 	.word	0x40021000
 8003880:	0800467c 	.word	0x0800467c
 8003884:	20000000 	.word	0x20000000
 8003888:	20000004 	.word	0x20000004

0800388c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	b490      	push	{r4, r7}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003894:	1d3c      	adds	r4, r7, #4
 8003896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <HAL_RCC_GetSysClockFreq+0xb4>)
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x40>
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0x46>
 80038ca:	e02d      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038cc:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ce:	623b      	str	r3, [r7, #32]
      break;
 80038d0:	e02d      	b.n	800392e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	0c9b      	lsrs	r3, r3, #18
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038de:	4413      	add	r3, r2
 80038e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0c5b      	lsrs	r3, r3, #17
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038fe:	4413      	add	r3, r2
 8003900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003904:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <HAL_RCC_GetSysClockFreq+0xbc>)
 800390a:	fb02 f203 	mul.w	r2, r2, r3
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	e004      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <HAL_RCC_GetSysClockFreq+0xc0>)
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	623b      	str	r3, [r7, #32]
      break;
 8003926:	e002      	b.n	800392e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_RCC_GetSysClockFreq+0xbc>)
 800392a:	623b      	str	r3, [r7, #32]
      break;
 800392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392e:	6a3b      	ldr	r3, [r7, #32]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3728      	adds	r7, #40	; 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bc90      	pop	{r4, r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	08004668 	.word	0x08004668
 8003940:	08004678 	.word	0x08004678
 8003944:	40021000 	.word	0x40021000
 8003948:	007a1200 	.word	0x007a1200
 800394c:	003d0900 	.word	0x003d0900

08003950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b02      	ldr	r3, [pc, #8]	; (8003960 <HAL_RCC_GetHCLKFreq+0x10>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	20000000 	.word	0x20000000

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003968:	f7ff fff2 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 800396c:	4601      	mov	r1, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4a03      	ldr	r2, [pc, #12]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397a:	5cd3      	ldrb	r3, [r2, r3]
 800397c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	0800468c 	.word	0x0800468c

0800398c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003990:	f7ff ffde 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003994:	4601      	mov	r1, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0adb      	lsrs	r3, r3, #11
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4a03      	ldr	r2, [pc, #12]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	0800468c 	.word	0x0800468c

080039b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <RCC_Delay+0x34>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <RCC_Delay+0x38>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0a5b      	lsrs	r3, r3, #9
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039d0:	bf00      	nop
  }
  while (Delay --);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	60fa      	str	r2, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f9      	bne.n	80039d0 <RCC_Delay+0x1c>
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000000 	.word	0x20000000
 80039ec:	10624dd3 	.word	0x10624dd3

080039f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e03f      	b.n	8003a82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe fac4 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	68d2      	ldr	r2, [r2, #12]
 8003a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fcd9 	bl	80043ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6912      	ldr	r2, [r2, #16]
 8003a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	6952      	ldr	r2, [r2, #20]
 8003a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	68d2      	ldr	r2, [r2, #12]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e01e      	b.n	8003ada <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	68d2      	ldr	r2, [r2, #12]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fe fb09 	bl	80020cc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b088      	sub	sp, #32
 8003ae6:	af02      	add	r7, sp, #8
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	f040 8082 	bne.w	8003c08 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Transmit+0x2e>
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e07a      	b.n	8003c0a <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit+0x40>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e073      	b.n	8003c0a <HAL_UART_Transmit+0x128>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2221      	movs	r2, #33	; 0x21
 8003b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b38:	f7fe fb92 	bl	8002260 <HAL_GetTick>
 8003b3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b4a:	e041      	b.n	8003bd0 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b62:	d121      	bne.n	8003ba8 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fabe 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e045      	b.n	8003c0a <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	8812      	ldrh	r2, [r2, #0]
 8003b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	e017      	b.n	8003bd0 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	e013      	b.n	8003bd0 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fa9c 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e023      	b.n	8003c0a <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	1c59      	adds	r1, r3, #1
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1b8      	bne.n	8003b4c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	; 0x40
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fa83 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e00a      	b.n	8003c0a <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d140      	bne.n	8003cae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Receive_IT+0x26>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e039      	b.n	8003cb0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Receive_IT+0x38>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e032      	b.n	8003cb0 <HAL_UART_Receive_IT+0x9e>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2222      	movs	r2, #34	; 0x22
 8003c6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c88:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	6952      	ldr	r2, [r2, #20]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	68d2      	ldr	r2, [r2, #12]
 8003ca4:	f042 0220 	orr.w	r2, r2, #32
 8003ca8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d166      	bne.n	8003da4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_UART_Receive_DMA+0x26>
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e05f      	b.n	8003da6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Receive_DMA+0x38>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e058      	b.n	8003da6 <HAL_UART_Receive_DMA+0xea>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2222      	movs	r2, #34	; 0x22
 8003d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1a:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <HAL_UART_Receive_DMA+0xf4>)
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <HAL_UART_Receive_DMA+0xf8>)
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <HAL_UART_Receive_DMA+0xfc>)
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	2200      	movs	r2, #0
 8003d34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	f7fe fc49 	bl	80025e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	6952      	ldr	r2, [r2, #20]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	6952      	ldr	r2, [r2, #20]
 8003d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d9e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	08003fd9 	.word	0x08003fd9
 8003db4:	08004041 	.word	0x08004041
 8003db8:	0800405d 	.word	0x0800405d

08003dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_UART_IRQHandler+0x52>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa6e 	bl	80042e8 <UART_Receive_IT>
      return;
 8003e0c:	e0cc      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80ab 	beq.w	8003f6c <HAL_UART_IRQHandler+0x1b0>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_UART_IRQHandler+0x70>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a0 	beq.w	8003f6c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_UART_IRQHandler+0x90>
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_UART_IRQHandler+0xb0>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	f043 0202 	orr.w	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_UART_IRQHandler+0xd0>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_UART_IRQHandler+0xf0>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	f043 0208 	orr.w	r2, r3, #8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d078      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_UART_IRQHandler+0x112>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa0d 	bl	80042e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x13a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d031      	beq.n	8003f5a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f959 	bl	80041ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d023      	beq.n	8003f52 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	6952      	ldr	r2, [r2, #20]
 8003f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d013      	beq.n	8003f4a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <HAL_UART_IRQHandler+0x1f4>)
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fbb8 	bl	80026a4 <HAL_DMA_Abort_IT>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f44:	4610      	mov	r0, r2
 8003f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	e00e      	b.n	8003f68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fe f808 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e00a      	b.n	8003f68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fe f804 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e006      	b.n	8003f68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fe f800 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f66:	e01e      	b.n	8003fa6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	bf00      	nop
    return;
 8003f6a:	e01c      	b.n	8003fa6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_UART_IRQHandler+0x1cc>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f945 	bl	8004210 <UART_Transmit_IT>
    return;
 8003f86:	e00f      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x1ec>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f98b 	bl	80042b8 <UART_EndTransmit_IT>
    return;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003fa6:	bf00      	nop
  }
}
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	080041e9 	.word	0x080041e9

08003fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d11e      	bne.n	8004032 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	68d2      	ldr	r2, [r2, #12]
 8004004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004008:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6952      	ldr	r2, [r2, #20]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6952      	ldr	r2, [r2, #20]
 8004024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004028:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7fd ff82 	bl	8001f3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff ffb9 	bl	8003fc6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b21      	cmp	r3, #33	; 0x21
 800408e:	d108      	bne.n	80040a2 <UART_DMAError+0x46>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f000 f871 	bl	8004184 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b22      	cmp	r3, #34	; 0x22
 80040c2:	d108      	bne.n	80040d6 <UART_DMAError+0x7a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2200      	movs	r2, #0
 80040ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f000 f86c 	bl	80041ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e2:	68b8      	ldr	r0, [r7, #8]
 80040e4:	f7fd ff3c 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	e02c      	b.n	800415c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d028      	beq.n	800415c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x30>
 8004110:	f7fe f8a6 	bl	8002260 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1ad2      	subs	r2, r2, r3
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d91d      	bls.n	800415c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800412e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	6952      	ldr	r2, [r2, #20]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e00f      	b.n	800417c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	401a      	ands	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	429a      	cmp	r2, r3
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	429a      	cmp	r2, r3
 8004178:	d0c3      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	68d2      	ldr	r2, [r2, #12]
 8004196:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800419a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	68d2      	ldr	r2, [r2, #12]
 80041c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	6952      	ldr	r2, [r2, #20]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7fd feac 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d143      	bne.n	80042ac <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422c:	d119      	bne.n	8004262 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	8812      	ldrh	r2, [r2, #0]
 800423c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004240:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	1c9a      	adds	r2, r3, #2
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]
 8004254:	e00e      	b.n	8004274 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	e008      	b.n	8004274 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	1c58      	adds	r0, r3, #1
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	6208      	str	r0, [r1, #32]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	68d2      	ldr	r2, [r2, #12]
 8004292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	68d2      	ldr	r2, [r2, #12]
 80042ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fe6b 	bl	8003fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	d171      	bne.n	80043e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004304:	d123      	bne.n	800434e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
 8004330:	e029      	b.n	8004386 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	b29b      	uxth	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
 800434c:	e01b      	b.n	8004386 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6291      	str	r1, [r2, #40]	; 0x28
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	6852      	ldr	r2, [r2, #4]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e00c      	b.n	8004386 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	1c59      	adds	r1, r3, #1
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6291      	str	r1, [r2, #40]	; 0x28
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	6852      	ldr	r2, [r2, #4]
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004396:	2b00      	cmp	r3, #0
 8004398:	d120      	bne.n	80043dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	68d2      	ldr	r2, [r2, #12]
 80043a4:	f022 0220 	bic.w	r2, r2, #32
 80043a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	68d2      	ldr	r2, [r2, #12]
 80043b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	6952      	ldr	r2, [r2, #20]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fdb2 	bl	8001f3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e002      	b.n	80043e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	6912      	ldr	r2, [r2, #16]
 80043fe:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	430a      	orrs	r2, r1
 8004408:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800442a:	f023 030c 	bic.w	r3, r3, #12
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	430b      	orrs	r3, r1
 8004432:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	6952      	ldr	r2, [r2, #20]
 800443e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6992      	ldr	r2, [r2, #24]
 8004446:	430a      	orrs	r2, r1
 8004448:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a52      	ldr	r2, [pc, #328]	; (8004598 <UART_SetConfig+0x1ac>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d14e      	bne.n	80044f2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7ff fa9a 	bl	800398c <HAL_RCC_GetPCLK2Freq>
 8004458:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	4a49      	ldr	r2, [pc, #292]	; (800459c <UART_SetConfig+0x1b0>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	0118      	lsls	r0, r3, #4
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	fbb2 f2f3 	udiv	r2, r2, r3
 8004494:	4b41      	ldr	r3, [pc, #260]	; (800459c <UART_SetConfig+0x1b0>)
 8004496:	fba3 4302 	umull	r4, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2464      	movs	r4, #100	; 0x64
 800449e:	fb04 f303 	mul.w	r3, r4, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	3332      	adds	r3, #50	; 0x32
 80044a8:	4a3c      	ldr	r2, [pc, #240]	; (800459c <UART_SetConfig+0x1b0>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b4:	4418      	add	r0, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009a      	lsls	r2, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044cc:	4b33      	ldr	r3, [pc, #204]	; (800459c <UART_SetConfig+0x1b0>)
 80044ce:	fba3 4302 	umull	r4, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2464      	movs	r4, #100	; 0x64
 80044d6:	fb04 f303 	mul.w	r3, r4, r3
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	3332      	adds	r3, #50	; 0x32
 80044e0:	4a2e      	ldr	r2, [pc, #184]	; (800459c <UART_SetConfig+0x1b0>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	4403      	add	r3, r0
 80044ee:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80044f0:	e04d      	b.n	800458e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7ff fa37 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 80044f6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009a      	lsls	r2, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	4a22      	ldr	r2, [pc, #136]	; (800459c <UART_SetConfig+0x1b0>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	0118      	lsls	r0, r3, #4
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009a      	lsls	r2, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004532:	4b1a      	ldr	r3, [pc, #104]	; (800459c <UART_SetConfig+0x1b0>)
 8004534:	fba3 4302 	umull	r4, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2464      	movs	r4, #100	; 0x64
 800453c:	fb04 f303 	mul.w	r3, r4, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a15      	ldr	r2, [pc, #84]	; (800459c <UART_SetConfig+0x1b0>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004552:	4418      	add	r0, r3
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009a      	lsls	r2, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	fbb2 f2f3 	udiv	r2, r2, r3
 800456a:	4b0c      	ldr	r3, [pc, #48]	; (800459c <UART_SetConfig+0x1b0>)
 800456c:	fba3 4302 	umull	r4, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2464      	movs	r4, #100	; 0x64
 8004574:	fb04 f303 	mul.w	r3, r4, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	4a07      	ldr	r2, [pc, #28]	; (800459c <UART_SetConfig+0x1b0>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	4403      	add	r3, r0
 800458c:	608b      	str	r3, [r1, #8]
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bd90      	pop	{r4, r7, pc}
 8004596:	bf00      	nop
 8004598:	40013800 	.word	0x40013800
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <main>:



#include "main.h"

int main(void){
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  hwInit();
 80045a4:	f7fd fdbc 	bl	8002120 <hwInit>
  apInit();
 80045a8:	f7fb fdd8 	bl	800015c <apInit>

  apMain();
 80045ac:	f7fb fde6 	bl	800017c <apMain>
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <__libc_init_array>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	2500      	movs	r5, #0
 80045bc:	4e0c      	ldr	r6, [pc, #48]	; (80045f0 <__libc_init_array+0x38>)
 80045be:	4c0d      	ldr	r4, [pc, #52]	; (80045f4 <__libc_init_array+0x3c>)
 80045c0:	1ba4      	subs	r4, r4, r6
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	42a5      	cmp	r5, r4
 80045c6:	d109      	bne.n	80045dc <__libc_init_array+0x24>
 80045c8:	f000 f822 	bl	8004610 <_init>
 80045cc:	2500      	movs	r5, #0
 80045ce:	4e0a      	ldr	r6, [pc, #40]	; (80045f8 <__libc_init_array+0x40>)
 80045d0:	4c0a      	ldr	r4, [pc, #40]	; (80045fc <__libc_init_array+0x44>)
 80045d2:	1ba4      	subs	r4, r4, r6
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	42a5      	cmp	r5, r4
 80045d8:	d105      	bne.n	80045e6 <__libc_init_array+0x2e>
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045e0:	4798      	blx	r3
 80045e2:	3501      	adds	r5, #1
 80045e4:	e7ee      	b.n	80045c4 <__libc_init_array+0xc>
 80045e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ea:	4798      	blx	r3
 80045ec:	3501      	adds	r5, #1
 80045ee:	e7f2      	b.n	80045d6 <__libc_init_array+0x1e>
 80045f0:	08004694 	.word	0x08004694
 80045f4:	08004694 	.word	0x08004694
 80045f8:	08004694 	.word	0x08004694
 80045fc:	08004698 	.word	0x08004698

08004600 <memset>:
 8004600:	4603      	mov	r3, r0
 8004602:	4402      	add	r2, r0
 8004604:	4293      	cmp	r3, r2
 8004606:	d100      	bne.n	800460a <memset+0xa>
 8004608:	4770      	bx	lr
 800460a:	f803 1b01 	strb.w	r1, [r3], #1
 800460e:	e7f9      	b.n	8004604 <memset+0x4>

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
