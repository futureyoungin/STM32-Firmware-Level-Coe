
10_Cmd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002bb4  20000078  08004a64  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  20002c2c  08004a64  00022c2c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008c2d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002406  00000000  00000000  00028cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a90  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000928  00000000  00000000  0002bb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005de0  00000000  00000000  0002c488  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002eae  00000000  00000000  00032268  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00035116  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002adc  00000000  00000000  00035194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004948 	.word	0x08004948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004948 	.word	0x08004948

0800014c <apInit>:

cmd_t cmd_mcu;
cmd_t cmd_pc;


void apInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8000150:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000154:	2000      	movs	r0, #0
 8000156:	f001 fac1 	bl	80016dc <uartOpen>

  cmdInit(&cmd_mcu);
 800015a:	480a      	ldr	r0, [pc, #40]	; (8000184 <apInit+0x38>)
 800015c:	f000 f9bf 	bl	80004de <cmdInit>
  cmdBegin(&cmd_mcu, _DEF_UART2, 115200);
 8000160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000164:	2101      	movs	r1, #1
 8000166:	4807      	ldr	r0, [pc, #28]	; (8000184 <apInit+0x38>)
 8000168:	f000 f9cf 	bl	800050a <cmdBegin>

  cmdInit(&cmd_pc);
 800016c:	4806      	ldr	r0, [pc, #24]	; (8000188 <apInit+0x3c>)
 800016e:	f000 f9b6 	bl	80004de <cmdInit>
  cmdBegin(&cmd_pc, _DEF_UART2, 115200);
 8000172:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000176:	2101      	movs	r1, #1
 8000178:	4803      	ldr	r0, [pc, #12]	; (8000188 <apInit+0x3c>)
 800017a:	f000 f9c6 	bl	800050a <cmdBegin>

}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	20001298 	.word	0x20001298
 8000188:	20000270 	.word	0x20000270

0800018c <apMain>:


void apMain(void){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  while(1){
    mcuLoop();
 8000190:	f000 f804 	bl	800019c <mcuLoop>
    pcLoop();
 8000194:	f000 f858 	bl	8000248 <pcLoop>
    mcuLoop();
 8000198:	e7fa      	b.n	8000190 <apMain+0x4>
	...

0800019c <mcuLoop>:

}


void mcuLoop(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
  uint32_t addr;
  uint32_t data;


  if (cmdReceivePacket(&cmd_mcu) == true)
 80001a2:	4827      	ldr	r0, [pc, #156]	; (8000240 <mcuLoop+0xa4>)
 80001a4:	f000 f9ea 	bl	800057c <cmdReceivePacket>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d044      	beq.n	8000238 <mcuLoop+0x9c>
  {
    switch(cmd_mcu.rx_packet.cmd)
 80001ae:	4b24      	ldr	r3, [pc, #144]	; (8000240 <mcuLoop+0xa4>)
 80001b0:	f893 3820 	ldrb.w	r3, [r3, #2080]	; 0x820
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d000      	beq.n	80001ba <mcuLoop+0x1e>

        uartPrintf(_DEF_UART1, "mcu cmd received : addr %d, data %d\n", addr, data);
        break;
    }
  }
}
 80001b8:	e03e      	b.n	8000238 <mcuLoop+0x9c>
        addr  = cmd_mcu.rx_packet.data[0]<<0;
 80001ba:	4b21      	ldr	r3, [pc, #132]	; (8000240 <mcuLoop+0xa4>)
 80001bc:	f893 3828 	ldrb.w	r3, [r3, #2088]	; 0x828
 80001c0:	607b      	str	r3, [r7, #4]
        addr |= cmd_mcu.rx_packet.data[1]<<8;
 80001c2:	4b1f      	ldr	r3, [pc, #124]	; (8000240 <mcuLoop+0xa4>)
 80001c4:	f893 3829 	ldrb.w	r3, [r3, #2089]	; 0x829
 80001c8:	021b      	lsls	r3, r3, #8
 80001ca:	461a      	mov	r2, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4313      	orrs	r3, r2
 80001d0:	607b      	str	r3, [r7, #4]
        addr |= cmd_mcu.rx_packet.data[2]<<16;
 80001d2:	4b1b      	ldr	r3, [pc, #108]	; (8000240 <mcuLoop+0xa4>)
 80001d4:	f893 382a 	ldrb.w	r3, [r3, #2090]	; 0x82a
 80001d8:	041b      	lsls	r3, r3, #16
 80001da:	461a      	mov	r2, r3
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4313      	orrs	r3, r2
 80001e0:	607b      	str	r3, [r7, #4]
        addr |= cmd_mcu.rx_packet.data[3]<<24;
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <mcuLoop+0xa4>)
 80001e4:	f893 382b 	ldrb.w	r3, [r3, #2091]	; 0x82b
 80001e8:	061b      	lsls	r3, r3, #24
 80001ea:	461a      	mov	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4313      	orrs	r3, r2
 80001f0:	607b      	str	r3, [r7, #4]
        data  = cmd_mcu.rx_packet.data[4]<<0;
 80001f2:	4b13      	ldr	r3, [pc, #76]	; (8000240 <mcuLoop+0xa4>)
 80001f4:	f893 382c 	ldrb.w	r3, [r3, #2092]	; 0x82c
 80001f8:	603b      	str	r3, [r7, #0]
        data |= cmd_mcu.rx_packet.data[5]<<8;
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <mcuLoop+0xa4>)
 80001fc:	f893 382d 	ldrb.w	r3, [r3, #2093]	; 0x82d
 8000200:	021b      	lsls	r3, r3, #8
 8000202:	461a      	mov	r2, r3
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	4313      	orrs	r3, r2
 8000208:	603b      	str	r3, [r7, #0]
        data |= cmd_mcu.rx_packet.data[6]<<16;
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <mcuLoop+0xa4>)
 800020c:	f893 382e 	ldrb.w	r3, [r3, #2094]	; 0x82e
 8000210:	041b      	lsls	r3, r3, #16
 8000212:	461a      	mov	r2, r3
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	4313      	orrs	r3, r2
 8000218:	603b      	str	r3, [r7, #0]
        data |= cmd_mcu.rx_packet.data[7]<<24;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <mcuLoop+0xa4>)
 800021c:	f893 382f 	ldrb.w	r3, [r3, #2095]	; 0x82f
 8000220:	061b      	lsls	r3, r3, #24
 8000222:	461a      	mov	r2, r3
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	4313      	orrs	r3, r2
 8000228:	603b      	str	r3, [r7, #0]
        uartPrintf(_DEF_UART1, "mcu cmd received : addr %d, data %d\n", addr, data);
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	4905      	ldr	r1, [pc, #20]	; (8000244 <mcuLoop+0xa8>)
 8000230:	2000      	movs	r0, #0
 8000232:	f001 fc73 	bl	8001b1c <uartPrintf>
        break;
 8000236:	bf00      	nop
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20001298 	.word	0x20001298
 8000244:	08004960 	.word	0x08004960

08000248 <pcLoop>:

void pcLoop(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  static uint32_t addr = 1024;  //
  static uint32_t data = 0;


  if (uartAvailable(_DEF_UART1) > 0)
 800024e:	2000      	movs	r0, #0
 8000250:	f001 fb08 	bl	8001864 <uartAvailable>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d044      	beq.n	80002e4 <pcLoop+0x9c>
  {
    uint8_t ch;

    ch = uartRead(_DEF_UART1);
 800025a:	2000      	movs	r0, #0
 800025c:	f001 fc20 	bl	8001aa0 <uartRead>
 8000260:	4603      	mov	r3, r0
 8000262:	71fb      	strb	r3, [r7, #7]

    if (ch == '0')
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b30      	cmp	r3, #48	; 0x30
 8000268:	d13c      	bne.n	80002e4 <pcLoop+0x9c>
    {
      cmd_pc.tx_packet.data[0] = addr>>0;
 800026a:	4b20      	ldr	r3, [pc, #128]	; (80002ec <pcLoop+0xa4>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <pcLoop+0xa8>)
 8000272:	771a      	strb	r2, [r3, #28]
      cmd_pc.tx_packet.data[1] = addr>>8;
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <pcLoop+0xa4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	b2da      	uxtb	r2, r3
 800027c:	4b1c      	ldr	r3, [pc, #112]	; (80002f0 <pcLoop+0xa8>)
 800027e:	775a      	strb	r2, [r3, #29]
      cmd_pc.tx_packet.data[2] = addr>>16;
 8000280:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <pcLoop+0xa4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	0c1b      	lsrs	r3, r3, #16
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <pcLoop+0xa8>)
 800028a:	779a      	strb	r2, [r3, #30]
      cmd_pc.tx_packet.data[3] = addr>>24;
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <pcLoop+0xa4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	0e1b      	lsrs	r3, r3, #24
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <pcLoop+0xa8>)
 8000296:	77da      	strb	r2, [r3, #31]
      cmd_pc.tx_packet.data[4] = data>>0;
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <pcLoop+0xac>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <pcLoop+0xa8>)
 80002a0:	f883 2020 	strb.w	r2, [r3, #32]
      cmd_pc.tx_packet.data[5] = data>>8;
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <pcLoop+0xac>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <pcLoop+0xa8>)
 80002ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      cmd_pc.tx_packet.data[6] = data>>16;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <pcLoop+0xac>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <pcLoop+0xa8>)
 80002bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      cmd_pc.tx_packet.data[7] = data>>24;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <pcLoop+0xac>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	0e1b      	lsrs	r3, r3, #24
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <pcLoop+0xa8>)
 80002ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

      cmdSendCmd(&cmd_pc, BOOT_CMD_READ_VERSION, cmd_pc.tx_packet.data, 8);
 80002ce:	2308      	movs	r3, #8
 80002d0:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <pcLoop+0xb0>)
 80002d2:	2100      	movs	r1, #0
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <pcLoop+0xa8>)
 80002d6:	f000 fa5d 	bl	8000794 <cmdSendCmd>
      data++;
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <pcLoop+0xac>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <pcLoop+0xac>)
 80002e2:	6013      	str	r3, [r2, #0]
    }
  }
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000270 	.word	0x20000270
 80002f4:	20000094 	.word	0x20000094
 80002f8:	2000028c 	.word	0x2000028c

080002fc <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b090      	sub	sp, #64	; 0x40
 8000300:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2228      	movs	r2, #40	; 0x28
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f003 febd 	bl	8004098 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 800031e:	2302      	movs	r3, #2
 8000320:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 8000326:	2300      	movs	r3, #0
 8000328:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	2310      	movs	r3, #16
 8000330:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 800033a:	2300      	movs	r3, #0
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 800033e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000342:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fc82 	bl	8002c50 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d000      	beq.n	8000354 <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 8000352:	e7fe      	b.n	8000352 <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000354:	230f      	movs	r3, #15
 8000356:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2302      	movs	r3, #2
 800035a:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 800036a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800036e:	2102      	movs	r1, #2
 8000370:	4618      	mov	r0, r3
 8000372:	f002 feed 	bl	8003150 <HAL_RCC_ClockConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d000      	beq.n	800037e <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 800037c:	e7fe      	b.n	800037c <SystemClock_Config+0x80>
  }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <bspInit>:




void bspInit(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
    HAL_Init();
 800038e:	f001 fd39 	bl	8001e04 <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 8000392:	f7ff ffb3 	bl	80002fc <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <bspInit+0x48>)
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <bspInit+0x48>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <bspInit+0x48>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <bspInit+0x48>)
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <bspInit+0x48>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f043 0310 	orr.w	r3, r3, #16
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <bspInit+0x48>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0310 	and.w	r3, r3, #16
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <SystemInit+0x5c>)
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <SystemInit+0x5c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003e4:	4912      	ldr	r1, [pc, #72]	; (8000430 <SystemInit+0x5c>)
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <SystemInit+0x5c>)
 80003e8:	685a      	ldr	r2, [r3, #4]
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <SystemInit+0x60>)
 80003ec:	4013      	ands	r3, r2
 80003ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <SystemInit+0x5c>)
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <SystemInit+0x5c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000400:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <SystemInit+0x5c>)
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <SystemInit+0x5c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800040a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800040c:	4a08      	ldr	r2, [pc, #32]	; (8000430 <SystemInit+0x5c>)
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <SystemInit+0x5c>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000416:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SystemInit+0x5c>)
 800041a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800041e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SystemInit+0x64>)
 8000422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000426:	609a      	str	r2, [r3, #8]
#endif 
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	f8ff0000 	.word	0xf8ff0000
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800043c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800043e:	e003      	b.n	8000448 <LoopCopyDataInit>

08000440 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000442:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000444:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000446:	3104      	adds	r1, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000448:	480a      	ldr	r0, [pc, #40]	; (8000474 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800044c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800044e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000450:	d3f6      	bcc.n	8000440 <CopyDataInit>
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000454:	e002      	b.n	800045c <LoopFillZerobss>

08000456 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000458:	f842 3b04 	str.w	r3, [r2], #4

0800045c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800045e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000460:	d3f9      	bcc.n	8000456 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000462:	f7ff ffb7 	bl	80003d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000466:	f003 fdf3 	bl	8004050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f003 fde5 	bl	8004038 <main>
  bx lr
 800046e:	4770      	bx	lr
  ldr r3, =_sidata
 8000470:	080049f0 	.word	0x080049f0
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000478:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800047c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000480:	20002c2c 	.word	0x20002c2c

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>

08000486 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  Noned
  * @retval None
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <SysTick_Handler>:
  * @param  None
  * @retval None
  */
extern void swtimerISR(void);
void SysTick_Handler(void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80004d2:	f001 fce3 	bl	8001e9c <HAL_IncTick>
  swtimerISR();
 80004d6:	f000 ffc9 	bl	800146c <swtimerISR>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}

080004de <cmdInit>:

static void cmdPutch(uint8_t ch, uint8_t data);


void cmdInit(cmd_t *p_cmd)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  p_cmd->init  = false;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	709a      	strb	r2, [r3, #2]

  p_cmd->rx_packet.error = 0;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822
  p_cmd->tx_packet.error = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	759a      	strb	r2, [r3, #22]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <cmdBegin>:

bool cmdBegin(cmd_t *p_cmd, uint8_t ch, uint32_t baud)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b084      	sub	sp, #16
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	460b      	mov	r3, r1
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	72fb      	strb	r3, [r7, #11]
  p_cmd->ch   = ch;     // channel.
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	7afa      	ldrb	r2, [r7, #11]
 800051c:	701a      	strb	r2, [r3, #0]
  p_cmd->baud = baud;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]
  p_cmd->init = true;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2201      	movs	r2, #1
 8000528:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2200      	movs	r2, #0
 800052e:	709a      	strb	r2, [r3, #2]

  p_cmd->save_time[0] = millis();
 8000530:	f001 fc60 	bl	8001df4 <millis>
 8000534:	4602      	mov	r2, r0
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	609a      	str	r2, [r3, #8]
  p_cmd->save_time[1] = millis();
 800053a:	f001 fc5b 	bl	8001df4 <millis>
 800053e:	4602      	mov	r2, r0
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	60da      	str	r2, [r3, #12]

  return uartOpen(ch, baud);
 8000544:	7afb      	ldrb	r3, [r7, #11]
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f001 f8c7 	bl	80016dc <uartOpen>
 800054e:	4603      	mov	r3, r0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <cmdPutch>:

void cmdPutch(uint8_t ch, uint8_t data)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
  uartPutch(ch, data);
 8000568:	79ba      	ldrb	r2, [r7, #6]
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fa48 	bl	8001a04 <uartPutch>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <cmdReceivePacket>:

bool cmdReceivePacket(cmd_t *p_cmd)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  bool     ret = false;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
  uint32_t index;


  //-- 명령어 수신
  //
  if( uartAvailable(p_cmd->ch) )
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f969 	bl	8001864 <uartAvailable>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d010      	beq.n	80005ba <cmdReceivePacket+0x3e>
  {
    ch = uartRead(p_cmd->ch);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fa7f 	bl	8001aa0 <uartRead>
 80005a2:	4603      	mov	r3, r0
 80005a4:	73bb      	strb	r3, [r7, #14]
  }


  //-- 바이트간 타임아웃 설정(500ms)
  //
  if((millis()-p_cmd->save_time[0]) > 500)
 80005a6:	f001 fc25 	bl	8001df4 <millis>
 80005aa:	4602      	mov	r2, r0
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005b6:	d905      	bls.n	80005c4 <cmdReceivePacket+0x48>
 80005b8:	e001      	b.n	80005be <cmdReceivePacket+0x42>
    return false;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e0e6      	b.n	800078c <cmdReceivePacket+0x210>
  {
    p_cmd->state        = CMD_STATE_WAIT_STX;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	709a      	strb	r2, [r3, #2]
  }
  p_cmd->save_time[0] = millis();
 80005c4:	f001 fc16 	bl	8001df4 <millis>
 80005c8:	4602      	mov	r2, r0
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]


  //-- 명령어 상태
  //
  switch(p_cmd->state)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	789b      	ldrb	r3, [r3, #2]
 80005d2:	2b08      	cmp	r3, #8
 80005d4:	f200 80d9 	bhi.w	800078a <cmdReceivePacket+0x20e>
 80005d8:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <cmdReceivePacket+0x64>)
 80005da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005de:	bf00      	nop
 80005e0:	08000605 	.word	0x08000605
 80005e4:	08000625 	.word	0x08000625
 80005e8:	08000647 	.word	0x08000647
 80005ec:	0800078b 	.word	0x0800078b
 80005f0:	08000671 	.word	0x08000671
 80005f4:	08000695 	.word	0x08000695
 80005f8:	080006fd 	.word	0x080006fd
 80005fc:	08000753 	.word	0x08000753
 8000600:	08000763 	.word	0x08000763
    //-- STX 문자 기다리는 상태
    //
    case CMD_STATE_WAIT_STX:

      // 시작 문자를 기다림
      if( ch == CMD_STX )
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	2b02      	cmp	r3, #2
 8000608:	f040 80bc 	bne.w	8000784 <cmdReceivePacket+0x208>
      {
        p_cmd->state               = CMD_STATE_WAIT_CMD;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	709a      	strb	r2, [r3, #2]
        p_cmd->rx_packet.check_sum = 0x00;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
        p_cmd->rx_packet.length    = 0;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      }
      break;
 8000622:	e0af      	b.n	8000784 <cmdReceivePacket+0x208>

    //-- 명령어 기다리는 상태
    //
    case CMD_STATE_WAIT_CMD:
      p_cmd->rx_packet.cmd        = ch;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
      p_cmd->rx_packet.check_sum ^= ch;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	4053      	eors	r3, r2
 8000636:	b2da      	uxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_OPTION_ERROR;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2202      	movs	r2, #2
 8000642:	709a      	strb	r2, [r3, #2]
      break;
 8000644:	e0a1      	b.n	800078a <cmdReceivePacket+0x20e>

    case CMD_STATE_WAIT_OPTION_ERROR:
      p_cmd->rx_packet.option     = ch;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7bba      	ldrb	r2, [r7, #14]
 800064a:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821
      p_cmd->rx_packet.error      = ch;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7bba      	ldrb	r2, [r7, #14]
 8000652:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822
      p_cmd->rx_packet.check_sum ^= ch;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 800065c:	7bbb      	ldrb	r3, [r7, #14]
 800065e:	4053      	eors	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_L;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2204      	movs	r2, #4
 800066c:	709a      	strb	r2, [r3, #2]
      break;
 800066e:	e08c      	b.n	800078a <cmdReceivePacket+0x20e>

    //-- 데이터 사이즈 기다리는 상태
    //
    case CMD_STATE_WAIT_LENGTH_L:
      p_cmd->rx_packet.length     = ch;
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      p_cmd->rx_packet.check_sum ^= ch;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	4053      	eors	r3, r2
 8000684:	b2da      	uxtb	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_H;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2205      	movs	r2, #5
 8000690:	709a      	strb	r2, [r3, #2]
      break;
 8000692:	e07a      	b.n	800078a <cmdReceivePacket+0x20e>

    case CMD_STATE_WAIT_LENGTH_H:
      p_cmd->rx_packet.length    |= ch<<8;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 800069a:	b21a      	sxth	r2, r3
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
      p_cmd->rx_packet.check_sum ^= ch;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	4053      	eors	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      p_cmd->state                = CMD_STATE_WAIT_LENGTH_H;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2205      	movs	r2, #5
 80006c4:	709a      	strb	r2, [r3, #2]

      if (p_cmd->rx_packet.length <= CMD_MAX_DATA_LENGTH)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 80006cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006d0:	d810      	bhi.n	80006f4 <cmdReceivePacket+0x178>
      {
        if (p_cmd->rx_packet.length > 0)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d007      	beq.n	80006ec <cmdReceivePacket+0x170>
        {
          p_cmd->rx_packet.index = 0;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
          p_cmd->state = CMD_STATE_WAIT_DATA;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2206      	movs	r2, #6
 80006e8:	709a      	strb	r2, [r3, #2]
      }
      else
      {
        p_cmd->state = CMD_STATE_WAIT_STX;
      }
      break;
 80006ea:	e04e      	b.n	800078a <cmdReceivePacket+0x20e>
          p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2207      	movs	r2, #7
 80006f0:	709a      	strb	r2, [r3, #2]
      break;
 80006f2:	e04a      	b.n	800078a <cmdReceivePacket+0x20e>
        p_cmd->state = CMD_STATE_WAIT_STX;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	709a      	strb	r2, [r3, #2]
      break;
 80006fa:	e046      	b.n	800078a <cmdReceivePacket+0x20e>

    //-- 데이터를 기다리는 상태
    //
    case CMD_STATE_WAIT_DATA:

      index = p_cmd->rx_packet.index;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000702:	60bb      	str	r3, [r7, #8]

      p_cmd->rx_packet.check_sum ^= ch;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	4053      	eors	r3, r2
 800070e:	b2da      	uxtb	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
      index = p_cmd->rx_packet.index;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800071c:	60bb      	str	r3, [r7, #8]
      p_cmd->rx_packet.data[index] = ch;
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4413      	add	r3, r2
 8000724:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8000728:	7bba      	ldrb	r2, [r7, #14]
 800072a:	701a      	strb	r2, [r3, #0]

      p_cmd->rx_packet.index++;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

      if (p_cmd->rx_packet.index >= p_cmd->rx_packet.length)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	f8b2 2824 	ldrh.w	r2, [r2, #2084]	; 0x824
 8000746:	4293      	cmp	r3, r2
 8000748:	d31e      	bcc.n	8000788 <cmdReceivePacket+0x20c>
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2207      	movs	r2, #7
 800074e:	709a      	strb	r2, [r3, #2]
      }
      break;
 8000750:	e01a      	b.n	8000788 <cmdReceivePacket+0x20c>
    //-- 체크섬을 기다리는 상태
    //
    case CMD_STATE_WAIT_CHECKSUM:


      p_cmd->rx_packet.check_sum_recv = ch;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7bba      	ldrb	r2, [r7, #14]
 8000756:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
      p_cmd->state                    = CMD_STATE_WAIT_ETX;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2208      	movs	r2, #8
 800075e:	709a      	strb	r2, [r3, #2]
      break;
 8000760:	e013      	b.n	800078a <cmdReceivePacket+0x20e>

    //-- ETX 기다리는 상태
    //
    case CMD_STATE_WAIT_ETX:

      if (ch == CMD_ETX)
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d109      	bne.n	800077c <cmdReceivePacket+0x200>
      {
        if (p_cmd->rx_packet.check_sum_recv == p_cmd->rx_packet.check_sum)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f893 2827 	ldrb.w	r2, [r3, #2087]	; 0x827
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 3826 	ldrb.w	r3, [r3, #2086]	; 0x826
 8000774:	429a      	cmp	r2, r3
 8000776:	d101      	bne.n	800077c <cmdReceivePacket+0x200>
        {
          ret = true;
 8000778:	2301      	movs	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
        }
      }
      p_cmd->state = CMD_STATE_WAIT_STX;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	709a      	strb	r2, [r3, #2]
      break;
 8000782:	e002      	b.n	800078a <cmdReceivePacket+0x20e>
      break;
 8000784:	bf00      	nop
 8000786:	e000      	b.n	800078a <cmdReceivePacket+0x20e>
      break;
 8000788:	bf00      	nop
  }

  return ret;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <cmdSendCmd>:
  cmdPutch(ch, check_sum);
  cmdPutch(ch, CMD_ETX);
}

void cmdSendCmd(cmd_t *p_cmd, uint8_t cmd, uint8_t *p_data, uint32_t length)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	460b      	mov	r3, r1
 80007a2:	72fb      	strb	r3, [r7, #11]
  uint32_t i;
  uint8_t  ch;
  uint8_t  check_sum = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	74fb      	strb	r3, [r7, #19]
  uint8_t  data;

  ch = p_cmd->ch;                   //uart channel.
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	74bb      	strb	r3, [r7, #18]


  p_cmd->tx_packet.cmd    = cmd;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	7afa      	ldrb	r2, [r7, #11]
 80007b2:	751a      	strb	r2, [r3, #20]
  p_cmd->tx_packet.option = 0;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2200      	movs	r2, #0
 80007b8:	755a      	strb	r2, [r3, #21]

  if (p_data != NULL)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d013      	beq.n	80007e8 <cmdSendCmd+0x54>
  {
    for(i=0; i<length; i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	e00c      	b.n	80007e0 <cmdSendCmd+0x4c>
    {
      p_cmd->tx_packet.data[i] = p_data[i];
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4413      	add	r3, r2
 80007cc:	7819      	ldrb	r1, [r3, #0]
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	4413      	add	r3, r2
 80007d4:	331c      	adds	r3, #28
 80007d6:	460a      	mov	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
    for(i=0; i<length; i++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3ee      	bcc.n	80007c6 <cmdSendCmd+0x32>
    }
  }
  p_cmd->tx_packet.length = length;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	831a      	strh	r2, [r3, #24]



  cmdPutch(ch, CMD_STX);
 80007f0:	7cbb      	ldrb	r3, [r7, #18]
 80007f2:	2102      	movs	r1, #2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff feaf 	bl	8000558 <cmdPutch>
  cmdPutch(ch, p_cmd->tx_packet.cmd);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	7d1a      	ldrb	r2, [r3, #20]
 80007fe:	7cbb      	ldrb	r3, [r7, #18]
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fea8 	bl	8000558 <cmdPutch>
  check_sum ^= p_cmd->tx_packet.cmd;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	7d1a      	ldrb	r2, [r3, #20]
 800080c:	7cfb      	ldrb	r3, [r7, #19]
 800080e:	4053      	eors	r3, r2
 8000810:	74fb      	strb	r3, [r7, #19]

  cmdPutch(ch, p_cmd->tx_packet.option);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	7d5a      	ldrb	r2, [r3, #21]
 8000816:	7cbb      	ldrb	r3, [r7, #18]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe9c 	bl	8000558 <cmdPutch>
  check_sum ^= p_cmd->tx_packet.option;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	7d5a      	ldrb	r2, [r3, #21]
 8000824:	7cfb      	ldrb	r3, [r7, #19]
 8000826:	4053      	eors	r3, r2
 8000828:	74fb      	strb	r3, [r7, #19]

  data = p_cmd->tx_packet.length & 0xFF;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	8b1b      	ldrh	r3, [r3, #24]
 800082e:	747b      	strb	r3, [r7, #17]
  cmdPutch(ch, data); check_sum ^= data;
 8000830:	7c7a      	ldrb	r2, [r7, #17]
 8000832:	7cbb      	ldrb	r3, [r7, #18]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe8e 	bl	8000558 <cmdPutch>
 800083c:	7cfa      	ldrb	r2, [r7, #19]
 800083e:	7c7b      	ldrb	r3, [r7, #17]
 8000840:	4053      	eors	r3, r2
 8000842:	74fb      	strb	r3, [r7, #19]
  data = (p_cmd->tx_packet.length>>8) & 0xFF;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	8b1b      	ldrh	r3, [r3, #24]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b29b      	uxth	r3, r3
 800084c:	747b      	strb	r3, [r7, #17]
  cmdPutch(ch, data); check_sum ^= data;
 800084e:	7c7a      	ldrb	r2, [r7, #17]
 8000850:	7cbb      	ldrb	r3, [r7, #18]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe7f 	bl	8000558 <cmdPutch>
 800085a:	7cfa      	ldrb	r2, [r7, #19]
 800085c:	7c7b      	ldrb	r3, [r7, #17]
 800085e:	4053      	eors	r3, r2
 8000860:	74fb      	strb	r3, [r7, #19]


  for( i=0; i<p_cmd->tx_packet.length && i<CMD_MAX_DATA_LENGTH; i++ )
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e014      	b.n	8000892 <cmdSendCmd+0xfe>
  {
    cmdPutch(ch, p_cmd->tx_packet.data[i]);
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4413      	add	r3, r2
 800086e:	331c      	adds	r3, #28
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	7cbb      	ldrb	r3, [r7, #18]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe6e 	bl	8000558 <cmdPutch>
    check_sum ^= p_cmd->tx_packet.data[i];
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4413      	add	r3, r2
 8000882:	331c      	adds	r3, #28
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	7cfb      	ldrb	r3, [r7, #19]
 8000888:	4053      	eors	r3, r2
 800088a:	74fb      	strb	r3, [r7, #19]
  for( i=0; i<p_cmd->tx_packet.length && i<CMD_MAX_DATA_LENGTH; i++ )
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	8b1b      	ldrh	r3, [r3, #24]
 8000896:	461a      	mov	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	429a      	cmp	r2, r3
 800089c:	d903      	bls.n	80008a6 <cmdSendCmd+0x112>
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008a4:	d3e0      	bcc.n	8000868 <cmdSendCmd+0xd4>
  }

  cmdPutch(ch, check_sum);
 80008a6:	7cfa      	ldrb	r2, [r7, #19]
 80008a8:	7cbb      	ldrb	r3, [r7, #18]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe53 	bl	8000558 <cmdPutch>
  cmdPutch(ch, CMD_ETX);
 80008b2:	7cbb      	ldrb	r3, [r7, #18]
 80008b4:	2103      	movs	r1, #3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe4e 	bl	8000558 <cmdPutch>
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80008d0:	2301      	movs	r3, #1
 80008d2:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d104      	bne.n	80008fe <qbufferCreate+0x3a>
    p_node->length = 0;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    ret = false;
 80008fa:	2300      	movs	r3, #0
 80008fc:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 8000900:	4618      	mov	r0, r3
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 800090a:	b480      	push	{r7}
 800090c:	b089      	sub	sp, #36	; 0x24
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000916:	2301      	movs	r3, #1
 8000918:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <qbufferWrite+0x1c>
 8000922:	2300      	movs	r3, #0
 8000924:	e02d      	b.n	8000982 <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	e025      	b.n	8000978 <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	429a      	cmp	r2, r3
 8000942:	d101      	bne.n	8000948 <qbufferWrite+0x3e>
      next_index = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	429a      	cmp	r2, r3
 8000950:	d00c      	beq.n	800096c <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	4413      	add	r3, r2
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	440a      	add	r2, r1
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e002      	b.n	8000972 <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
      break;
 8000970:	e006      	b.n	8000980 <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d3d5      	bcc.n	800092c <qbufferWrite+0x22>
    }
  }
  return ret;
 8000980:	7ffb      	ldrb	r3, [r7, #31]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000998:	2301      	movs	r3, #1
 800099a:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <qbufferRead+0x1c>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e02d      	b.n	8000a04 <qbufferRead+0x78>
  for(i=0; i<length; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e025      	b.n	80009fa <qbufferRead+0x6e>
    index      = p_node->ptr_out;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_out + 1;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the out index is end of the buffer.
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d101      	bne.n	80009ca <qbufferRead+0x3e>
      next_index = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
    }
    if(index != p_node->ptr_in){      // if the buffer is not empty
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d00c      	beq.n	80009ee <qbufferRead+0x62>
      p_data[i]       = p_node->p_buf[index];
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	4413      	add	r3, r2
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	68d1      	ldr	r1, [r2, #12]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	440a      	add	r2, r1
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	701a      	strb	r2, [r3, #0]
      p_node->ptr_out = next_index;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	e002      	b.n	80009f4 <qbufferRead+0x68>
    }
    else{                             // if the buffer is empty ERR_EMPTY
      ret = false;
 80009ee:	2300      	movs	r3, #0
 80009f0:	77fb      	strb	r3, [r7, #31]
      break;
 80009f2:	e006      	b.n	8000a02 <qbufferRead+0x76>
  for(i=0; i<length; i++){
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3d5      	bcc.n	80009ae <qbufferRead+0x22>
    }
  }
  return ret;
 8000a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3724      	adds	r7, #36	; 0x24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node){  // How many is there the buffer elements could be used.
 8000a0e:	b480      	push	{r7}
 8000a10:	b085      	sub	sp, #20
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	441a      	add	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	6892      	ldr	r2, [r2, #8]
 8000a2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a2e:	fb02 f201 	mul.w	r2, r2, r1
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]

  return length;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node){
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <button_isr>:
  uint32_t released_end_time;
}button_t;

static button_t button_tbl[BUTTON_MAX_CH];

void button_isr(void *arg){
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<BUTTON_MAX_CH; i++){
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e09f      	b.n	8000bae <button_isr+0x14e>
    if(buttonGetPressed(i)){
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f905 	bl	8000c80 <buttonGetPressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d056      	beq.n	8000b2a <button_isr+0xca>
      if(button_tbl[i].pressed == false){
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	4950      	ldr	r1, [pc, #320]	; (8000bc0 <button_isr+0x160>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	f083 0301 	eor.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d015      	beq.n	8000ac2 <button_isr+0x62>
        button_tbl[i].pressed_event = true;
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	4949      	ldr	r1, [pc, #292]	; (8000bc0 <button_isr+0x160>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = millis();
 8000aaa:	7bfc      	ldrb	r4, [r7, #15]
 8000aac:	f001 f9a2 	bl	8001df4 <millis>
 8000ab0:	4601      	mov	r1, r0
 8000ab2:	4a43      	ldr	r2, [pc, #268]	; (8000bc0 <button_isr+0x160>)
 8000ab4:	4623      	mov	r3, r4
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4423      	add	r3, r4
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	4413      	add	r3, r2
 8000abe:	3304      	adds	r3, #4
 8000ac0:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = true;
 8000ac2:	7bfa      	ldrb	r2, [r7, #15]
 8000ac4:	493e      	ldr	r1, [pc, #248]	; (8000bc0 <button_isr+0x160>)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4413      	add	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	440b      	add	r3, r1
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 8000ad4:	7bfa      	ldrb	r2, [r7, #15]
 8000ad6:	493a      	ldr	r1, [pc, #232]	; (8000bc0 <button_isr+0x160>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	440b      	add	r3, r1
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b298      	uxth	r0, r3
 8000aea:	4935      	ldr	r1, [pc, #212]	; (8000bc0 <button_isr+0x160>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	440b      	add	r3, r1
 8000af6:	3302      	adds	r3, #2
 8000af8:	4602      	mov	r2, r0
 8000afa:	801a      	strh	r2, [r3, #0]

      button_tbl[i].pressed_end_time = millis();
 8000afc:	7bfc      	ldrb	r4, [r7, #15]
 8000afe:	f001 f979 	bl	8001df4 <millis>
 8000b02:	4601      	mov	r1, r0
 8000b04:	4a2e      	ldr	r2, [pc, #184]	; (8000bc0 <button_isr+0x160>)
 8000b06:	4623      	mov	r3, r4
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4423      	add	r3, r4
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	3308      	adds	r3, #8
 8000b12:	6019      	str	r1, [r3, #0]
      button_tbl[i].released = false;
 8000b14:	7bfa      	ldrb	r2, [r7, #15]
 8000b16:	492a      	ldr	r1, [pc, #168]	; (8000bc0 <button_isr+0x160>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	330c      	adds	r3, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e03e      	b.n	8000ba8 <button_isr+0x148>
    }
    else{                                   // not pressed
      if(button_tbl[i].pressed == true){
 8000b2a:	7bfa      	ldrb	r2, [r7, #15]
 8000b2c:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <button_isr+0x160>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	440b      	add	r3, r1
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d015      	beq.n	8000b6a <button_isr+0x10a>
        button_tbl[i].released_event = true;
 8000b3e:	7bfa      	ldrb	r2, [r7, #15]
 8000b40:	491f      	ldr	r1, [pc, #124]	; (8000bc0 <button_isr+0x160>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	440b      	add	r3, r1
 8000b4c:	330d      	adds	r3, #13
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = millis();
 8000b52:	7bfc      	ldrb	r4, [r7, #15]
 8000b54:	f001 f94e 	bl	8001df4 <millis>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <button_isr+0x160>)
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4423      	add	r3, r4
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	3310      	adds	r3, #16
 8000b68:	6019      	str	r1, [r3, #0]
      }
      button_tbl[i].pressed = false;
 8000b6a:	7bfa      	ldrb	r2, [r7, #15]
 8000b6c:	4914      	ldr	r1, [pc, #80]	; (8000bc0 <button_isr+0x160>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 8000b7c:	7bfa      	ldrb	r2, [r7, #15]
 8000b7e:	4910      	ldr	r1, [pc, #64]	; (8000bc0 <button_isr+0x160>)
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	440b      	add	r3, r1
 8000b8a:	330c      	adds	r3, #12
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = millis();
 8000b90:	7bfc      	ldrb	r4, [r7, #15]
 8000b92:	f001 f92f 	bl	8001df4 <millis>
 8000b96:	4601      	mov	r1, r0
 8000b98:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <button_isr+0x160>)
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4423      	add	r3, r4
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3314      	adds	r3, #20
 8000ba6:	6019      	str	r1, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f43f af5c 	beq.w	8000a6e <button_isr+0xe>
    }
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000098 	.word	0x20000098

08000bc4 <buttonInit>:

void buttonInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af02      	add	r7, sp, #8
  swtimer_handle_t h_button_timer;
  uint32_t i;

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4824      	ldr	r0, [pc, #144]	; (8000c74 <buttonInit+0xb0>)
 8000be2:	f001 fe07 	bl	80027f4 <HAL_GPIO_Init>

  for(i=0; i<BUTTON_MAX_CH; i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e029      	b.n	8000c40 <buttonInit+0x7c>
    button_tbl[i].pressed_cnt    = 0;
 8000bec:	4922      	ldr	r1, [pc, #136]	; (8000c78 <buttonInit+0xb4>)
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed        = 0;
 8000c00:	491d      	ldr	r1, [pc, #116]	; (8000c78 <buttonInit+0xb4>)
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	440b      	add	r3, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released       = 0;
 8000c12:	4919      	ldr	r1, [pc, #100]	; (8000c78 <buttonInit+0xb4>)
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	330c      	adds	r3, #12
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8000c26:	4914      	ldr	r1, [pc, #80]	; (8000c78 <buttonInit+0xb4>)
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	440b      	add	r3, r1
 8000c34:	330d      	adds	r3, #13
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
  for(i=0; i<BUTTON_MAX_CH; i++){
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0d2      	beq.n	8000bec <buttonInit+0x28>
  }

  h_button_timer = swtimerGetHandle();
 8000c46:	f000 fd01 	bl	800164c <swtimerGetHandle>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	827b      	strh	r3, [r7, #18]
  swtimerSet(h_button_timer, 1, LOOP_TIME, button_isr, NULL);
 8000c4e:	8a7b      	ldrh	r3, [r7, #18]
 8000c50:	b2d8      	uxtb	r0, r3
 8000c52:	2300      	movs	r3, #0
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <buttonInit+0xb8>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	f000 fc8a 	bl	8001574 <swtimerSet>
  swtimerStart(h_button_timer);
 8000c60:	8a7b      	ldrh	r3, [r7, #18]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fcc7 	bl	80015f8 <swtimerStart>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40011000 	.word	0x40011000
 8000c78:	20000098 	.word	0x20000098
 8000c7c:	08000a61 	.word	0x08000a61

08000c80 <buttonGetPressed>:
  button_tbl[ch].released_start_time   = 0;
  button_tbl[ch].released_end_time     = 0;
}

bool buttonGetPressed(uint8_t ch)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <buttonGetPressed+0x28>)
 8000c90:	f001 ffc6 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <buttonGetPressed+0x1e>
  {
    return true;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <buttonGetPressed+0x20>
  }
  else
  {
    return false;
 8000c9e:	2300      	movs	r3, #0
  }
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40011000 	.word	0x40011000

08000cac <eepromInit>:




bool eepromInit()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  uint16_t i;
  for( i=0; i<NB_OF_VAR; i++ )
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	80fb      	strh	r3, [r7, #6]
 8000cb6:	e007      	b.n	8000cc8 <eepromInit+0x1c>
  {
    VirtAddVarTab[i] = i;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <eepromInit+0x44>)
 8000cbc:	88fa      	ldrh	r2, [r7, #6]
 8000cbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for( i=0; i<NB_OF_VAR; i++ )
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	80fb      	strh	r3, [r7, #6]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	2b7f      	cmp	r3, #127	; 0x7f
 8000ccc:	d9f4      	bls.n	8000cb8 <eepromInit+0xc>
  }
  HAL_FLASH_Unlock();         // Because Emulating EEPROM on the flash.
 8000cce:	f001 fc11 	bl	80024f4 <HAL_FLASH_Unlock>
  if( EE_Init() == HAL_OK )
 8000cd2:	f000 f811 	bl	8000cf8 <EE_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <eepromInit+0x36>
  {
    IsInit = true;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <eepromInit+0x48>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
  }
  return IsInit;
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <eepromInit+0x48>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000b4 	.word	0x200000b4
 8000cf4:	200000b0 	.word	0x200000b0

08000cf8 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d02:	2306      	movs	r3, #6
 8000d04:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	83fb      	strh	r3, [r7, #30]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8000d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d16:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000d1c:	4b9e      	ldr	r3, [pc, #632]	; (8000f98 <EE_Init+0x2a0>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000d22:	4b9e      	ldr	r3, [pc, #632]	; (8000f9c <EE_Init+0x2a4>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000d2c:	4b9a      	ldr	r3, [pc, #616]	; (8000f98 <EE_Init+0x2a0>)
 8000d2e:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8000d34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d36:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d057      	beq.n	8000dee <EE_Init+0xf6>
 8000d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d003      	beq.n	8000d4e <EE_Init+0x56>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80f4 	beq.w	8000f34 <EE_Init+0x23c>
 8000d4c:	e18d      	b.n	800106a <EE_Init+0x372>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000d4e:	8c3b      	ldrh	r3, [r7, #32]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d116      	bne.n	8000d82 <EE_Init+0x8a>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000d54:	4890      	ldr	r0, [pc, #576]	; (8000f98 <EE_Init+0x2a0>)
 8000d56:	f000 f9a9 	bl	80010ac <EE_VerifyPageFullyErased>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 818e 	bne.w	800107e <EE_Init+0x386>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000d62:	f107 0214 	add.w	r2, r7, #20
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fc9a 	bl	80026a4 <HAL_FLASHEx_Erase>
 8000d70:	4603      	mov	r3, r0
 8000d72:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000d74:	7efb      	ldrb	r3, [r7, #27]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8181 	beq.w	800107e <EE_Init+0x386>
          {
            return flashstatus;
 8000d7c:	7efb      	ldrb	r3, [r7, #27]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	e185      	b.n	800108e <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000d82:	8c3b      	ldrh	r3, [r7, #32]
 8000d84:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d125      	bne.n	8000dd8 <EE_Init+0xe0>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000d8c:	4882      	ldr	r0, [pc, #520]	; (8000f98 <EE_Init+0x2a0>)
 8000d8e:	f000 f98d 	bl	80010ac <EE_VerifyPageFullyErased>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10e      	bne.n	8000db6 <EE_Init+0xbe>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000d98:	f107 0214 	add.w	r2, r7, #20
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fc7f 	bl	80026a4 <HAL_FLASHEx_Erase>
 8000da6:	4603      	mov	r3, r0
 8000da8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000daa:	7efb      	ldrb	r3, [r7, #27]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <EE_Init+0xbe>
          {
            return flashstatus;
 8000db0:	7efb      	ldrb	r3, [r7, #27]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	e16b      	b.n	800108e <EE_Init+0x396>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	4977      	ldr	r1, [pc, #476]	; (8000f9c <EE_Init+0x2a4>)
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f001 fb27 	bl	8002414 <HAL_FLASH_Program>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000dca:	7efb      	ldrb	r3, [r7, #27]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 8156 	beq.w	800107e <EE_Init+0x386>
        {
          return flashstatus;
 8000dd2:	7efb      	ldrb	r3, [r7, #27]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	e15a      	b.n	800108e <EE_Init+0x396>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000dd8:	f000 f9d8 	bl	800118c <EE_Format>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000de0:	7efb      	ldrb	r3, [r7, #27]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 814b 	beq.w	800107e <EE_Init+0x386>
        {
          return flashstatus;
 8000de8:	7efb      	ldrb	r3, [r7, #27]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	e14f      	b.n	800108e <EE_Init+0x396>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000dee:	8c3b      	ldrh	r3, [r7, #32]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d163      	bne.n	8000ebc <EE_Init+0x1c4>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000df8:	e030      	b.n	8000e5c <EE_Init+0x164>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000dfa:	4b69      	ldr	r3, [pc, #420]	; (8000fa0 <EE_Init+0x2a8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e02:	4968      	ldr	r1, [pc, #416]	; (8000fa4 <EE_Init+0x2ac>)
 8000e04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d101      	bne.n	8000e10 <EE_Init+0x118>
          {
            x = varidx;
 8000e0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8000e10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e12:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d01d      	beq.n	8000e56 <EE_Init+0x15e>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000e1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e1c:	4a61      	ldr	r2, [pc, #388]	; (8000fa4 <EE_Init+0x2ac>)
 8000e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e22:	4961      	ldr	r1, [pc, #388]	; (8000fa8 <EE_Init+0x2b0>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f967 	bl	80010f8 <EE_ReadVariable>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8000e2e:	8bbb      	ldrh	r3, [r7, #28]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d010      	beq.n	8000e56 <EE_Init+0x15e>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e36:	4a5b      	ldr	r2, [pc, #364]	; (8000fa4 <EE_Init+0x2ac>)
 8000e38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e3c:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <EE_Init+0x2b0>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4610      	mov	r0, r2
 8000e44:	f000 fa36 	bl	80012b4 <EE_VerifyPageFullWriteVariable>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8000e4c:	8bfb      	ldrh	r3, [r7, #30]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <EE_Init+0x15e>
              {
                return eepromstatus;
 8000e52:	8bfb      	ldrh	r3, [r7, #30]
 8000e54:	e11b      	b.n	800108e <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e58:	3301      	adds	r3, #1
 8000e5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e60:	d9cb      	bls.n	8000dfa <EE_Init+0x102>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	494b      	ldr	r1, [pc, #300]	; (8000f98 <EE_Init+0x2a0>)
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f001 fad1 	bl	8002414 <HAL_FLASH_Program>
 8000e72:	4603      	mov	r3, r0
 8000e74:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000e76:	7efb      	ldrb	r3, [r7, #27]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <EE_Init+0x18a>
        {
          return flashstatus;
 8000e7c:	7efb      	ldrb	r3, [r7, #27]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	e105      	b.n	800108e <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000e86:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <EE_Init+0x2a4>)
 8000e88:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000e8e:	4843      	ldr	r0, [pc, #268]	; (8000f9c <EE_Init+0x2a4>)
 8000e90:	f000 f90c 	bl	80010ac <EE_VerifyPageFullyErased>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 80f3 	bne.w	8001082 <EE_Init+0x38a>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000e9c:	f107 0214 	add.w	r2, r7, #20
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fbfd 	bl	80026a4 <HAL_FLASHEx_Erase>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000eae:	7efb      	ldrb	r3, [r7, #27]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80e6 	beq.w	8001082 <EE_Init+0x38a>
          {
            return flashstatus;
 8000eb6:	7efb      	ldrb	r3, [r7, #27]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	e0e8      	b.n	800108e <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000ebc:	8c3b      	ldrh	r3, [r7, #32]
 8000ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12b      	bne.n	8000f1e <EE_Init+0x226>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000eca:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <EE_Init+0x2a4>)
 8000ecc:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000ed2:	4832      	ldr	r0, [pc, #200]	; (8000f9c <EE_Init+0x2a4>)
 8000ed4:	f000 f8ea 	bl	80010ac <EE_VerifyPageFullyErased>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10e      	bne.n	8000efc <EE_Init+0x204>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000ede:	f107 0214 	add.w	r2, r7, #20
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fbdc 	bl	80026a4 <HAL_FLASHEx_Erase>
 8000eec:	4603      	mov	r3, r0
 8000eee:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000ef0:	7efb      	ldrb	r3, [r7, #27]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <EE_Init+0x204>
          {
            return flashstatus;
 8000ef6:	7efb      	ldrb	r3, [r7, #27]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	e0c8      	b.n	800108e <EE_Init+0x396>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	4924      	ldr	r1, [pc, #144]	; (8000f98 <EE_Init+0x2a0>)
 8000f06:	2001      	movs	r0, #1
 8000f08:	f001 fa84 	bl	8002414 <HAL_FLASH_Program>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000f10:	7efb      	ldrb	r3, [r7, #27]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80b5 	beq.w	8001082 <EE_Init+0x38a>
        {
          return flashstatus;
 8000f18:	7efb      	ldrb	r3, [r7, #27]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	e0b7      	b.n	800108e <EE_Init+0x396>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000f1e:	f000 f935 	bl	800118c <EE_Format>
 8000f22:	4603      	mov	r3, r0
 8000f24:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000f26:	7efb      	ldrb	r3, [r7, #27]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80aa 	beq.w	8001082 <EE_Init+0x38a>
        {
          return flashstatus;
 8000f2e:	7efb      	ldrb	r3, [r7, #27]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	e0ac      	b.n	800108e <EE_Init+0x396>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000f34:	8c3b      	ldrh	r3, [r7, #32]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <EE_Init+0x258>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000f3a:	f000 f927 	bl	800118c <EE_Format>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000f42:	7efb      	ldrb	r3, [r7, #27]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 809e 	beq.w	8001086 <EE_Init+0x38e>
        {
          return flashstatus;
 8000f4a:	7efb      	ldrb	r3, [r7, #27]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	e09e      	b.n	800108e <EE_Init+0x396>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000f50:	8c3b      	ldrh	r3, [r7, #32]
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d11b      	bne.n	8000f92 <EE_Init+0x29a>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <EE_Init+0x2a4>)
 8000f60:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <EE_Init+0x2a4>)
 8000f68:	f000 f8a0 	bl	80010ac <EE_VerifyPageFullyErased>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 8089 	bne.w	8001086 <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000f74:	f107 0214 	add.w	r2, r7, #20
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fb91 	bl	80026a4 <HAL_FLASHEx_Erase>
 8000f82:	4603      	mov	r3, r0
 8000f84:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000f86:	7efb      	ldrb	r3, [r7, #27]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d07c      	beq.n	8001086 <EE_Init+0x38e>
          {
            return flashstatus;
 8000f8c:	7efb      	ldrb	r3, [r7, #27]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	e07d      	b.n	800108e <EE_Init+0x396>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f96:	e03a      	b.n	800100e <EE_Init+0x316>
 8000f98:	08007800 	.word	0x08007800
 8000f9c:	08007c00 	.word	0x08007c00
 8000fa0:	08007806 	.word	0x08007806
 8000fa4:	200000b4 	.word	0x200000b4
 8000fa8:	200001b4 	.word	0x200001b4
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <EE_Init+0x3a0>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fb4:	4939      	ldr	r1, [pc, #228]	; (800109c <EE_Init+0x3a4>)
 8000fb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d101      	bne.n	8000fc2 <EE_Init+0x2ca>
          {
            x = varidx;
 8000fbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fc0:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8000fc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d01d      	beq.n	8001008 <EE_Init+0x310>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <EE_Init+0x3a4>)
 8000fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd4:	4932      	ldr	r1, [pc, #200]	; (80010a0 <EE_Init+0x3a8>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f88e 	bl	80010f8 <EE_ReadVariable>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8000fe0:	8bbb      	ldrh	r3, [r7, #28]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d010      	beq.n	8001008 <EE_Init+0x310>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000fe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	; (800109c <EE_Init+0x3a4>)
 8000fea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <EE_Init+0x3a8>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f000 f95d 	bl	80012b4 <EE_VerifyPageFullWriteVariable>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8000ffe:	8bfb      	ldrh	r3, [r7, #30]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <EE_Init+0x310>
              {
                return eepromstatus;
 8001004:	8bfb      	ldrh	r3, [r7, #30]
 8001006:	e042      	b.n	800108e <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800100a:	3301      	adds	r3, #1
 800100c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800100e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001010:	2b7f      	cmp	r3, #127	; 0x7f
 8001012:	d9cb      	bls.n	8000fac <EE_Init+0x2b4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	4921      	ldr	r1, [pc, #132]	; (80010a4 <EE_Init+0x3ac>)
 800101e:	2001      	movs	r0, #1
 8001020:	f001 f9f8 	bl	8002414 <HAL_FLASH_Program>
 8001024:	4603      	mov	r3, r0
 8001026:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <EE_Init+0x33c>
        {
          return flashstatus;
 800102e:	7efb      	ldrb	r3, [r7, #27]
 8001030:	b29b      	uxth	r3, r3
 8001032:	e02c      	b.n	800108e <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <EE_Init+0x3b0>)
 800103a:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001040:	4819      	ldr	r0, [pc, #100]	; (80010a8 <EE_Init+0x3b0>)
 8001042:	f000 f833 	bl	80010ac <EE_VerifyPageFullyErased>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d11c      	bne.n	8001086 <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800104c:	f107 0214 	add.w	r2, r7, #20
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fb25 	bl	80026a4 <HAL_FLASHEx_Erase>
 800105a:	4603      	mov	r3, r0
 800105c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800105e:	7efb      	ldrb	r3, [r7, #27]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d010      	beq.n	8001086 <EE_Init+0x38e>
          {
            return flashstatus;
 8001064:	7efb      	ldrb	r3, [r7, #27]
 8001066:	b29b      	uxth	r3, r3
 8001068:	e011      	b.n	800108e <EE_Init+0x396>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 800106a:	f000 f88f 	bl	800118c <EE_Format>
 800106e:	4603      	mov	r3, r0
 8001070:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8001072:	7efb      	ldrb	r3, [r7, #27]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d008      	beq.n	800108a <EE_Init+0x392>
      {
        return flashstatus;
 8001078:	7efb      	ldrb	r3, [r7, #27]
 800107a:	b29b      	uxth	r3, r3
 800107c:	e007      	b.n	800108e <EE_Init+0x396>
      break;
 800107e:	bf00      	nop
 8001080:	e004      	b.n	800108c <EE_Init+0x394>
      break;
 8001082:	bf00      	nop
 8001084:	e002      	b.n	800108c <EE_Init+0x394>
      break;
 8001086:	bf00      	nop
 8001088:	e000      	b.n	800108c <EE_Init+0x394>
      }
      break;
 800108a:	bf00      	nop
  }

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	08007c06 	.word	0x08007c06
 800109c:	200000b4 	.word	0x200000b4
 80010a0:	200001b4 	.word	0x200001b4
 80010a4:	08007c00 	.word	0x08007c00
 80010a8:	08007800 	.word	0x08007800

080010ac <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 80010b8:	f245 5355 	movw	r3, #21845	; 0x5555
 80010bc:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80010be:	e00d      	b.n	80010dc <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 80010c6:	897b      	ldrh	r3, [r7, #10]
 80010c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d002      	beq.n	80010d6 <EE_VerifyPageFullyErased+0x2a>
    {
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
      break;
 80010d4:	e006      	b.n	80010e4 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3304      	adds	r3, #4
 80010da:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <EE_VerifyPageFullyErased+0x48>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d9ed      	bls.n	80010c0 <EE_VerifyPageFullyErased+0x14>
  }
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	b29b      	uxth	r3, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	08007bff 	.word	0x08007bff

080010f8 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8001104:	2300      	movs	r3, #0
 8001106:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001108:	f245 5355 	movw	r3, #21845	; 0x5555
 800110c:	81bb      	strh	r3, [r7, #12]
 800110e:	2301      	movs	r3, #1
 8001110:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <EE_ReadVariable+0x8c>)
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <EE_ReadVariable+0x8c>)
 8001118:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f886 	bl	800122c <EE_FindValidPage>
 8001120:	4603      	mov	r3, r0
 8001122:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001124:	89fb      	ldrh	r3, [r7, #14]
 8001126:	2bab      	cmp	r3, #171	; 0xab
 8001128:	d101      	bne.n	800112e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800112a:	23ab      	movs	r3, #171	; 0xab
 800112c:	e025      	b.n	800117a <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001134:	331e      	adds	r3, #30
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	029a      	lsls	r2, r3, #10
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <EE_ReadVariable+0x90>)
 8001142:	4413      	add	r3, r2
 8001144:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8001146:	e012      	b.n	800116e <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 800114e:	89ba      	ldrh	r2, [r7, #12]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	429a      	cmp	r2, r3
 8001154:	d108      	bne.n	8001168 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3b02      	subs	r3, #2
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	82fb      	strh	r3, [r7, #22]

      break;
 8001166:	e007      	b.n	8001178 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3b04      	subs	r3, #4
 800116c:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1c9a      	adds	r2, r3, #2
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3e7      	bcc.n	8001148 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8001178:	8afb      	ldrh	r3, [r7, #22]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	08007800 	.word	0x08007800
 8001188:	080077fe 	.word	0x080077fe

0800118c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <EE_Format+0x98>)
 80011a0:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80011a6:	481f      	ldr	r0, [pc, #124]	; (8001224 <EE_Format+0x98>)
 80011a8:	f7ff ff80 	bl	80010ac <EE_VerifyPageFullyErased>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10d      	bne.n	80011ce <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80011b2:	f107 0210 	add.w	r2, r7, #16
 80011b6:	463b      	mov	r3, r7
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fa72 	bl	80026a4 <HAL_FLASHEx_Erase>
 80011c0:	4603      	mov	r3, r0
 80011c2:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <EE_Format+0x42>
    {
      return flashstatus;
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	e025      	b.n	800121a <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	4913      	ldr	r1, [pc, #76]	; (8001224 <EE_Format+0x98>)
 80011d8:	2001      	movs	r0, #1
 80011da:	f001 f91b 	bl	8002414 <HAL_FLASH_Program>
 80011de:	4603      	mov	r3, r0
 80011e0:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <EE_Format+0x60>
  {
    return flashstatus;
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	e016      	b.n	800121a <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <EE_Format+0x9c>)
 80011ee:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <EE_Format+0x9c>)
 80011f2:	f7ff ff5b 	bl	80010ac <EE_VerifyPageFullyErased>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10d      	bne.n	8001218 <EE_Format+0x8c>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80011fc:	f107 0210 	add.w	r2, r7, #16
 8001200:	463b      	mov	r3, r7
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fa4d 	bl	80026a4 <HAL_FLASHEx_Erase>
 800120a:	4603      	mov	r3, r0
 800120c:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <EE_Format+0x8c>
    {
      return flashstatus;
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	e000      	b.n	800121a <EE_Format+0x8e>
    }
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	08007800 	.word	0x08007800
 8001228:	08007c00 	.word	0x08007c00

0800122c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8001236:	2306      	movs	r3, #6
 8001238:	81fb      	strh	r3, [r7, #14]
 800123a:	2306      	movs	r3, #6
 800123c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <EE_FindValidPage+0x80>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <EE_FindValidPage+0x84>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01b      	beq.n	8001288 <EE_FindValidPage+0x5c>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d125      	bne.n	80012a0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8001254:	89bb      	ldrh	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d108      	bne.n	800126c <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001260:	4293      	cmp	r3, r2
 8001262:	d101      	bne.n	8001268 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001264:	2300      	movs	r3, #0
 8001266:	e01c      	b.n	80012a2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001268:	2340      	movs	r3, #64	; 0x40
 800126a:	e01a      	b.n	80012a2 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8001272:	89bb      	ldrh	r3, [r7, #12]
 8001274:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800127c:	2340      	movs	r3, #64	; 0x40
 800127e:	e010      	b.n	80012a2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001280:	2300      	movs	r3, #0
 8001282:	e00e      	b.n	80012a2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001284:	23ab      	movs	r3, #171	; 0xab
 8001286:	e00c      	b.n	80012a2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800128e:	2300      	movs	r3, #0
 8001290:	e007      	b.n	80012a2 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	e002      	b.n	80012a2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800129c:	23ab      	movs	r3, #171	; 0xab
 800129e:	e000      	b.n	80012a2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80012a0:	2300      	movs	r3, #0
  }
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	08007800 	.word	0x08007800
 80012b0:	08007c00 	.word	0x08007c00

080012b4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	4613      	mov	r3, r2
 80012c2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <EE_VerifyPageFullWriteVariable+0xb0>)
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <EE_VerifyPageFullWriteVariable+0xb4>)
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff ffa9 	bl	800122c <EE_FindValidPage>
 80012da:	4603      	mov	r3, r0
 80012dc:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80012de:	8a3b      	ldrh	r3, [r7, #16]
 80012e0:	2bab      	cmp	r3, #171	; 0xab
 80012e2:	d101      	bne.n	80012e8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80012e4:	23ab      	movs	r3, #171	; 0xab
 80012e6:	e039      	b.n	800135c <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80012e8:	8a3b      	ldrh	r3, [r7, #16]
 80012ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80012ee:	331e      	adds	r3, #30
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 80012f4:	8a3b      	ldrh	r3, [r7, #16]
 80012f6:	3301      	adds	r3, #1
 80012f8:	029a      	lsls	r2, r3, #10
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <EE_VerifyPageFullWriteVariable+0xb8>)
 80012fc:	4413      	add	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8001300:	e027      	b.n	8001352 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130a:	d11f      	bne.n	800134c <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	f04f 0400 	mov.w	r4, #0
 8001312:	461a      	mov	r2, r3
 8001314:	4623      	mov	r3, r4
 8001316:	6979      	ldr	r1, [r7, #20]
 8001318:	2001      	movs	r0, #1
 800131a:	f001 f87b 	bl	8002414 <HAL_FLASH_Program>
 800131e:	4603      	mov	r3, r0
 8001320:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8001322:	7cfb      	ldrb	r3, [r7, #19]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return flashstatus;
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	b29b      	uxth	r3, r3
 800132c:	e016      	b.n	800135c <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	1c99      	adds	r1, r3, #2
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	2001      	movs	r0, #1
 800133e:	f001 f869 	bl	8002414 <HAL_FLASH_Program>
 8001342:	4603      	mov	r3, r0
 8001344:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8001346:	7cfb      	ldrb	r3, [r7, #19]
 8001348:	b29b      	uxth	r3, r3
 800134a:	e007      	b.n	800135c <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3304      	adds	r3, #4
 8001350:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3d3      	bcc.n	8001302 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }
  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800135a:	2380      	movs	r3, #128	; 0x80
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	08007800 	.word	0x08007800
 8001368:	08007c00 	.word	0x08007c00
 800136c:	080077ff 	.word	0x080077ff

08001370 <flashInit>:
static int32_t getPage(uint32_t Address);



void flashInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  uint32_t i;


  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	e011      	b.n	80013a0 <flashInit+0x30>
  {
    flash_tbl[i].address = 0x08000000 + ( i * FLASH_PAGE_SIZE ); // Main memory Flash module start at 0x08000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001382:	029a      	lsls	r2, r3, #10
 8001384:	490a      	ldr	r1, [pc, #40]	; (80013b0 <flashInit+0x40>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    flash_tbl[i].length  = FLASH_PAGE_SIZE;                      // 0x400U = 1024 -> 1Kbyte = Page Size.
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <flashInit+0x40>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001398:	605a      	str	r2, [r3, #4]
  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b7f      	cmp	r3, #127	; 0x7f
 80013a4:	d9ea      	bls.n	800137c <flashInit+0xc>
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	200022c0 	.word	0x200022c0

080013b4 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 80013c6:	2320      	movs	r3, #32
 80013c8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <ledInit+0x28>)
 80013d0:	f001 fa10 	bl	80027f4 <HAL_GPIO_Init>
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40010800 	.word	0x40010800

080013e0 <swtimerInit>:

static volatile uint32_t sw_timer_counter      = 0;     // SW Timer Counter
static volatile uint16_t sw_timer_handle_index = 0;
static swtimer_t swtimer_tbl[_HW_DEF_SW_TIMER_MAX];

bool swtimerInit(void){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t execute = 0;

  if(execute == 1){  // if you have already run it,
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <swtimerInit+0x84>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <swtimerInit+0x12>
    return false;    // return false.
 80013ee:	2300      	movs	r3, #0
 80013f0:	e033      	b.n	800145a <swtimerInit+0x7a>
  }

  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e029      	b.n	800144c <swtimerInit+0x6c>
    swtimer_tbl[i].Timer_En = OFF;
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	491b      	ldr	r1, [pc, #108]	; (8001468 <swtimerInit+0x88>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn = 0;
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	4916      	ldr	r1, [pc, #88]	; (8001468 <swtimerInit+0x88>)
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	3304      	adds	r3, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	4911      	ldr	r1, [pc, #68]	; (8001468 <swtimerInit+0x88>)
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	3308      	adds	r3, #8
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct = NULL;
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <swtimerInit+0x88>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	330c      	adds	r3, #12
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
  for(i =0; i<_HW_DEF_SW_TIMER_MAX; i++){   // Initialize the struct of the Timer
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	3301      	adds	r3, #1
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b07      	cmp	r3, #7
 8001450:	d9d2      	bls.n	80013f8 <swtimerInit+0x18>
  }

  execute = 1;
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <swtimerInit+0x84>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
  return true;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000260 	.word	0x20000260
 8001468:	200001c0 	.word	0x200001c0

0800146c <swtimerISR>:


void swtimerISR(void){    // = Software Timer Interrupt Service Request = SW Timer Interrupt Handler
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  uint8_t i;
  sw_timer_counter++;     // count up
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <swtimerISR+0xfc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a3b      	ldr	r2, [pc, #236]	; (8001568 <swtimerISR+0xfc>)
 800147a:	6013      	str	r3, [r2, #0]

  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 800147c:	2300      	movs	r3, #0
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	e063      	b.n	800154a <swtimerISR+0xde>
    if( swtimer_tbl[i].Timer_En == ON ){                               // If the Timer is enable
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	4939      	ldr	r1, [pc, #228]	; (800156c <swtimerISR+0x100>)
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d156      	bne.n	8001544 <swtimerISR+0xd8>
      swtimer_tbl[i].Timer_Ctn--;                                      // Decount the Timer counter
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	4934      	ldr	r1, [pc, #208]	; (800156c <swtimerISR+0x100>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1e59      	subs	r1, r3, #1
 80014aa:	4830      	ldr	r0, [pc, #192]	; (800156c <swtimerISR+0x100>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4403      	add	r3, r0
 80014b6:	3304      	adds	r3, #4
 80014b8:	6019      	str	r1, [r3, #0]

      if(swtimer_tbl[i].Timer_Ctn == 0){                               // If the overflow happens ( because of the short of the timer )
 80014ba:	79fa      	ldrb	r2, [r7, #7]
 80014bc:	492b      	ldr	r1, [pc, #172]	; (800156c <swtimerISR+0x100>)
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d139      	bne.n	8001544 <swtimerISR+0xd8>
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME){                     // If the Mode is ONE TIME
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	4926      	ldr	r1, [pc, #152]	; (800156c <swtimerISR+0x100>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3301      	adds	r3, #1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <swtimerISR+0x8c>
          swtimer_tbl[i].Timer_En = OFF;                               // Timer is Unable
 80014e6:	79fa      	ldrb	r2, [r7, #7]
 80014e8:	4920      	ldr	r1, [pc, #128]	; (800156c <swtimerISR+0x100>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
        }
        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;          // Initialize the Timer
 80014f8:	79fa      	ldrb	r2, [r7, #7]
 80014fa:	79f9      	ldrb	r1, [r7, #7]
 80014fc:	481b      	ldr	r0, [pc, #108]	; (800156c <swtimerISR+0x100>)
 80014fe:	460b      	mov	r3, r1
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4403      	add	r3, r0
 8001508:	3308      	adds	r3, #8
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	4817      	ldr	r0, [pc, #92]	; (800156c <swtimerISR+0x100>)
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4403      	add	r3, r0
 8001518:	3304      	adds	r3, #4
 800151a:	6019      	str	r1, [r3, #0]
        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);          // Run the Timer function
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	4913      	ldr	r1, [pc, #76]	; (800156c <swtimerISR+0x100>)
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	330c      	adds	r3, #12
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <swtimerISR+0x100>)
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4403      	add	r3, r0
 800153c:	3310      	adds	r3, #16
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	4788      	blx	r1
  for(i=0; i<_HW_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++){    // iterate as the Number of Timer
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	3301      	adds	r3, #1
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b07      	cmp	r3, #7
 800154e:	d806      	bhi.n	800155e <swtimerISR+0xf2>
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <swtimerISR+0x104>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	429a      	cmp	r2, r3
 800155c:	d391      	bcc.n	8001482 <swtimerISR+0x16>
      }
    }
  }
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001b8 	.word	0x200001b8
 800156c:	200001c0 	.word	0x200001c0
 8001570:	200001bc 	.word	0x200001bc

08001574 <swtimerSet>:


void swtimerSet(uint8_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *), void *arg){
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	4613      	mov	r3, r2
 8001584:	73bb      	strb	r3, [r7, #14]
  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	491a      	ldr	r1, [pc, #104]	; (80015f4 <swtimerSet+0x80>)
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	3301      	adds	r3, #1
 8001596:	7bba      	ldrb	r2, [r7, #14]
 8001598:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	4915      	ldr	r1, [pc, #84]	; (80015f4 <swtimerSet+0x80>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	330c      	adds	r3, #12
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	4910      	ldr	r1, [pc, #64]	; (80015f4 <swtimerSet+0x80>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	3310      	adds	r3, #16
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	490b      	ldr	r1, [pc, #44]	; (80015f4 <swtimerSet+0x80>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3304      	adds	r3, #4
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	4906      	ldr	r1, [pc, #24]	; (80015f4 <swtimerSet+0x80>)
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	3308      	adds	r3, #8
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	200001c0 	.word	0x200001c0

080015f8 <swtimerStart>:



void swtimerStart(uint8_t TmrNum){
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if(TmrNum < _HW_DEF_SW_TIMER_MAX){
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b07      	cmp	r3, #7
 8001606:	d81a      	bhi.n	800163e <swtimerStart+0x46>
    swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	79f9      	ldrb	r1, [r7, #7]
 800160c:	480e      	ldr	r0, [pc, #56]	; (8001648 <swtimerStart+0x50>)
 800160e:	460b      	mov	r3, r1
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4403      	add	r3, r0
 8001618:	3308      	adds	r3, #8
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <swtimerStart+0x50>)
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4403      	add	r3, r0
 8001628:	3304      	adds	r3, #4
 800162a:	6019      	str	r1, [r3, #0]
    swtimer_tbl[TmrNum].Timer_En  = ON;
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	4906      	ldr	r1, [pc, #24]	; (8001648 <swtimerStart+0x50>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	200001c0 	.word	0x200001c0

0800164c <swtimerGetHandle>:
void swtimerReset(uint8_t TmrNum){
  swtimer_tbl[TmrNum].Timer_En  = OFF;
  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <swtimerGetHandle+0x2c>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	80fb      	strh	r3, [r7, #6]
  sw_timer_handle_index++;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <swtimerGetHandle+0x2c>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3301      	adds	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <swtimerGetHandle+0x2c>)
 8001666:	801a      	strh	r2, [r3, #0]
  return TmrIndex;
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200001bc 	.word	0x200001bc

0800167c <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	e01f      	b.n	80016c8 <uartInit+0x4c>
  {
    uart_tbl[i].is_open = false;
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <uartInit+0x5c>)
 800168c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <uartInit+0x5c>)
 800169e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	3309      	adds	r3, #9
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <uartInit+0x5c>)
 80016b2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	3308      	adds	r3, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	3301      	adds	r3, #1
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d9dc      	bls.n	8001688 <uartInit+0xc>
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	200026c0 	.word	0x200026c0

080016dc <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;
  switch(channel){
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <uartOpen+0x1c>
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d056      	beq.n	80017a4 <uartOpen+0xc8>
 80016f6:	e078      	b.n	80017ea <uartOpen+0x10e>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <uartOpen+0x118>)
 8001704:	4413      	add	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <uartOpen+0x11c>)
 800170c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
      p_uart->handle.Init.BaudRate   = baud;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2200      	movs	r2, #0
 800171c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2200      	movs	r2, #0
 8001724:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2200      	movs	r2, #0
 800172c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2200      	movs	r2, #0
 8001734:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	220c      	movs	r2, #12
 800173c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

      p_uart->rx_mode = UART_MODE_DMA;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2202      	movs	r2, #2
 8001744:	725a      	strb	r2, [r3, #9]

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fee8 	bl	8003522 <HAL_UART_DeInit>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <uartOpen+0x82>
        ret = false;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
        break;
 800175c:	e045      	b.n	80017ea <uartOpen+0x10e>
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fe8f 	bl	8003488 <HAL_UART_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <uartOpen+0x9a>
        ret = false;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
        break;
 8001774:	e039      	b.n	80017ea <uartOpen+0x10e>
      }
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <uartOpen+0x120>)
 8001782:	4413      	add	r3, r2
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f89b 	bl	80008c4 <qbufferCreate>

     // p_uart->rx_mode = UART_MODE_INTERRUPT;
      p_uart->baud    = baud;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f82f 	bl	8001800 <uartStartRx>
      break;
 80017a2:	e022      	b.n	80017ea <uartOpen+0x10e>

    case _DEF_UART2 :
      p_uart = &uart_tbl[channel];
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <uartOpen+0x118>)
 80017b0:	4413      	add	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
      p_uart->baud = baud;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
      p_uart->rx_mode = UART_MODE_LOOPBACK;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2204      	movs	r2, #4
 80017c4:	725a      	strb	r2, [r3, #9]
      p_uart->tx_mode = UART_MODE_LOOPBACK;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2204      	movs	r2, #4
 80017ca:	721a      	strb	r2, [r3, #8]

      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	330a      	adds	r3, #10
 80017d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff f872 	bl	80008c4 <qbufferCreate>
      uartStartRx(channel);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f80c 	bl	8001800 <uartStartRx>
      break;
 80017e8:	bf00      	nop
  }
  return ret;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200026c0 	.word	0x200026c0
 80017f8:	40004400 	.word	0x40004400
 80017fc:	20002a00 	.word	0x20002a00

08001800 <uartStartRx>:

void uartStartRx(uint8_t channel){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel to uart.
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <uartStartRx+0x60>)
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	7a5b      	ldrb	r3, [r3, #9]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d108      	bne.n	8001834 <uartStartRx+0x34>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	330a      	adds	r3, #10
 800182c:	2201      	movs	r2, #1
 800182e:	4619      	mov	r1, r3
 8001830:	f001 ff3b 	bl	80036aa <HAL_UART_Receive_IT>
  }

  if (p_uart->rx_mode == UART_MODE_DMA)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	7a5b      	ldrb	r3, [r3, #9]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d10c      	bne.n	8001856 <uartStartRx+0x56>
    {
      HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	f001 ff7f 	bl	8003754 <HAL_UART_Receive_DMA>
    }
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200026c0 	.word	0x200026c0

08001864 <uartAvailable>:
    }
  }
  return ret;
}

uint32_t uartAvailable(uint8_t channel){
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;
  uart_t *p_uart = &uart_tbl[channel];
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	4a24      	ldr	r2, [pc, #144]	; (800190c <uartAvailable+0xa8>)
 800187a:	4413      	add	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]

  if(channel >= UART_MAX_CH)
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d901      	bls.n	8001888 <uartAvailable+0x24>
    return 0;
 8001884:	2300      	movs	r3, #0
 8001886:	e03c      	b.n	8001902 <uartAvailable+0x9e>

  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	7a5b      	ldrb	r3, [r3, #9]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10e      	bne.n	80018ae <uartAvailable+0x4a>
  {
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800189e:	4a1b      	ldr	r2, [pc, #108]	; (800190c <uartAvailable+0xa8>)
 80018a0:	4413      	add	r3, r2
 80018a2:	3304      	adds	r3, #4
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f8b2 	bl	8000a0e <qbufferAvailable>
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	e028      	b.n	8001900 <uartAvailable+0x9c>
  }
  else if (p_uart->rx_mode == UART_MODE_DMA)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	7a5b      	ldrb	r3, [r3, #9]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d112      	bne.n	80018dc <uartAvailable+0x78>
  {
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma_rx.Instance->CNDTR;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	1ad2      	subs	r2, r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f89b 	bl	8000a0e <qbufferAvailable>
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	e011      	b.n	8001900 <uartAvailable+0x9c>
  }
  else if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	7a5b      	ldrb	r3, [r3, #9]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d10d      	bne.n	8001900 <uartAvailable+0x9c>
  {
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80018f2:	4a06      	ldr	r2, [pc, #24]	; (800190c <uartAvailable+0xa8>)
 80018f4:	4413      	add	r3, r2
 80018f6:	3304      	adds	r3, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f888 	bl	8000a0e <qbufferAvailable>
 80018fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001900:	68fb      	ldr	r3, [r7, #12]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200026c0 	.word	0x200026c0

08001910 <uartFlush>:

void uartFlush(uint8_t channel){
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if (uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <uartFlush+0xf0>)
 800191e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3309      	adds	r3, #9
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d10c      	bne.n	800194a <uartFlush+0x3a>
  {
      qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800193e:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <uartFlush+0xf0>)
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f87c 	bl	8000a42 <qbufferFlush>
  }
  if (uart_tbl[channel].rx_mode == UART_MODE_DMA)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4a2c      	ldr	r2, [pc, #176]	; (8001a00 <uartFlush+0xf0>)
 800194e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3309      	adds	r3, #9
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d133      	bne.n	80019c8 <uartFlush+0xb8>
  {
      uart_tbl[channel].qbuffer_rx.ptr_in  = uart_tbl[channel].qbuffer_rx.length - uart_tbl[channel].hdma_rx.Instance->CNDTR;
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	4926      	ldr	r1, [pc, #152]	; (8001a00 <uartFlush+0xf0>)
 8001966:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800196a:	fb00 f202 	mul.w	r2, r0, r2
 800196e:	440a      	add	r2, r1
 8001970:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8001974:	6811      	ldr	r1, [r2, #0]
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	4821      	ldr	r0, [pc, #132]	; (8001a00 <uartFlush+0xf0>)
 800197a:	f44f 74d0 	mov.w	r4, #416	; 0x1a0
 800197e:	fb04 f202 	mul.w	r2, r4, r2
 8001982:	4402      	add	r2, r0
 8001984:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	6852      	ldr	r2, [r2, #4]
 800198c:	1a8a      	subs	r2, r1, r2
 800198e:	491c      	ldr	r1, [pc, #112]	; (8001a00 <uartFlush+0xf0>)
 8001990:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8001994:	fb00 f303 	mul.w	r3, r0, r3
 8001998:	440b      	add	r3, r1
 800199a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800199e:	601a      	str	r2, [r3, #0]
      uart_tbl[channel].qbuffer_rx.ptr_out = uart_tbl[channel].qbuffer_rx.ptr_in;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	4916      	ldr	r1, [pc, #88]	; (8001a00 <uartFlush+0xf0>)
 80019a6:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 80019aa:	fb00 f202 	mul.w	r2, r0, r2
 80019ae:	440a      	add	r2, r1
 80019b0:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	4912      	ldr	r1, [pc, #72]	; (8001a00 <uartFlush+0xf0>)
 80019b8:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 80019bc:	fb00 f303 	mul.w	r3, r0, r3
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80019c6:	601a      	str	r2, [r3, #0]
  }
  if (uart_tbl[channel].rx_mode == UART_MODE_LOOPBACK)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <uartFlush+0xf0>)
 80019cc:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3309      	adds	r3, #9
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d10c      	bne.n	80019f8 <uartFlush+0xe8>
  {
      qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <uartFlush+0xf0>)
 80019ee:	4413      	add	r3, r2
 80019f0:	3304      	adds	r3, #4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f825 	bl	8000a42 <qbufferFlush>
  }
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	200026c0 	.word	0x200026c0

08001a04 <uartPutch>:


void uartPutch(uint8_t channel, uint8_t ch){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	4613      	mov	r3, r2
 8001a12:	71bb      	strb	r3, [r7, #6]
  uartWrite(channel, &ch, 1);
 8001a14:	1db9      	adds	r1, r7, #6
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f804 	bl	8001a28 <uartWrite>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <uartWrite>:
  }
  return ret;
}


int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uart_t *p_uart = &uart_tbl[channel];
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <uartWrite+0x74>)
 8001a46:	4413      	add	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
  /*if(p_uart->x_mode == UART_MODE_INTERRUPT){
    if( HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK ){
      ret = length;
    }
  }*/
  if (p_uart->tx_mode == UART_MODE_POLLING)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	7a1b      	ldrb	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10e      	bne.n	8001a70 <uartWrite+0x48>
    {
      if (HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	f001 fd8a 	bl	800357a <HAL_UART_Transmit>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <uartWrite+0x48>
      {
        ret = length;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	617b      	str	r3, [r7, #20]
      }
    }

  if (p_uart->tx_mode == UART_MODE_LOOPBACK)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	7a1b      	ldrb	r3, [r3, #8]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d10c      	bne.n	8001a92 <uartWrite+0x6a>
  {
    if (qbufferWrite(&p_uart->qbuffer_rx, p_data, length) == true)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe ff41 	bl	800090a <qbufferWrite>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <uartWrite+0x6a>
    {
      ret = length;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001a92:	697b      	ldr	r3, [r7, #20]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200026c0 	.word	0x200026c0

08001aa0 <uartRead>:

uint8_t uartRead(uint8_t channel){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	72fb      	strb	r3, [r7, #11]
  uart_t *p_uart = &uart_tbl[channel];
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <uartRead+0x78>)
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]

  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	7a5b      	ldrb	r3, [r3, #9]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d108      	bne.n	8001ad8 <uartRead+0x38>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001acc:	f107 010b 	add.w	r1, r7, #11
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ff5a 	bl	800098c <qbufferRead>
  }
  if (p_uart->rx_mode == UART_MODE_DMA)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	7a5b      	ldrb	r3, [r3, #9]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d108      	bne.n	8001af2 <uartRead+0x52>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001ae6:	f107 010b 	add.w	r1, r7, #11
 8001aea:	2201      	movs	r2, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe ff4d 	bl	800098c <qbufferRead>
  }
  if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	7a5b      	ldrb	r3, [r3, #9]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d108      	bne.n	8001b0c <uartRead+0x6c>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001b00:	f107 010b 	add.w	r1, r7, #11
 8001b04:	2201      	movs	r2, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe ff40 	bl	800098c <qbufferRead>
  }
  return ret;
 8001b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200026c0 	.word	0x200026c0

08001b1c <uartPrintf>:

int32_t uartPrintf(uint8_t channel, const char *fmt, ...){
 8001b1c:	b40e      	push	{r1, r2, r3}
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b0c7      	sub	sp, #284	; 0x11c
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4602      	mov	r2, r0
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	701a      	strb	r2, [r3, #0]
  int32_t ret = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_list arg;
  va_start(arg, fmt);
 8001b30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int32_t len;
  char print_buffer[256];

  len = vsnprintf(print_buffer, 255, fmt, arg);
 8001b38:	f107 000c 	add.w	r0, r7, #12
 8001b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b40:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001b44:	21ff      	movs	r1, #255	; 0xff
 8001b46:	f002 fadb 	bl	8004100 <vsniprintf>
 8001b4a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(arg);

  ret = uartWrite(channel, (uint8_t *)print_buffer, len);
 8001b4e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001b52:	f107 010c 	add.w	r1, r7, #12
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff64 	bl	8001a28 <uartWrite>
 8001b60:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  return ret;
 8001b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b74:	b003      	add	sp, #12
 8001b76:	4770      	bx	lr

08001b78 <uartRxHandler>:

void uartRxHandler(uint8_t channel)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <uartRxHandler+0x4c>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	7a5b      	ldrb	r3, [r3, #9]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d110      	bne.n	8001bbc <uartRxHandler+0x44>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	330a      	adds	r3, #10
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe feaf 	bl	800090a <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
      uartStartRx(channel);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe22 	bl	8001800 <uartStartRx>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200026c0 	.word	0x200026c0

08001bc8 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe9b 	bl	8001910 <uartFlush>
  uartStartRx(channel);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe0f 	bl	8001800 <uartStartRx>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_UART_RxCpltCallback+0x20>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d102      	bne.n	8001c04 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff ffba 	bl	8001b78 <uartRxHandler>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40004400 	.word	0x40004400

08001c10 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f001 fc82 	bl	8003522 <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f001 fc32 	bl	8003488 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_UART_ErrorCallback+0x2c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d102      	bne.n	8001c34 <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff ffca 	bl	8001bc8 <uartErrHandler>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40004400 	.word	0x40004400

08001c40 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <USART2_IRQHandler+0x10>)
 8001c46:	f001 fe05 	bl	8003854 <HAL_UART_IRQHandler>
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20002820 	.word	0x20002820

08001c54 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a41      	ldr	r2, [pc, #260]	; (8001d68 <HAL_UART_MspInit+0x114>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d17c      	bne.n	8001d60 <HAL_UART_MspInit+0x10c>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4a41      	ldr	r2, [pc, #260]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001c68:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6193      	str	r3, [r2, #24]
 8001c72:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7e:	4a3b      	ldr	r2, [pc, #236]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8001c96:	2304      	movs	r3, #4
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4830      	ldr	r0, [pc, #192]	; (8001d70 <HAL_UART_MspInit+0x11c>)
 8001cae:	f000 fda1 	bl	80027f4 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482b      	ldr	r0, [pc, #172]	; (8001d70 <HAL_UART_MspInit+0x11c>)
 8001cc2:	f000 fd97 	bl	80027f4 <HAL_GPIO_Init>

    if (uart_tbl[_DEF_UART1].rx_mode == UART_MODE_DMA)
 8001cc6:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001cc8:	7a5b      	ldrb	r3, [r3, #9]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d140      	bne.n	8001d50 <HAL_UART_MspInit+0xfc>
    {
      uart_t *p_uart = &uart_tbl[_DEF_UART1];
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_UART_MspInit+0x120>)
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24


      __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd2:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6153      	str	r3, [r2, #20]
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_UART_MspInit+0x118>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]


      /* Configure the DMA handler for reception process */
      p_uart->hdma_rx.Instance                 = DMA1_Channel6;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <HAL_UART_MspInit+0x124>)
 8001cee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      p_uart->hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
      p_uart->hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
      p_uart->hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
      p_uart->hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      p_uart->hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
      p_uart->hdma_rx.Init.Mode                = DMA_CIRCULAR;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      p_uart->hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d28:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138


      HAL_DMA_Init(&p_uart->hdma_rx);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fa0a 	bl	800214c <HAL_DMA_Init>

          /* Associate the initialized DMA handle to the the UART handle */
      __HAL_LINKDMA((&p_uart->handle), hdmarx, (p_uart->hdma_rx));
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    }

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8001d50:	2201      	movs	r2, #1
 8001d52:	2100      	movs	r1, #0
 8001d54:	2026      	movs	r0, #38	; 0x26
 8001d56:	f000 f9b4 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d5a:	2026      	movs	r0, #38	; 0x26
 8001d5c:	f000 f9cd 	bl	80020fa <HAL_NVIC_EnableIRQ>
  }
}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800
 8001d74:	200026c0 	.word	0x200026c0
 8001d78:	4002006c 	.word	0x4002006c

08001d7c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_UART_MspDeInit+0x48>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d116      	bne.n	8001dbc <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_UART_MspDeInit+0x4c>)
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_UART_MspDeInit+0x4c>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_UART_MspDeInit+0x4c>)
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_UART_MspDeInit+0x4c>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001da4:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8001da6:	2104      	movs	r1, #4
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <HAL_UART_MspDeInit+0x50>)
 8001daa:	f000 fe7d 	bl	8002aa8 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8001dae:	2108      	movs	r1, #8
 8001db0:	4806      	ldr	r0, [pc, #24]	; (8001dcc <HAL_UART_MspDeInit+0x50>)
 8001db2:	f000 fe79 	bl	8002aa8 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001db6:	2026      	movs	r0, #38	; 0x26
 8001db8:	f000 f9ad 	bl	8002116 <HAL_NVIC_DisableIRQ>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40004400 	.word	0x40004400
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010800 	.word	0x40010800

08001dd0 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  bspInit();
 8001dd4:	f7fe fad8 	bl	8000388 <bspInit>

  swtimerInit();
 8001dd8:	f7ff fb02 	bl	80013e0 <swtimerInit>
  ledInit();
 8001ddc:	f7ff faea 	bl	80013b4 <ledInit>
  buttonInit();
 8001de0:	f7fe fef0 	bl	8000bc4 <buttonInit>
  uartInit();
 8001de4:	f7ff fc4a 	bl	800167c <uartInit>
  flashInit();
 8001de8:	f7ff fac2 	bl	8001370 <flashInit>
  eepromInit();
 8001dec:	f7fe ff5e 	bl	8000cac <eepromInit>
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <millis>:
  HAL_Delay(time_ms);
}


uint32_t millis(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001df8:	f000 f862 	bl	8001ec0 <HAL_GetTick>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_Init+0x28>)
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x28>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f949 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f000 f80e 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f000 f806 	bl	8001e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000

08001e30 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f969 	bl	8002132 <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f923 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000004 	.word	0x20000004
 8001e94:	2000000c 	.word	0x2000000c
 8001e98:	20000008 	.word	0x20000008

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x1c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_IncTick+0x20>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	2000000c 	.word	0x2000000c
 8001ebc:	20002c00 	.word	0x20002c00

08001ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <HAL_GetTick+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20002c00 	.word	0x20002c00

08001ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <__NVIC_EnableIRQ+0x34>)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	f002 021f 	and.w	r2, r2, #31
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db10      	blt.n	8001fa4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	490b      	ldr	r1, [pc, #44]	; (8001fb0 <__NVIC_DisableIRQ+0x40>)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	79fa      	ldrb	r2, [r7, #7]
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	3320      	adds	r3, #32
 8001f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fa0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	490d      	ldr	r1, [pc, #52]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	4909      	ldr	r1, [pc, #36]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	2201      	movs	r2, #1
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	401a      	ands	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204e:	2101      	movs	r1, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	1e59      	subs	r1, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff92 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff0d 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff22 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff92 	bl	8002008 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff61 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff15 	bl	8001f38 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff23 	bl	8001f70 <__NVIC_DisableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ff94 	bl	8002068 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e043      	b.n	80021ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_DMA_Init+0xa8>)
 800216a:	4413      	add	r3, r2
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_DMA_Init+0xac>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	009a      	lsls	r2, r3, #2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_DMA_Init+0xb0>)
 800217e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002196:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800219a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	bffdfff8 	.word	0xbffdfff8
 80021f8:	cccccccd 	.word	0xcccccccd
 80021fc:	40020000 	.word	0x40020000

08002200 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_DMA_Start_IT+0x20>
 800221c:	2302      	movs	r3, #2
 800221e:	e04a      	b.n	80022b6 <HAL_DMA_Start_IT+0xb6>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800222e:	2b01      	cmp	r3, #1
 8002230:	d13a      	bne.n	80022a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f8ae 	bl	80023b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	f042 020e 	orr.w	r2, r2, #14
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e00f      	b.n	8002296 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f022 0204 	bic.w	r2, r2, #4
 8002284:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	f042 020a 	orr.w	r2, r2, #10
 8002294:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e005      	b.n	80022b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
 80022b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d005      	beq.n	80022e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e057      	b.n	8002392 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f022 020e 	bic.w	r2, r2, #14
 80022f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <HAL_DMA_Abort_IT+0xdc>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_DMA_Abort_IT+0xe0>)
 800230c:	4299      	cmp	r1, r3
 800230e:	d02e      	beq.n	800236e <HAL_DMA_Abort_IT+0xae>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_DMA_Abort_IT+0xe4>)
 8002318:	4299      	cmp	r1, r3
 800231a:	d026      	beq.n	800236a <HAL_DMA_Abort_IT+0xaa>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_DMA_Abort_IT+0xe8>)
 8002324:	4299      	cmp	r1, r3
 8002326:	d01d      	beq.n	8002364 <HAL_DMA_Abort_IT+0xa4>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <HAL_DMA_Abort_IT+0xec>)
 8002330:	4299      	cmp	r1, r3
 8002332:	d014      	beq.n	800235e <HAL_DMA_Abort_IT+0x9e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_DMA_Abort_IT+0xf0>)
 800233c:	4299      	cmp	r1, r3
 800233e:	d00b      	beq.n	8002358 <HAL_DMA_Abort_IT+0x98>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_DMA_Abort_IT+0xf4>)
 8002348:	4299      	cmp	r1, r3
 800234a:	d102      	bne.n	8002352 <HAL_DMA_Abort_IT+0x92>
 800234c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002350:	e00e      	b.n	8002370 <HAL_DMA_Abort_IT+0xb0>
 8002352:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002356:	e00b      	b.n	8002370 <HAL_DMA_Abort_IT+0xb0>
 8002358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235c:	e008      	b.n	8002370 <HAL_DMA_Abort_IT+0xb0>
 800235e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002362:	e005      	b.n	8002370 <HAL_DMA_Abort_IT+0xb0>
 8002364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002368:	e002      	b.n	8002370 <HAL_DMA_Abort_IT+0xb0>
 800236a:	2310      	movs	r3, #16
 800236c:	e000      	b.n	8002370 <HAL_DMA_Abort_IT+0xb0>
 800236e:	2301      	movs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
    } 
  }
  return status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020008 	.word	0x40020008
 80023a4:	4002001c 	.word	0x4002001c
 80023a8:	40020030 	.word	0x40020030
 80023ac:	40020044 	.word	0x40020044
 80023b0:	40020058 	.word	0x40020058
 80023b4:	4002006c 	.word	0x4002006c

080023b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d108      	bne.n	80023f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023f6:	e007      	b.n	8002408 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	60da      	str	r2, [r3, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
	...

08002414 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_FLASH_Program+0xd8>)
 8002430:	7e1b      	ldrb	r3, [r3, #24]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_FLASH_Program+0x26>
 8002436:	2302      	movs	r3, #2
 8002438:	e054      	b.n	80024e4 <HAL_FLASH_Program+0xd0>
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_FLASH_Program+0xd8>)
 800243c:	2201      	movs	r2, #1
 800243e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002440:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002444:	f000 f898 	bl	8002578 <FLASH_WaitForLastOperation>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d144      	bne.n	80024dc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d102      	bne.n	800245e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002458:	2301      	movs	r3, #1
 800245a:	757b      	strb	r3, [r7, #21]
 800245c:	e007      	b.n	800246e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d102      	bne.n	800246a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002464:	2302      	movs	r3, #2
 8002466:	757b      	strb	r3, [r7, #21]
 8002468:	e001      	b.n	800246e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800246a:	2304      	movs	r3, #4
 800246c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800246e:	2300      	movs	r3, #0
 8002470:	75bb      	strb	r3, [r7, #22]
 8002472:	e02d      	b.n	80024d0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002474:	7dbb      	ldrb	r3, [r7, #22]
 8002476:	005a      	lsls	r2, r3, #1
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	eb02 0e03 	add.w	lr, r2, r3
 800247e:	7dbb      	ldrb	r3, [r7, #22]
 8002480:	0119      	lsls	r1, r3, #4
 8002482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002486:	f1c1 0620 	rsb	r6, r1, #32
 800248a:	f1a1 0020 	sub.w	r0, r1, #32
 800248e:	fa22 f401 	lsr.w	r4, r2, r1
 8002492:	fa03 f606 	lsl.w	r6, r3, r6
 8002496:	4334      	orrs	r4, r6
 8002498:	fa23 f000 	lsr.w	r0, r3, r0
 800249c:	4304      	orrs	r4, r0
 800249e:	fa23 f501 	lsr.w	r5, r3, r1
 80024a2:	b2a3      	uxth	r3, r4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4670      	mov	r0, lr
 80024a8:	f000 f84a 	bl	8002540 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024b0:	f000 f862 	bl	8002578 <FLASH_WaitForLastOperation>
 80024b4:	4603      	mov	r3, r0
 80024b6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <HAL_FLASH_Program+0xdc>)
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_FLASH_Program+0xdc>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80024ca:	7dbb      	ldrb	r3, [r7, #22]
 80024cc:	3301      	adds	r3, #1
 80024ce:	75bb      	strb	r3, [r7, #22]
 80024d0:	7dba      	ldrb	r2, [r7, #22]
 80024d2:	7d7b      	ldrb	r3, [r7, #21]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3cd      	bcc.n	8002474 <HAL_FLASH_Program+0x60>
 80024d8:	e000      	b.n	80024dc <HAL_FLASH_Program+0xc8>
      {
        break;
 80024da:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_FLASH_Program+0xd8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	761a      	strb	r2, [r3, #24]

  return status;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ec:	20002c08 	.word	0x20002c08
 80024f0:	40022000 	.word	0x40022000

080024f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_FLASH_Unlock+0x40>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_FLASH_Unlock+0x40>)
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_FLASH_Unlock+0x44>)
 800250e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_FLASH_Unlock+0x40>)
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_FLASH_Unlock+0x48>)
 8002514:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_FLASH_Unlock+0x40>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002526:	79fb      	ldrb	r3, [r7, #7]
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	45670123 	.word	0x45670123
 800253c:	cdef89ab 	.word	0xcdef89ab

08002540 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <FLASH_Program_HalfWord+0x30>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <FLASH_Program_HalfWord+0x34>)
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <FLASH_Program_HalfWord+0x34>)
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	801a      	strh	r2, [r3, #0]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20002c08 	.word	0x20002c08
 8002574:	40022000 	.word	0x40022000

08002578 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff fc9e 	bl	8001ec0 <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002586:	e010      	b.n	80025aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d00c      	beq.n	80025aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <FLASH_WaitForLastOperation+0x2e>
 8002596:	f7ff fc93 	bl	8001ec0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d901      	bls.n	80025aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e025      	b.n	80025f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <FLASH_WaitForLastOperation+0x88>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e8      	bne.n	8002588 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <FLASH_WaitForLastOperation+0x88>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <FLASH_WaitForLastOperation+0x88>)
 80025c4:	2220      	movs	r2, #32
 80025c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <FLASH_WaitForLastOperation+0x88>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <FLASH_WaitForLastOperation+0x88>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <FLASH_WaitForLastOperation+0x88>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025ec:	f000 f80a 	bl	8002604 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000

08002604 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <FLASH_SetErrorCode+0x98>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <FLASH_SetErrorCode+0x9c>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <FLASH_SetErrorCode+0x9c>)
 8002624:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <FLASH_SetErrorCode+0x98>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <FLASH_SetErrorCode+0x9c>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <FLASH_SetErrorCode+0x9c>)
 8002644:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <FLASH_SetErrorCode+0x98>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <FLASH_SetErrorCode+0x9c>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <FLASH_SetErrorCode+0x9c>)
 8002664:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002666:	4a0d      	ldr	r2, [pc, #52]	; (800269c <FLASH_SetErrorCode+0x98>)
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <FLASH_SetErrorCode+0x98>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f240 1201 	movw	r2, #257	; 0x101
 8002678:	4293      	cmp	r3, r2
 800267a:	d106      	bne.n	800268a <FLASH_SetErrorCode+0x86>
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <FLASH_SetErrorCode+0x98>)
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <FLASH_SetErrorCode+0x98>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	61d3      	str	r3, [r2, #28]
}  
 8002688:	e002      	b.n	8002690 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <FLASH_SetErrorCode+0x98>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60d3      	str	r3, [r2, #12]
}  
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40022000 	.word	0x40022000
 80026a0:	20002c08 	.word	0x20002c08

080026a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026b6:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_FLASHEx_Erase+0xd0>)
 80026b8:	7e1b      	ldrb	r3, [r3, #24]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_FLASHEx_Erase+0x1e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e053      	b.n	800276a <HAL_FLASHEx_Erase+0xc6>
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <HAL_FLASHEx_Erase+0xd0>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d116      	bne.n	80026fe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026d4:	f7ff ff50 	bl	8002578 <FLASH_WaitForLastOperation>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d141      	bne.n	8002762 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 f84c 	bl	800277c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026e8:	f7ff ff46 	bl	8002578 <FLASH_WaitForLastOperation>
 80026ec:	4603      	mov	r3, r0
 80026ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80026f0:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_FLASHEx_Erase+0xd4>)
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_FLASHEx_Erase+0xd4>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6113      	str	r3, [r2, #16]
 80026fc:	e031      	b.n	8002762 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002702:	f7ff ff39 	bl	8002578 <FLASH_WaitForLastOperation>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d12a      	bne.n	8002762 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f04f 32ff 	mov.w	r2, #4294967295
 8002712:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	e019      	b.n	8002750 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f000 f849 	bl	80027b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002722:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002726:	f7ff ff27 	bl	8002578 <FLASH_WaitForLastOperation>
 800272a:	4603      	mov	r3, r0
 800272c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <HAL_FLASHEx_Erase+0xd4>)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_FLASHEx_Erase+0xd4>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	601a      	str	r2, [r3, #0]
            break;
 8002746:	e00c      	b.n	8002762 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	029a      	lsls	r2, r3, #10
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d8dc      	bhi.n	800271c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_FLASHEx_Erase+0xd0>)
 8002764:	2200      	movs	r2, #0
 8002766:	761a      	strb	r2, [r3, #24]

  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20002c08 	.word	0x20002c08
 8002778:	40022000 	.word	0x40022000

0800277c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <FLASH_MassErase+0x30>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <FLASH_MassErase+0x34>)
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <FLASH_MassErase+0x34>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002796:	4a06      	ldr	r2, [pc, #24]	; (80027b0 <FLASH_MassErase+0x34>)
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <FLASH_MassErase+0x34>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20002c08 	.word	0x20002c08
 80027b0:	40022000 	.word	0x40022000

080027b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <FLASH_PageErase+0x38>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <FLASH_PageErase+0x3c>)
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <FLASH_PageErase+0x3c>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <FLASH_PageErase+0x3c>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027d4:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <FLASH_PageErase+0x3c>)
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <FLASH_PageErase+0x3c>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20002c08 	.word	0x20002c08
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b08b      	sub	sp, #44	; 0x2c
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002806:	e127      	b.n	8002a58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002808:	2201      	movs	r2, #1
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8116 	bne.w	8002a52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b12      	cmp	r3, #18
 800282c:	d034      	beq.n	8002898 <HAL_GPIO_Init+0xa4>
 800282e:	2b12      	cmp	r3, #18
 8002830:	d80d      	bhi.n	800284e <HAL_GPIO_Init+0x5a>
 8002832:	2b02      	cmp	r3, #2
 8002834:	d02b      	beq.n	800288e <HAL_GPIO_Init+0x9a>
 8002836:	2b02      	cmp	r3, #2
 8002838:	d804      	bhi.n	8002844 <HAL_GPIO_Init+0x50>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d031      	beq.n	80028a2 <HAL_GPIO_Init+0xae>
 800283e:	2b01      	cmp	r3, #1
 8002840:	d01c      	beq.n	800287c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002842:	e048      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002844:	2b03      	cmp	r3, #3
 8002846:	d043      	beq.n	80028d0 <HAL_GPIO_Init+0xdc>
 8002848:	2b11      	cmp	r3, #17
 800284a:	d01b      	beq.n	8002884 <HAL_GPIO_Init+0x90>
          break;
 800284c:	e043      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800284e:	4a89      	ldr	r2, [pc, #548]	; (8002a74 <HAL_GPIO_Init+0x280>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d026      	beq.n	80028a2 <HAL_GPIO_Init+0xae>
 8002854:	4a87      	ldr	r2, [pc, #540]	; (8002a74 <HAL_GPIO_Init+0x280>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d806      	bhi.n	8002868 <HAL_GPIO_Init+0x74>
 800285a:	4a87      	ldr	r2, [pc, #540]	; (8002a78 <HAL_GPIO_Init+0x284>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d020      	beq.n	80028a2 <HAL_GPIO_Init+0xae>
 8002860:	4a86      	ldr	r2, [pc, #536]	; (8002a7c <HAL_GPIO_Init+0x288>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01d      	beq.n	80028a2 <HAL_GPIO_Init+0xae>
          break;
 8002866:	e036      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002868:	4a85      	ldr	r2, [pc, #532]	; (8002a80 <HAL_GPIO_Init+0x28c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0xae>
 800286e:	4a85      	ldr	r2, [pc, #532]	; (8002a84 <HAL_GPIO_Init+0x290>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d016      	beq.n	80028a2 <HAL_GPIO_Init+0xae>
 8002874:	4a84      	ldr	r2, [pc, #528]	; (8002a88 <HAL_GPIO_Init+0x294>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0xae>
          break;
 800287a:	e02c      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e028      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	3304      	adds	r3, #4
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e023      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	3308      	adds	r3, #8
 8002894:	623b      	str	r3, [r7, #32]
          break;
 8002896:	e01e      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	330c      	adds	r3, #12
 800289e:	623b      	str	r3, [r7, #32]
          break;
 80028a0:	e019      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028aa:	2304      	movs	r3, #4
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e012      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b8:	2308      	movs	r3, #8
 80028ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	611a      	str	r2, [r3, #16]
          break;
 80028c2:	e008      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c4:	2308      	movs	r3, #8
 80028c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	615a      	str	r2, [r3, #20]
          break;
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
          break;
 80028d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2bff      	cmp	r3, #255	; 0xff
 80028da:	d801      	bhi.n	80028e0 <HAL_GPIO_Init+0xec>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	e001      	b.n	80028e4 <HAL_GPIO_Init+0xf0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2bff      	cmp	r3, #255	; 0xff
 80028ea:	d802      	bhi.n	80028f2 <HAL_GPIO_Init+0xfe>
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_Init+0x104>
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3b08      	subs	r3, #8
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	210f      	movs	r1, #15
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	401a      	ands	r2, r3
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	431a      	orrs	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8096 	beq.w	8002a52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002926:	4a59      	ldr	r2, [pc, #356]	; (8002a8c <HAL_GPIO_Init+0x298>)
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_GPIO_Init+0x298>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6193      	str	r3, [r2, #24]
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <HAL_GPIO_Init+0x298>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800293e:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_GPIO_Init+0x29c>)
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4b      	ldr	r2, [pc, #300]	; (8002a94 <HAL_GPIO_Init+0x2a0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x19e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <HAL_GPIO_Init+0x2a4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x19a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a49      	ldr	r2, [pc, #292]	; (8002a9c <HAL_GPIO_Init+0x2a8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x196>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a48      	ldr	r2, [pc, #288]	; (8002aa0 <HAL_GPIO_Init+0x2ac>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x192>
 8002982:	2303      	movs	r3, #3
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x1a0>
 8002986:	2304      	movs	r3, #4
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x1a0>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x1a0>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x1a0>
 8002992:	2300      	movs	r3, #0
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029a4:	493a      	ldr	r1, [pc, #232]	; (8002a90 <HAL_GPIO_Init+0x29c>)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029be:	4939      	ldr	r1, [pc, #228]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
 80029ca:	e006      	b.n	80029da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029ce:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4013      	ands	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029e6:	492f      	ldr	r1, [pc, #188]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029e8:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
 80029f2:	e006      	b.n	8002a02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029f4:	492b      	ldr	r1, [pc, #172]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	4013      	ands	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a0e:	4925      	ldr	r1, [pc, #148]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
 8002a1a:	e006      	b.n	8002a2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a1c:	4921      	ldr	r1, [pc, #132]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4013      	ands	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a36:	491b      	ldr	r1, [pc, #108]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]
 8002a42:	e006      	b.n	8002a52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a44:	4917      	ldr	r1, [pc, #92]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4013      	ands	r3, r2
 8002a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	3301      	adds	r3, #1
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f47f aed0 	bne.w	8002808 <HAL_GPIO_Init+0x14>
  }
}
 8002a68:	bf00      	nop
 8002a6a:	372c      	adds	r7, #44	; 0x2c
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	10210000 	.word	0x10210000
 8002a78:	10110000 	.word	0x10110000
 8002a7c:	10120000 	.word	0x10120000
 8002a80:	10310000 	.word	0x10310000
 8002a84:	10320000 	.word	0x10320000
 8002a88:	10220000 	.word	0x10220000
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40010800 	.word	0x40010800
 8002a98:	40010c00 	.word	0x40010c00
 8002a9c:	40011000 	.word	0x40011000
 8002aa0:	40011400 	.word	0x40011400
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002ab6:	e09a      	b.n	8002bee <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	409a      	lsls	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 808e 	beq.w	8002be8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002acc:	4a4e      	ldr	r2, [pc, #312]	; (8002c08 <HAL_GPIO_DeInit+0x160>)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad8:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4013      	ands	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_GPIO_DeInit+0x164>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_DeInit+0x76>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a45      	ldr	r2, [pc, #276]	; (8002c10 <HAL_GPIO_DeInit+0x168>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_DeInit+0x72>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a44      	ldr	r2, [pc, #272]	; (8002c14 <HAL_GPIO_DeInit+0x16c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_DeInit+0x6e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a43      	ldr	r2, [pc, #268]	; (8002c18 <HAL_GPIO_DeInit+0x170>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_DeInit+0x6a>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_DeInit+0x78>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e004      	b.n	8002b20 <HAL_GPIO_DeInit+0x78>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_DeInit+0x78>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_GPIO_DeInit+0x78>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f002 0203 	and.w	r2, r2, #3
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	fa03 f202 	lsl.w	r2, r3, r2
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d132      	bne.n	8002b98 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002b42:	4831      	ldr	r0, [pc, #196]	; (8002c08 <HAL_GPIO_DeInit+0x160>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	492f      	ldr	r1, [pc, #188]	; (8002c08 <HAL_GPIO_DeInit+0x160>)
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	0892      	lsrs	r2, r2, #2
 8002b4e:	3202      	adds	r2, #2
 8002b50:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	43d2      	mvns	r2, r2
 8002b58:	400a      	ands	r2, r1
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002b60:	492e      	ldr	r1, [pc, #184]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002b6e:	492b      	ldr	r1, [pc, #172]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002b7c:	4927      	ldr	r1, [pc, #156]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b7e:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	4013      	ands	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002b8a:	4924      	ldr	r1, [pc, #144]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_GPIO_DeInit+0x174>)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	4013      	ands	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2bff      	cmp	r3, #255	; 0xff
 8002b9c:	d801      	bhi.n	8002ba2 <HAL_GPIO_DeInit+0xfa>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_DeInit+0xfe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	d802      	bhi.n	8002bb4 <HAL_GPIO_DeInit+0x10c>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_DeInit+0x112>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3b08      	subs	r3, #8
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	401a      	ands	r2, r3
 8002bcc:	2104      	movs	r1, #4
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3301      	adds	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f47f af5e 	bne.w	8002ab8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3724      	adds	r7, #36	; 0x24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40010800 	.word	0x40010800
 8002c10:	40010c00 	.word	0x40010c00
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40011400 	.word	0x40011400
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	887b      	ldrh	r3, [r7, #2]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	e001      	b.n	8002c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e26c      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8087 	beq.w	8002d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c70:	4b92      	ldr	r3, [pc, #584]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c7c:	4b8f      	ldr	r3, [pc, #572]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d112      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
 8002c88:	4b8c      	ldr	r3, [pc, #560]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d10b      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c96:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d06c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x12c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d168      	bne.n	8002d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e246      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x76>
 8002cb8:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cba:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e02e      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x98>
 8002cce:	4a7b      	ldr	r2, [pc, #492]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	4b7a      	ldr	r3, [pc, #488]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4a78      	ldr	r2, [pc, #480]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	4b77      	ldr	r3, [pc, #476]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e01d      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0xbc>
 8002cf2:	4a72      	ldr	r2, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	4b71      	ldr	r3, [pc, #452]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4a6f      	ldr	r2, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d00:	4b6e      	ldr	r3, [pc, #440]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002d0c:	4a6b      	ldr	r2, [pc, #428]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	4b6b      	ldr	r3, [pc, #428]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4a68      	ldr	r2, [pc, #416]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7ff f8c8 	bl	8001ec0 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7ff f8c4 	bl	8001ec0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e1fa      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0xe4>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7ff f8b4 	bl	8001ec0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7ff f8b0 	bl	8001ec0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1e6      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x10c>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d063      	beq.n	8002e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d96:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d11c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x18c>
 8002da2:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d116      	bne.n	8002ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x176>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e1ba      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	493d      	ldr	r1, [pc, #244]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	e03a      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <HAL_RCC_OscConfig+0x270>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7ff f869 	bl	8001ec0 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df2:	f7ff f865 	bl	8001ec0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e19b      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	492a      	ldr	r1, [pc, #168]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e12:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	e015      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_RCC_OscConfig+0x270>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7ff f848 	bl	8001ec0 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7ff f844 	bl	8001ec0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e17a      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03a      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_RCC_OscConfig+0x274>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7ff f828 	bl	8001ec0 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e74:	f7ff f824 	bl	8001ec0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e15a      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 fada 	bl	800344c <RCC_Delay>
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7ff f80e 	bl	8001ec0 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea6:	e00f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7ff f80a 	bl	8001ec0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d908      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e140      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	42420000 	.word	0x42420000
 8002ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	4b9e      	ldr	r3, [pc, #632]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e9      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a6 	beq.w	800302e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b97      	ldr	r3, [pc, #604]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10d      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4a94      	ldr	r2, [pc, #592]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	4b93      	ldr	r3, [pc, #588]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	61d3      	str	r3, [r2, #28]
 8002efe:	4b91      	ldr	r3, [pc, #580]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b8e      	ldr	r3, [pc, #568]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1a:	4a8b      	ldr	r2, [pc, #556]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	4b8a      	ldr	r3, [pc, #552]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fe ffcb 	bl	8001ec0 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7fe ffc7 	bl	8001ec0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	; 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0fd      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b81      	ldr	r3, [pc, #516]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x312>
 8002f54:	4a7b      	ldr	r2, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	e02d      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x334>
 8002f6a:	4a76      	ldr	r2, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	4b75      	ldr	r3, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6213      	str	r3, [r2, #32]
 8002f76:	4a73      	ldr	r2, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	4b72      	ldr	r3, [pc, #456]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	e01c      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x356>
 8002f8c:	4a6d      	ldr	r2, [pc, #436]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	6213      	str	r3, [r2, #32]
 8002f98:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6213      	str	r3, [r2, #32]
 8002fa4:	e00b      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002fa6:	4a67      	ldr	r2, [pc, #412]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	4b66      	ldr	r3, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6213      	str	r3, [r2, #32]
 8002fb2:	4a64      	ldr	r2, [pc, #400]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d015      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe ff7b 	bl	8001ec0 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fe ff77 	bl	8001ec0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0ab      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ee      	beq.n	8002fce <HAL_RCC_OscConfig+0x37e>
 8002ff0:	e014      	b.n	800301c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe ff65 	bl	8001ec0 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe ff61 	bl	8001ec0 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e095      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003010:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ee      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d105      	bne.n	800302e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003022:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8081 	beq.w	800313a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003038:	4b42      	ldr	r3, [pc, #264]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d061      	beq.n	8003108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d146      	bne.n	80030da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304c:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_OscConfig+0x4fc>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe ff35 	bl	8001ec0 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe ff31 	bl	8001ec0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e067      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d108      	bne.n	8003094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003082:	4930      	ldr	r1, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003094:	482b      	ldr	r0, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a19      	ldr	r1, [r3, #32]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	430b      	orrs	r3, r1
 80030a8:	4313      	orrs	r3, r2
 80030aa:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_RCC_OscConfig+0x4fc>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe ff05 	bl	8001ec0 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe ff01 	bl	8001ec0 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e037      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x46a>
 80030d8:	e02f      	b.n	800313a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_RCC_OscConfig+0x4fc>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe feee 	bl	8001ec0 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe feea 	bl	8001ec0 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e020      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x498>
 8003106:	e018      	b.n	800313a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e013      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	429a      	cmp	r2, r3
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	40007000 	.word	0x40007000
 800314c:	42420060 	.word	0x42420060

08003150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0d0      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0207 	and.w	r2, r3, #7
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d210      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4967      	ldr	r1, [pc, #412]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 0207 	bic.w	r2, r3, #7
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0207 	and.w	r2, r3, #7
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4a59      	ldr	r2, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4950      	ldr	r1, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d040      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e073      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06b      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4939      	ldr	r1, [pc, #228]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 0203 	bic.w	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe fe3e 	bl	8001ec0 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe fe3a 	bl	8001ec0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e053      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0207 	and.w	r2, r3, #7
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4924      	ldr	r1, [pc, #144]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 0207 	bic.w	r2, r3, #7
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4919      	ldr	r1, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ca:	4912      	ldr	r1, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4601      	mov	r1, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
 80032f2:	fa21 f303 	lsr.w	r3, r1, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1cc>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1d0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fd9c 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40022000 	.word	0x40022000
 8003314:	40021000 	.word	0x40021000
 8003318:	0800499c 	.word	0x0800499c
 800331c:	20000004 	.word	0x20000004
 8003320:	20000008 	.word	0x20000008

08003324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b490      	push	{r4, r7}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800332a:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800332c:	1d3c      	adds	r4, r7, #4
 800332e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b04      	cmp	r3, #4
 800335c:	d002      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x40>
 800335e:	2b08      	cmp	r3, #8
 8003360:	d003      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x46>
 8003362:	e02d      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003366:	623b      	str	r3, [r7, #32]
      break;
 8003368:	e02d      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	0c9b      	lsrs	r3, r3, #18
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003376:	4413      	add	r3, r2
 8003378:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800337c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	0c5b      	lsrs	r3, r3, #17
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003396:	4413      	add	r3, r2
 8003398:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800339c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033a2:	fb02 f203 	mul.w	r2, r2, r3
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	e004      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	623b      	str	r3, [r7, #32]
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033c2:	623b      	str	r3, [r7, #32]
      break;
 80033c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c6:	6a3b      	ldr	r3, [r7, #32]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3728      	adds	r7, #40	; 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc90      	pop	{r4, r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	08004988 	.word	0x08004988
 80033d8:	08004998 	.word	0x08004998
 80033dc:	40021000 	.word	0x40021000
 80033e0:	007a1200 	.word	0x007a1200
 80033e4:	003d0900 	.word	0x003d0900

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003400:	f7ff fff2 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003404:	4601      	mov	r1, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4a03      	ldr	r2, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	080049ac 	.word	0x080049ac

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003428:	f7ff ffde 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800342c:	4601      	mov	r1, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0adb      	lsrs	r3, r3, #11
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4a03      	ldr	r2, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	080049ac 	.word	0x080049ac

0800344c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <RCC_Delay+0x34>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <RCC_Delay+0x38>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0a5b      	lsrs	r3, r3, #9
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003468:	bf00      	nop
  }
  while (Delay --);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	60fa      	str	r2, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <RCC_Delay+0x1c>
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000004 	.word	0x20000004
 8003484:	10624dd3 	.word	0x10624dd3

08003488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e03f      	b.n	800351a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe fbd0 	bl	8001c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	; 0x24
 80034b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	68d2      	ldr	r2, [r2, #12]
 80034c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fcd9 	bl	8003e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	6912      	ldr	r2, [r2, #16]
 80034dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	6952      	ldr	r2, [r2, #20]
 80034ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	68d2      	ldr	r2, [r2, #12]
 80034fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e01e      	b.n	8003572 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fe fc15 	bl	8001d7c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b088      	sub	sp, #32
 800357e:	af02      	add	r7, sp, #8
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	f040 8082 	bne.w	80036a0 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_UART_Transmit+0x2e>
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e07a      	b.n	80036a2 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Transmit+0x40>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e073      	b.n	80036a2 <HAL_UART_Transmit+0x128>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2221      	movs	r2, #33	; 0x21
 80035cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035d0:	f7fe fc76 	bl	8001ec0 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035e2:	e041      	b.n	8003668 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d121      	bne.n	8003640 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fabe 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e045      	b.n	80036a2 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003626:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3302      	adds	r3, #2
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	e017      	b.n	8003668 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	e013      	b.n	8003668 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2200      	movs	r2, #0
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fa9c 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e023      	b.n	80036a2 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	1c59      	adds	r1, r3, #1
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1b8      	bne.n	80035e4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fa83 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e00a      	b.n	80036a2 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	4613      	mov	r3, r2
 80036b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d140      	bne.n	8003746 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Receive_IT+0x26>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e039      	b.n	8003748 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Receive_IT+0x38>
 80036de:	2302      	movs	r3, #2
 80036e0:	e032      	b.n	8003748 <HAL_UART_Receive_IT+0x9e>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2222      	movs	r2, #34	; 0x22
 8003706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	68d2      	ldr	r2, [r2, #12]
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	6952      	ldr	r2, [r2, #20]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	68d2      	ldr	r2, [r2, #12]
 800373c:	f042 0220 	orr.w	r2, r2, #32
 8003740:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
	...

08003754 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b20      	cmp	r3, #32
 800376c:	d166      	bne.n	800383c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_Receive_DMA+0x26>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e05f      	b.n	800383e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UART_Receive_DMA+0x38>
 8003788:	2302      	movs	r3, #2
 800378a:	e058      	b.n	800383e <HAL_UART_Receive_DMA+0xea>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2222      	movs	r2, #34	; 0x22
 80037aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	4a25      	ldr	r2, [pc, #148]	; (8003848 <HAL_UART_Receive_DMA+0xf4>)
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	4a24      	ldr	r2, [pc, #144]	; (800384c <HAL_UART_Receive_DMA+0xf8>)
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_UART_Receive_DMA+0xfc>)
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ca:	2200      	movs	r2, #0
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	f7fe fd0b 	bl	8002200 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003816:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	6952      	ldr	r2, [r2, #20]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	6952      	ldr	r2, [r2, #20]
 8003832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003836:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	08003a71 	.word	0x08003a71
 800384c:	08003ad9 	.word	0x08003ad9
 8003850:	08003af5 	.word	0x08003af5

08003854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_UART_IRQHandler+0x52>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa6e 	bl	8003d80 <UART_Receive_IT>
      return;
 80038a4:	e0cc      	b.n	8003a40 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80ab 	beq.w	8003a04 <HAL_UART_IRQHandler+0x1b0>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <HAL_UART_IRQHandler+0x70>
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80a0 	beq.w	8003a04 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_UART_IRQHandler+0x90>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_UART_IRQHandler+0xb0>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	f043 0202 	orr.w	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_UART_IRQHandler+0xd0>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	f043 0204 	orr.w	r2, r3, #4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_UART_IRQHandler+0xf0>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	f043 0208 	orr.w	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d078      	beq.n	8003a3e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_UART_IRQHandler+0x112>
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa0d 	bl	8003d80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <HAL_UART_IRQHandler+0x13a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d031      	beq.n	80039f2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f959 	bl	8003c46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d023      	beq.n	80039ea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	6952      	ldr	r2, [r2, #20]
 80039ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_UART_IRQHandler+0x1f4>)
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fc7a 	bl	80022c0 <HAL_DMA_Abort_IT>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039dc:	4610      	mov	r0, r2
 80039de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e00e      	b.n	8003a00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe f914 	bl	8001c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	e00a      	b.n	8003a00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fe f910 	bl	8001c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e006      	b.n	8003a00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fe f90c 	bl	8001c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80039fe:	e01e      	b.n	8003a3e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	bf00      	nop
    return;
 8003a02:	e01c      	b.n	8003a3e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_UART_IRQHandler+0x1cc>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f945 	bl	8003ca8 <UART_Transmit_IT>
    return;
 8003a1e:	e00f      	b.n	8003a40 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_UART_IRQHandler+0x1ec>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f98b 	bl	8003d50 <UART_EndTransmit_IT>
    return;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003a3e:	bf00      	nop
  }
}
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08003c81 	.word	0x08003c81

08003a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d11e      	bne.n	8003aca <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	68d2      	ldr	r2, [r2, #12]
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	6952      	ldr	r2, [r2, #20]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	6952      	ldr	r2, [r2, #20]
 8003abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f7fe f88e 	bl	8001bec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff ffb9 	bl	8003a5e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b21      	cmp	r3, #33	; 0x21
 8003b26:	d108      	bne.n	8003b3a <UART_DMAError+0x46>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2200      	movs	r2, #0
 8003b32:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b34:	68b8      	ldr	r0, [r7, #8]
 8003b36:	f000 f871 	bl	8003c1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b22      	cmp	r3, #34	; 0x22
 8003b5a:	d108      	bne.n	8003b6e <UART_DMAError+0x7a>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2200      	movs	r2, #0
 8003b66:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f000 f86c 	bl	8003c46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	f043 0210 	orr.w	r2, r3, #16
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7a:	68b8      	ldr	r0, [r7, #8]
 8003b7c:	f7fe f848 	bl	8001c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b98:	e02c      	b.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d028      	beq.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba8:	f7fe f98a 	bl	8001ec0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	1ad2      	subs	r2, r2, r3
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d91d      	bls.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	68d2      	ldr	r2, [r2, #12]
 8003bc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	6952      	ldr	r2, [r2, #20]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e00f      	b.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d0c3      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	68d2      	ldr	r2, [r2, #12]
 8003c2e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c32:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	68d2      	ldr	r2, [r2, #12]
 8003c58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	6952      	ldr	r2, [r2, #20]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7fd ffb8 	bl	8001c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b21      	cmp	r3, #33	; 0x21
 8003cba:	d143      	bne.n	8003d44 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d119      	bne.n	8003cfa <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	8812      	ldrh	r2, [r2, #0]
 8003cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]
 8003cec:	e00e      	b.n	8003d0c <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	621a      	str	r2, [r3, #32]
 8003cf8:	e008      	b.n	8003d0c <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	1c58      	adds	r0, r3, #1
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	6208      	str	r0, [r1, #32]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10f      	bne.n	8003d40 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	68d2      	ldr	r2, [r2, #12]
 8003d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fe6b 	bl	8003a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b22      	cmp	r3, #34	; 0x22
 8003d92:	d171      	bne.n	8003e78 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d123      	bne.n	8003de6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10e      	bne.n	8003dca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc8:	e029      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
 8003de4:	e01b      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6291      	str	r1, [r2, #40]	; 0x28
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	6852      	ldr	r2, [r2, #4]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e00c      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	1c59      	adds	r1, r3, #1
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6291      	str	r1, [r2, #40]	; 0x28
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	6852      	ldr	r2, [r2, #4]
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d120      	bne.n	8003e74 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	68d2      	ldr	r2, [r2, #12]
 8003e3c:	f022 0220 	bic.w	r2, r2, #32
 8003e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	68d2      	ldr	r2, [r2, #12]
 8003e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6952      	ldr	r2, [r2, #20]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd febe 	bl	8001bec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e002      	b.n	8003e7a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	6912      	ldr	r2, [r2, #16]
 8003e96:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ec2:	f023 030c 	bic.w	r3, r3, #12
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	6952      	ldr	r2, [r2, #20]
 8003ed6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6992      	ldr	r2, [r2, #24]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a52      	ldr	r2, [pc, #328]	; (8004030 <UART_SetConfig+0x1ac>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d14e      	bne.n	8003f8a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eec:	f7ff fa9a 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8003ef0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009a      	lsls	r2, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	4a49      	ldr	r2, [pc, #292]	; (8004034 <UART_SetConfig+0x1b0>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	0118      	lsls	r0, r3, #4
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009a      	lsls	r2, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2c:	4b41      	ldr	r3, [pc, #260]	; (8004034 <UART_SetConfig+0x1b0>)
 8003f2e:	fba3 4302 	umull	r4, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2464      	movs	r4, #100	; 0x64
 8003f36:	fb04 f303 	mul.w	r3, r4, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	3332      	adds	r3, #50	; 0x32
 8003f40:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <UART_SetConfig+0x1b0>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4c:	4418      	add	r0, r3
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009a      	lsls	r2, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f64:	4b33      	ldr	r3, [pc, #204]	; (8004034 <UART_SetConfig+0x1b0>)
 8003f66:	fba3 4302 	umull	r4, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2464      	movs	r4, #100	; 0x64
 8003f6e:	fb04 f303 	mul.w	r3, r4, r3
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	3332      	adds	r3, #50	; 0x32
 8003f78:	4a2e      	ldr	r2, [pc, #184]	; (8004034 <UART_SetConfig+0x1b0>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	4403      	add	r3, r0
 8003f86:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003f88:	e04d      	b.n	8004026 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f8a:	f7ff fa37 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8003f8e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009a      	lsls	r2, r3, #2
 8003f9e:	441a      	add	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4a22      	ldr	r2, [pc, #136]	; (8004034 <UART_SetConfig+0x1b0>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	0118      	lsls	r0, r3, #4
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009a      	lsls	r2, r3, #2
 8003fbe:	441a      	add	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <UART_SetConfig+0x1b0>)
 8003fcc:	fba3 4302 	umull	r4, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	2464      	movs	r4, #100	; 0x64
 8003fd4:	fb04 f303 	mul.w	r3, r4, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	3332      	adds	r3, #50	; 0x32
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <UART_SetConfig+0x1b0>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fea:	4418      	add	r0, r3
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009a      	lsls	r2, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <UART_SetConfig+0x1b0>)
 8004004:	fba3 4302 	umull	r4, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2464      	movs	r4, #100	; 0x64
 800400c:	fb04 f303 	mul.w	r3, r4, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a07      	ldr	r2, [pc, #28]	; (8004034 <UART_SetConfig+0x1b0>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	4403      	add	r3, r0
 8004024:	608b      	str	r3, [r1, #8]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bd90      	pop	{r4, r7, pc}
 800402e:	bf00      	nop
 8004030:	40013800 	.word	0x40013800
 8004034:	51eb851f 	.word	0x51eb851f

08004038 <main>:



#include "main.h"

int main(void){
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  hwInit();
 800403c:	f7fd fec8 	bl	8001dd0 <hwInit>
  apInit();
 8004040:	f7fc f884 	bl	800014c <apInit>

  apMain();
 8004044:	f7fc f8a2 	bl	800018c <apMain>
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <__libc_init_array>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	2500      	movs	r5, #0
 8004054:	4e0c      	ldr	r6, [pc, #48]	; (8004088 <__libc_init_array+0x38>)
 8004056:	4c0d      	ldr	r4, [pc, #52]	; (800408c <__libc_init_array+0x3c>)
 8004058:	1ba4      	subs	r4, r4, r6
 800405a:	10a4      	asrs	r4, r4, #2
 800405c:	42a5      	cmp	r5, r4
 800405e:	d109      	bne.n	8004074 <__libc_init_array+0x24>
 8004060:	f000 fc72 	bl	8004948 <_init>
 8004064:	2500      	movs	r5, #0
 8004066:	4e0a      	ldr	r6, [pc, #40]	; (8004090 <__libc_init_array+0x40>)
 8004068:	4c0a      	ldr	r4, [pc, #40]	; (8004094 <__libc_init_array+0x44>)
 800406a:	1ba4      	subs	r4, r4, r6
 800406c:	10a4      	asrs	r4, r4, #2
 800406e:	42a5      	cmp	r5, r4
 8004070:	d105      	bne.n	800407e <__libc_init_array+0x2e>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004078:	4798      	blx	r3
 800407a:	3501      	adds	r5, #1
 800407c:	e7ee      	b.n	800405c <__libc_init_array+0xc>
 800407e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004082:	4798      	blx	r3
 8004084:	3501      	adds	r5, #1
 8004086:	e7f2      	b.n	800406e <__libc_init_array+0x1e>
 8004088:	080049e8 	.word	0x080049e8
 800408c:	080049e8 	.word	0x080049e8
 8004090:	080049e8 	.word	0x080049e8
 8004094:	080049ec 	.word	0x080049ec

08004098 <memset>:
 8004098:	4603      	mov	r3, r0
 800409a:	4402      	add	r2, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <_vsniprintf_r>:
 80040a8:	b530      	push	{r4, r5, lr}
 80040aa:	1e14      	subs	r4, r2, #0
 80040ac:	4605      	mov	r5, r0
 80040ae:	b09b      	sub	sp, #108	; 0x6c
 80040b0:	4618      	mov	r0, r3
 80040b2:	da05      	bge.n	80040c0 <_vsniprintf_r+0x18>
 80040b4:	238b      	movs	r3, #139	; 0x8b
 80040b6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	b01b      	add	sp, #108	; 0x6c
 80040be:	bd30      	pop	{r4, r5, pc}
 80040c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80040c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80040c8:	bf0c      	ite	eq
 80040ca:	4623      	moveq	r3, r4
 80040cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	9305      	str	r3, [sp, #20]
 80040d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d8:	9100      	str	r1, [sp, #0]
 80040da:	9104      	str	r1, [sp, #16]
 80040dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80040e0:	4602      	mov	r2, r0
 80040e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040e4:	4669      	mov	r1, sp
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 f874 	bl	80041d4 <_svfiprintf_r>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	bfbc      	itt	lt
 80040f0:	238b      	movlt	r3, #139	; 0x8b
 80040f2:	602b      	strlt	r3, [r5, #0]
 80040f4:	2c00      	cmp	r4, #0
 80040f6:	d0e1      	beq.n	80040bc <_vsniprintf_r+0x14>
 80040f8:	2200      	movs	r2, #0
 80040fa:	9b00      	ldr	r3, [sp, #0]
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e7dd      	b.n	80040bc <_vsniprintf_r+0x14>

08004100 <vsniprintf>:
 8004100:	b507      	push	{r0, r1, r2, lr}
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	460a      	mov	r2, r1
 8004108:	4601      	mov	r1, r0
 800410a:	4803      	ldr	r0, [pc, #12]	; (8004118 <vsniprintf+0x18>)
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f7ff ffcb 	bl	80040a8 <_vsniprintf_r>
 8004112:	b003      	add	sp, #12
 8004114:	f85d fb04 	ldr.w	pc, [sp], #4
 8004118:	20000010 	.word	0x20000010

0800411c <__ssputs_r>:
 800411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	688e      	ldr	r6, [r1, #8]
 8004122:	4682      	mov	sl, r0
 8004124:	429e      	cmp	r6, r3
 8004126:	460c      	mov	r4, r1
 8004128:	4691      	mov	r9, r2
 800412a:	4698      	mov	r8, r3
 800412c:	d835      	bhi.n	800419a <__ssputs_r+0x7e>
 800412e:	898a      	ldrh	r2, [r1, #12]
 8004130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004134:	d031      	beq.n	800419a <__ssputs_r+0x7e>
 8004136:	2302      	movs	r3, #2
 8004138:	6825      	ldr	r5, [r4, #0]
 800413a:	6909      	ldr	r1, [r1, #16]
 800413c:	1a6f      	subs	r7, r5, r1
 800413e:	6965      	ldr	r5, [r4, #20]
 8004140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004144:	fb95 f5f3 	sdiv	r5, r5, r3
 8004148:	f108 0301 	add.w	r3, r8, #1
 800414c:	443b      	add	r3, r7
 800414e:	429d      	cmp	r5, r3
 8004150:	bf38      	it	cc
 8004152:	461d      	movcc	r5, r3
 8004154:	0553      	lsls	r3, r2, #21
 8004156:	d531      	bpl.n	80041bc <__ssputs_r+0xa0>
 8004158:	4629      	mov	r1, r5
 800415a:	f000 fb47 	bl	80047ec <_malloc_r>
 800415e:	4606      	mov	r6, r0
 8004160:	b950      	cbnz	r0, 8004178 <__ssputs_r+0x5c>
 8004162:	230c      	movs	r3, #12
 8004164:	f8ca 3000 	str.w	r3, [sl]
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	f04f 30ff 	mov.w	r0, #4294967295
 800416e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004178:	463a      	mov	r2, r7
 800417a:	6921      	ldr	r1, [r4, #16]
 800417c:	f000 fac4 	bl	8004708 <memcpy>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	6126      	str	r6, [r4, #16]
 800418e:	443e      	add	r6, r7
 8004190:	6026      	str	r6, [r4, #0]
 8004192:	4646      	mov	r6, r8
 8004194:	6165      	str	r5, [r4, #20]
 8004196:	1bed      	subs	r5, r5, r7
 8004198:	60a5      	str	r5, [r4, #8]
 800419a:	4546      	cmp	r6, r8
 800419c:	bf28      	it	cs
 800419e:	4646      	movcs	r6, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	4632      	mov	r2, r6
 80041a4:	6820      	ldr	r0, [r4, #0]
 80041a6:	f000 faba 	bl	800471e <memmove>
 80041aa:	68a3      	ldr	r3, [r4, #8]
 80041ac:	2000      	movs	r0, #0
 80041ae:	1b9b      	subs	r3, r3, r6
 80041b0:	60a3      	str	r3, [r4, #8]
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	441e      	add	r6, r3
 80041b6:	6026      	str	r6, [r4, #0]
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	462a      	mov	r2, r5
 80041be:	f000 fb73 	bl	80048a8 <_realloc_r>
 80041c2:	4606      	mov	r6, r0
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d1e1      	bne.n	800418c <__ssputs_r+0x70>
 80041c8:	6921      	ldr	r1, [r4, #16]
 80041ca:	4650      	mov	r0, sl
 80041cc:	f000 fac2 	bl	8004754 <_free_r>
 80041d0:	e7c7      	b.n	8004162 <__ssputs_r+0x46>
	...

080041d4 <_svfiprintf_r>:
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	b09d      	sub	sp, #116	; 0x74
 80041da:	9303      	str	r3, [sp, #12]
 80041dc:	898b      	ldrh	r3, [r1, #12]
 80041de:	4680      	mov	r8, r0
 80041e0:	061c      	lsls	r4, r3, #24
 80041e2:	460d      	mov	r5, r1
 80041e4:	4616      	mov	r6, r2
 80041e6:	d50f      	bpl.n	8004208 <_svfiprintf_r+0x34>
 80041e8:	690b      	ldr	r3, [r1, #16]
 80041ea:	b96b      	cbnz	r3, 8004208 <_svfiprintf_r+0x34>
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	f000 fafd 	bl	80047ec <_malloc_r>
 80041f2:	6028      	str	r0, [r5, #0]
 80041f4:	6128      	str	r0, [r5, #16]
 80041f6:	b928      	cbnz	r0, 8004204 <_svfiprintf_r+0x30>
 80041f8:	230c      	movs	r3, #12
 80041fa:	f8c8 3000 	str.w	r3, [r8]
 80041fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004202:	e0c4      	b.n	800438e <_svfiprintf_r+0x1ba>
 8004204:	2340      	movs	r3, #64	; 0x40
 8004206:	616b      	str	r3, [r5, #20]
 8004208:	2300      	movs	r3, #0
 800420a:	9309      	str	r3, [sp, #36]	; 0x24
 800420c:	2320      	movs	r3, #32
 800420e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004212:	2330      	movs	r3, #48	; 0x30
 8004214:	f04f 0b01 	mov.w	fp, #1
 8004218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800421c:	4637      	mov	r7, r6
 800421e:	463c      	mov	r4, r7
 8004220:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d13c      	bne.n	80042a2 <_svfiprintf_r+0xce>
 8004228:	ebb7 0a06 	subs.w	sl, r7, r6
 800422c:	d00b      	beq.n	8004246 <_svfiprintf_r+0x72>
 800422e:	4653      	mov	r3, sl
 8004230:	4632      	mov	r2, r6
 8004232:	4629      	mov	r1, r5
 8004234:	4640      	mov	r0, r8
 8004236:	f7ff ff71 	bl	800411c <__ssputs_r>
 800423a:	3001      	adds	r0, #1
 800423c:	f000 80a2 	beq.w	8004384 <_svfiprintf_r+0x1b0>
 8004240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004242:	4453      	add	r3, sl
 8004244:	9309      	str	r3, [sp, #36]	; 0x24
 8004246:	783b      	ldrb	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 809b 	beq.w	8004384 <_svfiprintf_r+0x1b0>
 800424e:	2300      	movs	r3, #0
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	9307      	str	r3, [sp, #28]
 8004258:	9205      	str	r2, [sp, #20]
 800425a:	9306      	str	r3, [sp, #24]
 800425c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004260:	931a      	str	r3, [sp, #104]	; 0x68
 8004262:	2205      	movs	r2, #5
 8004264:	7821      	ldrb	r1, [r4, #0]
 8004266:	4850      	ldr	r0, [pc, #320]	; (80043a8 <_svfiprintf_r+0x1d4>)
 8004268:	f000 fa40 	bl	80046ec <memchr>
 800426c:	1c67      	adds	r7, r4, #1
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	b9d8      	cbnz	r0, 80042aa <_svfiprintf_r+0xd6>
 8004272:	06d9      	lsls	r1, r3, #27
 8004274:	bf44      	itt	mi
 8004276:	2220      	movmi	r2, #32
 8004278:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800427c:	071a      	lsls	r2, r3, #28
 800427e:	bf44      	itt	mi
 8004280:	222b      	movmi	r2, #43	; 0x2b
 8004282:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004286:	7822      	ldrb	r2, [r4, #0]
 8004288:	2a2a      	cmp	r2, #42	; 0x2a
 800428a:	d016      	beq.n	80042ba <_svfiprintf_r+0xe6>
 800428c:	2100      	movs	r1, #0
 800428e:	200a      	movs	r0, #10
 8004290:	9a07      	ldr	r2, [sp, #28]
 8004292:	4627      	mov	r7, r4
 8004294:	783b      	ldrb	r3, [r7, #0]
 8004296:	3401      	adds	r4, #1
 8004298:	3b30      	subs	r3, #48	; 0x30
 800429a:	2b09      	cmp	r3, #9
 800429c:	d950      	bls.n	8004340 <_svfiprintf_r+0x16c>
 800429e:	b1c9      	cbz	r1, 80042d4 <_svfiprintf_r+0x100>
 80042a0:	e011      	b.n	80042c6 <_svfiprintf_r+0xf2>
 80042a2:	2b25      	cmp	r3, #37	; 0x25
 80042a4:	d0c0      	beq.n	8004228 <_svfiprintf_r+0x54>
 80042a6:	4627      	mov	r7, r4
 80042a8:	e7b9      	b.n	800421e <_svfiprintf_r+0x4a>
 80042aa:	4a3f      	ldr	r2, [pc, #252]	; (80043a8 <_svfiprintf_r+0x1d4>)
 80042ac:	463c      	mov	r4, r7
 80042ae:	1a80      	subs	r0, r0, r2
 80042b0:	fa0b f000 	lsl.w	r0, fp, r0
 80042b4:	4318      	orrs	r0, r3
 80042b6:	9004      	str	r0, [sp, #16]
 80042b8:	e7d3      	b.n	8004262 <_svfiprintf_r+0x8e>
 80042ba:	9a03      	ldr	r2, [sp, #12]
 80042bc:	1d11      	adds	r1, r2, #4
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	9103      	str	r1, [sp, #12]
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	db01      	blt.n	80042ca <_svfiprintf_r+0xf6>
 80042c6:	9207      	str	r2, [sp, #28]
 80042c8:	e004      	b.n	80042d4 <_svfiprintf_r+0x100>
 80042ca:	4252      	negs	r2, r2
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	9207      	str	r2, [sp, #28]
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	783b      	ldrb	r3, [r7, #0]
 80042d6:	2b2e      	cmp	r3, #46	; 0x2e
 80042d8:	d10d      	bne.n	80042f6 <_svfiprintf_r+0x122>
 80042da:	787b      	ldrb	r3, [r7, #1]
 80042dc:	1c79      	adds	r1, r7, #1
 80042de:	2b2a      	cmp	r3, #42	; 0x2a
 80042e0:	d132      	bne.n	8004348 <_svfiprintf_r+0x174>
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	3702      	adds	r7, #2
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	9203      	str	r2, [sp, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bfb8      	it	lt
 80042f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	4c2d      	ldr	r4, [pc, #180]	; (80043ac <_svfiprintf_r+0x1d8>)
 80042f8:	2203      	movs	r2, #3
 80042fa:	7839      	ldrb	r1, [r7, #0]
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 f9f5 	bl	80046ec <memchr>
 8004302:	b138      	cbz	r0, 8004314 <_svfiprintf_r+0x140>
 8004304:	2340      	movs	r3, #64	; 0x40
 8004306:	1b00      	subs	r0, r0, r4
 8004308:	fa03 f000 	lsl.w	r0, r3, r0
 800430c:	9b04      	ldr	r3, [sp, #16]
 800430e:	3701      	adds	r7, #1
 8004310:	4303      	orrs	r3, r0
 8004312:	9304      	str	r3, [sp, #16]
 8004314:	7839      	ldrb	r1, [r7, #0]
 8004316:	2206      	movs	r2, #6
 8004318:	4825      	ldr	r0, [pc, #148]	; (80043b0 <_svfiprintf_r+0x1dc>)
 800431a:	1c7e      	adds	r6, r7, #1
 800431c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004320:	f000 f9e4 	bl	80046ec <memchr>
 8004324:	2800      	cmp	r0, #0
 8004326:	d035      	beq.n	8004394 <_svfiprintf_r+0x1c0>
 8004328:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <_svfiprintf_r+0x1e0>)
 800432a:	b9fb      	cbnz	r3, 800436c <_svfiprintf_r+0x198>
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	3307      	adds	r3, #7
 8004330:	f023 0307 	bic.w	r3, r3, #7
 8004334:	3308      	adds	r3, #8
 8004336:	9303      	str	r3, [sp, #12]
 8004338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433a:	444b      	add	r3, r9
 800433c:	9309      	str	r3, [sp, #36]	; 0x24
 800433e:	e76d      	b.n	800421c <_svfiprintf_r+0x48>
 8004340:	fb00 3202 	mla	r2, r0, r2, r3
 8004344:	2101      	movs	r1, #1
 8004346:	e7a4      	b.n	8004292 <_svfiprintf_r+0xbe>
 8004348:	2300      	movs	r3, #0
 800434a:	240a      	movs	r4, #10
 800434c:	4618      	mov	r0, r3
 800434e:	9305      	str	r3, [sp, #20]
 8004350:	460f      	mov	r7, r1
 8004352:	783a      	ldrb	r2, [r7, #0]
 8004354:	3101      	adds	r1, #1
 8004356:	3a30      	subs	r2, #48	; 0x30
 8004358:	2a09      	cmp	r2, #9
 800435a:	d903      	bls.n	8004364 <_svfiprintf_r+0x190>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ca      	beq.n	80042f6 <_svfiprintf_r+0x122>
 8004360:	9005      	str	r0, [sp, #20]
 8004362:	e7c8      	b.n	80042f6 <_svfiprintf_r+0x122>
 8004364:	fb04 2000 	mla	r0, r4, r0, r2
 8004368:	2301      	movs	r3, #1
 800436a:	e7f1      	b.n	8004350 <_svfiprintf_r+0x17c>
 800436c:	ab03      	add	r3, sp, #12
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	462a      	mov	r2, r5
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <_svfiprintf_r+0x1e4>)
 8004374:	a904      	add	r1, sp, #16
 8004376:	4640      	mov	r0, r8
 8004378:	f3af 8000 	nop.w
 800437c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004380:	4681      	mov	r9, r0
 8004382:	d1d9      	bne.n	8004338 <_svfiprintf_r+0x164>
 8004384:	89ab      	ldrh	r3, [r5, #12]
 8004386:	065b      	lsls	r3, r3, #25
 8004388:	f53f af39 	bmi.w	80041fe <_svfiprintf_r+0x2a>
 800438c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800438e:	b01d      	add	sp, #116	; 0x74
 8004390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004394:	ab03      	add	r3, sp, #12
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	462a      	mov	r2, r5
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <_svfiprintf_r+0x1e4>)
 800439c:	a904      	add	r1, sp, #16
 800439e:	4640      	mov	r0, r8
 80043a0:	f000 f884 	bl	80044ac <_printf_i>
 80043a4:	e7ea      	b.n	800437c <_svfiprintf_r+0x1a8>
 80043a6:	bf00      	nop
 80043a8:	080049b4 	.word	0x080049b4
 80043ac:	080049ba 	.word	0x080049ba
 80043b0:	080049be 	.word	0x080049be
 80043b4:	00000000 	.word	0x00000000
 80043b8:	0800411d 	.word	0x0800411d

080043bc <_printf_common>:
 80043bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c0:	4691      	mov	r9, r2
 80043c2:	461f      	mov	r7, r3
 80043c4:	688a      	ldr	r2, [r1, #8]
 80043c6:	690b      	ldr	r3, [r1, #16]
 80043c8:	4606      	mov	r6, r0
 80043ca:	4293      	cmp	r3, r2
 80043cc:	bfb8      	it	lt
 80043ce:	4613      	movlt	r3, r2
 80043d0:	f8c9 3000 	str.w	r3, [r9]
 80043d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d8:	460c      	mov	r4, r1
 80043da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043de:	b112      	cbz	r2, 80043e6 <_printf_common+0x2a>
 80043e0:	3301      	adds	r3, #1
 80043e2:	f8c9 3000 	str.w	r3, [r9]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043f0:	3302      	addmi	r3, #2
 80043f2:	f8c9 3000 	strmi.w	r3, [r9]
 80043f6:	6825      	ldr	r5, [r4, #0]
 80043f8:	f015 0506 	ands.w	r5, r5, #6
 80043fc:	d107      	bne.n	800440e <_printf_common+0x52>
 80043fe:	f104 0a19 	add.w	sl, r4, #25
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	f8d9 2000 	ldr.w	r2, [r9]
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	429d      	cmp	r5, r3
 800440c:	db2a      	blt.n	8004464 <_printf_common+0xa8>
 800440e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	3300      	adds	r3, #0
 8004416:	bf18      	it	ne
 8004418:	2301      	movne	r3, #1
 800441a:	0692      	lsls	r2, r2, #26
 800441c:	d42f      	bmi.n	800447e <_printf_common+0xc2>
 800441e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004422:	4639      	mov	r1, r7
 8004424:	4630      	mov	r0, r6
 8004426:	47c0      	blx	r8
 8004428:	3001      	adds	r0, #1
 800442a:	d022      	beq.n	8004472 <_printf_common+0xb6>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	68e5      	ldr	r5, [r4, #12]
 8004430:	f003 0306 	and.w	r3, r3, #6
 8004434:	2b04      	cmp	r3, #4
 8004436:	bf18      	it	ne
 8004438:	2500      	movne	r5, #0
 800443a:	f8d9 2000 	ldr.w	r2, [r9]
 800443e:	f04f 0900 	mov.w	r9, #0
 8004442:	bf08      	it	eq
 8004444:	1aad      	subeq	r5, r5, r2
 8004446:	68a3      	ldr	r3, [r4, #8]
 8004448:	6922      	ldr	r2, [r4, #16]
 800444a:	bf08      	it	eq
 800444c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004450:	4293      	cmp	r3, r2
 8004452:	bfc4      	itt	gt
 8004454:	1a9b      	subgt	r3, r3, r2
 8004456:	18ed      	addgt	r5, r5, r3
 8004458:	341a      	adds	r4, #26
 800445a:	454d      	cmp	r5, r9
 800445c:	d11b      	bne.n	8004496 <_printf_common+0xda>
 800445e:	2000      	movs	r0, #0
 8004460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004464:	2301      	movs	r3, #1
 8004466:	4652      	mov	r2, sl
 8004468:	4639      	mov	r1, r7
 800446a:	4630      	mov	r0, r6
 800446c:	47c0      	blx	r8
 800446e:	3001      	adds	r0, #1
 8004470:	d103      	bne.n	800447a <_printf_common+0xbe>
 8004472:	f04f 30ff 	mov.w	r0, #4294967295
 8004476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447a:	3501      	adds	r5, #1
 800447c:	e7c1      	b.n	8004402 <_printf_common+0x46>
 800447e:	2030      	movs	r0, #48	; 0x30
 8004480:	18e1      	adds	r1, r4, r3
 8004482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800448c:	4422      	add	r2, r4
 800448e:	3302      	adds	r3, #2
 8004490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004494:	e7c3      	b.n	800441e <_printf_common+0x62>
 8004496:	2301      	movs	r3, #1
 8004498:	4622      	mov	r2, r4
 800449a:	4639      	mov	r1, r7
 800449c:	4630      	mov	r0, r6
 800449e:	47c0      	blx	r8
 80044a0:	3001      	adds	r0, #1
 80044a2:	d0e6      	beq.n	8004472 <_printf_common+0xb6>
 80044a4:	f109 0901 	add.w	r9, r9, #1
 80044a8:	e7d7      	b.n	800445a <_printf_common+0x9e>
	...

080044ac <_printf_i>:
 80044ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b0:	4617      	mov	r7, r2
 80044b2:	7e0a      	ldrb	r2, [r1, #24]
 80044b4:	b085      	sub	sp, #20
 80044b6:	2a6e      	cmp	r2, #110	; 0x6e
 80044b8:	4698      	mov	r8, r3
 80044ba:	4606      	mov	r6, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80044c4:	f000 80bc 	beq.w	8004640 <_printf_i+0x194>
 80044c8:	d81a      	bhi.n	8004500 <_printf_i+0x54>
 80044ca:	2a63      	cmp	r2, #99	; 0x63
 80044cc:	d02e      	beq.n	800452c <_printf_i+0x80>
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x3a>
 80044d0:	2a00      	cmp	r2, #0
 80044d2:	f000 80c8 	beq.w	8004666 <_printf_i+0x1ba>
 80044d6:	2a58      	cmp	r2, #88	; 0x58
 80044d8:	f000 808a 	beq.w	80045f0 <_printf_i+0x144>
 80044dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80044e4:	e02a      	b.n	800453c <_printf_i+0x90>
 80044e6:	2a64      	cmp	r2, #100	; 0x64
 80044e8:	d001      	beq.n	80044ee <_printf_i+0x42>
 80044ea:	2a69      	cmp	r2, #105	; 0x69
 80044ec:	d1f6      	bne.n	80044dc <_printf_i+0x30>
 80044ee:	6821      	ldr	r1, [r4, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044f6:	d023      	beq.n	8004540 <_printf_i+0x94>
 80044f8:	1d11      	adds	r1, r2, #4
 80044fa:	6019      	str	r1, [r3, #0]
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	e027      	b.n	8004550 <_printf_i+0xa4>
 8004500:	2a73      	cmp	r2, #115	; 0x73
 8004502:	f000 80b4 	beq.w	800466e <_printf_i+0x1c2>
 8004506:	d808      	bhi.n	800451a <_printf_i+0x6e>
 8004508:	2a6f      	cmp	r2, #111	; 0x6f
 800450a:	d02a      	beq.n	8004562 <_printf_i+0xb6>
 800450c:	2a70      	cmp	r2, #112	; 0x70
 800450e:	d1e5      	bne.n	80044dc <_printf_i+0x30>
 8004510:	680a      	ldr	r2, [r1, #0]
 8004512:	f042 0220 	orr.w	r2, r2, #32
 8004516:	600a      	str	r2, [r1, #0]
 8004518:	e003      	b.n	8004522 <_printf_i+0x76>
 800451a:	2a75      	cmp	r2, #117	; 0x75
 800451c:	d021      	beq.n	8004562 <_printf_i+0xb6>
 800451e:	2a78      	cmp	r2, #120	; 0x78
 8004520:	d1dc      	bne.n	80044dc <_printf_i+0x30>
 8004522:	2278      	movs	r2, #120	; 0x78
 8004524:	496f      	ldr	r1, [pc, #444]	; (80046e4 <_printf_i+0x238>)
 8004526:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800452a:	e064      	b.n	80045f6 <_printf_i+0x14a>
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004532:	1d11      	adds	r1, r2, #4
 8004534:	6019      	str	r1, [r3, #0]
 8004536:	6813      	ldr	r3, [r2, #0]
 8004538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800453c:	2301      	movs	r3, #1
 800453e:	e0a3      	b.n	8004688 <_printf_i+0x1dc>
 8004540:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004544:	f102 0104 	add.w	r1, r2, #4
 8004548:	6019      	str	r1, [r3, #0]
 800454a:	d0d7      	beq.n	80044fc <_printf_i+0x50>
 800454c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004550:	2b00      	cmp	r3, #0
 8004552:	da03      	bge.n	800455c <_printf_i+0xb0>
 8004554:	222d      	movs	r2, #45	; 0x2d
 8004556:	425b      	negs	r3, r3
 8004558:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800455c:	4962      	ldr	r1, [pc, #392]	; (80046e8 <_printf_i+0x23c>)
 800455e:	220a      	movs	r2, #10
 8004560:	e017      	b.n	8004592 <_printf_i+0xe6>
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	f010 0f80 	tst.w	r0, #128	; 0x80
 800456a:	d003      	beq.n	8004574 <_printf_i+0xc8>
 800456c:	1d08      	adds	r0, r1, #4
 800456e:	6018      	str	r0, [r3, #0]
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	e006      	b.n	8004582 <_printf_i+0xd6>
 8004574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004578:	f101 0004 	add.w	r0, r1, #4
 800457c:	6018      	str	r0, [r3, #0]
 800457e:	d0f7      	beq.n	8004570 <_printf_i+0xc4>
 8004580:	880b      	ldrh	r3, [r1, #0]
 8004582:	2a6f      	cmp	r2, #111	; 0x6f
 8004584:	bf14      	ite	ne
 8004586:	220a      	movne	r2, #10
 8004588:	2208      	moveq	r2, #8
 800458a:	4957      	ldr	r1, [pc, #348]	; (80046e8 <_printf_i+0x23c>)
 800458c:	2000      	movs	r0, #0
 800458e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004592:	6865      	ldr	r5, [r4, #4]
 8004594:	2d00      	cmp	r5, #0
 8004596:	60a5      	str	r5, [r4, #8]
 8004598:	f2c0 809c 	blt.w	80046d4 <_printf_i+0x228>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	f020 0004 	bic.w	r0, r0, #4
 80045a2:	6020      	str	r0, [r4, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d13f      	bne.n	8004628 <_printf_i+0x17c>
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	f040 8095 	bne.w	80046d8 <_printf_i+0x22c>
 80045ae:	4675      	mov	r5, lr
 80045b0:	2a08      	cmp	r2, #8
 80045b2:	d10b      	bne.n	80045cc <_printf_i+0x120>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07da      	lsls	r2, r3, #31
 80045b8:	d508      	bpl.n	80045cc <_printf_i+0x120>
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	6862      	ldr	r2, [r4, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bfde      	ittt	le
 80045c2:	2330      	movle	r3, #48	; 0x30
 80045c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045cc:	ebae 0305 	sub.w	r3, lr, r5
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	f8cd 8000 	str.w	r8, [sp]
 80045d6:	463b      	mov	r3, r7
 80045d8:	aa03      	add	r2, sp, #12
 80045da:	4621      	mov	r1, r4
 80045dc:	4630      	mov	r0, r6
 80045de:	f7ff feed 	bl	80043bc <_printf_common>
 80045e2:	3001      	adds	r0, #1
 80045e4:	d155      	bne.n	8004692 <_printf_i+0x1e6>
 80045e6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ea:	b005      	add	sp, #20
 80045ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045f0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80045f4:	493c      	ldr	r1, [pc, #240]	; (80046e8 <_printf_i+0x23c>)
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045fe:	f100 0504 	add.w	r5, r0, #4
 8004602:	601d      	str	r5, [r3, #0]
 8004604:	d001      	beq.n	800460a <_printf_i+0x15e>
 8004606:	6803      	ldr	r3, [r0, #0]
 8004608:	e002      	b.n	8004610 <_printf_i+0x164>
 800460a:	0655      	lsls	r5, r2, #25
 800460c:	d5fb      	bpl.n	8004606 <_printf_i+0x15a>
 800460e:	8803      	ldrh	r3, [r0, #0]
 8004610:	07d0      	lsls	r0, r2, #31
 8004612:	bf44      	itt	mi
 8004614:	f042 0220 	orrmi.w	r2, r2, #32
 8004618:	6022      	strmi	r2, [r4, #0]
 800461a:	b91b      	cbnz	r3, 8004624 <_printf_i+0x178>
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	f022 0220 	bic.w	r2, r2, #32
 8004622:	6022      	str	r2, [r4, #0]
 8004624:	2210      	movs	r2, #16
 8004626:	e7b1      	b.n	800458c <_printf_i+0xe0>
 8004628:	4675      	mov	r5, lr
 800462a:	fbb3 f0f2 	udiv	r0, r3, r2
 800462e:	fb02 3310 	mls	r3, r2, r0, r3
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004638:	4603      	mov	r3, r0
 800463a:	2800      	cmp	r0, #0
 800463c:	d1f5      	bne.n	800462a <_printf_i+0x17e>
 800463e:	e7b7      	b.n	80045b0 <_printf_i+0x104>
 8004640:	6808      	ldr	r0, [r1, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004648:	6949      	ldr	r1, [r1, #20]
 800464a:	d004      	beq.n	8004656 <_printf_i+0x1aa>
 800464c:	1d10      	adds	r0, r2, #4
 800464e:	6018      	str	r0, [r3, #0]
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	6019      	str	r1, [r3, #0]
 8004654:	e007      	b.n	8004666 <_printf_i+0x1ba>
 8004656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800465a:	f102 0004 	add.w	r0, r2, #4
 800465e:	6018      	str	r0, [r3, #0]
 8004660:	6813      	ldr	r3, [r2, #0]
 8004662:	d0f6      	beq.n	8004652 <_printf_i+0x1a6>
 8004664:	8019      	strh	r1, [r3, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	4675      	mov	r5, lr
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	e7b1      	b.n	80045d2 <_printf_i+0x126>
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	1d11      	adds	r1, r2, #4
 8004672:	6019      	str	r1, [r3, #0]
 8004674:	6815      	ldr	r5, [r2, #0]
 8004676:	2100      	movs	r1, #0
 8004678:	6862      	ldr	r2, [r4, #4]
 800467a:	4628      	mov	r0, r5
 800467c:	f000 f836 	bl	80046ec <memchr>
 8004680:	b108      	cbz	r0, 8004686 <_printf_i+0x1da>
 8004682:	1b40      	subs	r0, r0, r5
 8004684:	6060      	str	r0, [r4, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	2300      	movs	r3, #0
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	e79f      	b.n	80045d2 <_printf_i+0x126>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	462a      	mov	r2, r5
 8004696:	4639      	mov	r1, r7
 8004698:	4630      	mov	r0, r6
 800469a:	47c0      	blx	r8
 800469c:	3001      	adds	r0, #1
 800469e:	d0a2      	beq.n	80045e6 <_printf_i+0x13a>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	079b      	lsls	r3, r3, #30
 80046a4:	d507      	bpl.n	80046b6 <_printf_i+0x20a>
 80046a6:	2500      	movs	r5, #0
 80046a8:	f104 0919 	add.w	r9, r4, #25
 80046ac:	68e3      	ldr	r3, [r4, #12]
 80046ae:	9a03      	ldr	r2, [sp, #12]
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	429d      	cmp	r5, r3
 80046b4:	db05      	blt.n	80046c2 <_printf_i+0x216>
 80046b6:	68e0      	ldr	r0, [r4, #12]
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	4298      	cmp	r0, r3
 80046bc:	bfb8      	it	lt
 80046be:	4618      	movlt	r0, r3
 80046c0:	e793      	b.n	80045ea <_printf_i+0x13e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	464a      	mov	r2, r9
 80046c6:	4639      	mov	r1, r7
 80046c8:	4630      	mov	r0, r6
 80046ca:	47c0      	blx	r8
 80046cc:	3001      	adds	r0, #1
 80046ce:	d08a      	beq.n	80045e6 <_printf_i+0x13a>
 80046d0:	3501      	adds	r5, #1
 80046d2:	e7eb      	b.n	80046ac <_printf_i+0x200>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1a7      	bne.n	8004628 <_printf_i+0x17c>
 80046d8:	780b      	ldrb	r3, [r1, #0]
 80046da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e2:	e765      	b.n	80045b0 <_printf_i+0x104>
 80046e4:	080049d6 	.word	0x080049d6
 80046e8:	080049c5 	.word	0x080049c5

080046ec <memchr>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	b2c9      	uxtb	r1, r1
 80046f0:	4402      	add	r2, r0
 80046f2:	4290      	cmp	r0, r2
 80046f4:	4603      	mov	r3, r0
 80046f6:	d101      	bne.n	80046fc <memchr+0x10>
 80046f8:	2000      	movs	r0, #0
 80046fa:	bd10      	pop	{r4, pc}
 80046fc:	781c      	ldrb	r4, [r3, #0]
 80046fe:	3001      	adds	r0, #1
 8004700:	428c      	cmp	r4, r1
 8004702:	d1f6      	bne.n	80046f2 <memchr+0x6>
 8004704:	4618      	mov	r0, r3
 8004706:	bd10      	pop	{r4, pc}

08004708 <memcpy>:
 8004708:	b510      	push	{r4, lr}
 800470a:	1e43      	subs	r3, r0, #1
 800470c:	440a      	add	r2, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	d100      	bne.n	8004714 <memcpy+0xc>
 8004712:	bd10      	pop	{r4, pc}
 8004714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471c:	e7f7      	b.n	800470e <memcpy+0x6>

0800471e <memmove>:
 800471e:	4288      	cmp	r0, r1
 8004720:	b510      	push	{r4, lr}
 8004722:	eb01 0302 	add.w	r3, r1, r2
 8004726:	d803      	bhi.n	8004730 <memmove+0x12>
 8004728:	1e42      	subs	r2, r0, #1
 800472a:	4299      	cmp	r1, r3
 800472c:	d10c      	bne.n	8004748 <memmove+0x2a>
 800472e:	bd10      	pop	{r4, pc}
 8004730:	4298      	cmp	r0, r3
 8004732:	d2f9      	bcs.n	8004728 <memmove+0xa>
 8004734:	1881      	adds	r1, r0, r2
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	42d3      	cmn	r3, r2
 800473a:	d100      	bne.n	800473e <memmove+0x20>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004742:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004746:	e7f7      	b.n	8004738 <memmove+0x1a>
 8004748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004750:	e7eb      	b.n	800472a <memmove+0xc>
	...

08004754 <_free_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4605      	mov	r5, r0
 8004758:	2900      	cmp	r1, #0
 800475a:	d043      	beq.n	80047e4 <_free_r+0x90>
 800475c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004760:	1f0c      	subs	r4, r1, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfb8      	it	lt
 8004766:	18e4      	addlt	r4, r4, r3
 8004768:	f000 f8d4 	bl	8004914 <__malloc_lock>
 800476c:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <_free_r+0x94>)
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	4610      	mov	r0, r2
 8004772:	b933      	cbnz	r3, 8004782 <_free_r+0x2e>
 8004774:	6063      	str	r3, [r4, #4]
 8004776:	6014      	str	r4, [r2, #0]
 8004778:	4628      	mov	r0, r5
 800477a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800477e:	f000 b8ca 	b.w	8004916 <__malloc_unlock>
 8004782:	42a3      	cmp	r3, r4
 8004784:	d90b      	bls.n	800479e <_free_r+0x4a>
 8004786:	6821      	ldr	r1, [r4, #0]
 8004788:	1862      	adds	r2, r4, r1
 800478a:	4293      	cmp	r3, r2
 800478c:	bf01      	itttt	eq
 800478e:	681a      	ldreq	r2, [r3, #0]
 8004790:	685b      	ldreq	r3, [r3, #4]
 8004792:	1852      	addeq	r2, r2, r1
 8004794:	6022      	streq	r2, [r4, #0]
 8004796:	6063      	str	r3, [r4, #4]
 8004798:	6004      	str	r4, [r0, #0]
 800479a:	e7ed      	b.n	8004778 <_free_r+0x24>
 800479c:	4613      	mov	r3, r2
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	b10a      	cbz	r2, 80047a6 <_free_r+0x52>
 80047a2:	42a2      	cmp	r2, r4
 80047a4:	d9fa      	bls.n	800479c <_free_r+0x48>
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	1858      	adds	r0, r3, r1
 80047aa:	42a0      	cmp	r0, r4
 80047ac:	d10b      	bne.n	80047c6 <_free_r+0x72>
 80047ae:	6820      	ldr	r0, [r4, #0]
 80047b0:	4401      	add	r1, r0
 80047b2:	1858      	adds	r0, r3, r1
 80047b4:	4282      	cmp	r2, r0
 80047b6:	6019      	str	r1, [r3, #0]
 80047b8:	d1de      	bne.n	8004778 <_free_r+0x24>
 80047ba:	6810      	ldr	r0, [r2, #0]
 80047bc:	6852      	ldr	r2, [r2, #4]
 80047be:	4401      	add	r1, r0
 80047c0:	6019      	str	r1, [r3, #0]
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	e7d8      	b.n	8004778 <_free_r+0x24>
 80047c6:	d902      	bls.n	80047ce <_free_r+0x7a>
 80047c8:	230c      	movs	r3, #12
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	e7d4      	b.n	8004778 <_free_r+0x24>
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	1821      	adds	r1, r4, r0
 80047d2:	428a      	cmp	r2, r1
 80047d4:	bf01      	itttt	eq
 80047d6:	6811      	ldreq	r1, [r2, #0]
 80047d8:	6852      	ldreq	r2, [r2, #4]
 80047da:	1809      	addeq	r1, r1, r0
 80047dc:	6021      	streq	r1, [r4, #0]
 80047de:	6062      	str	r2, [r4, #4]
 80047e0:	605c      	str	r4, [r3, #4]
 80047e2:	e7c9      	b.n	8004778 <_free_r+0x24>
 80047e4:	bd38      	pop	{r3, r4, r5, pc}
 80047e6:	bf00      	nop
 80047e8:	20000264 	.word	0x20000264

080047ec <_malloc_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	1ccd      	adds	r5, r1, #3
 80047f0:	f025 0503 	bic.w	r5, r5, #3
 80047f4:	3508      	adds	r5, #8
 80047f6:	2d0c      	cmp	r5, #12
 80047f8:	bf38      	it	cc
 80047fa:	250c      	movcc	r5, #12
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	4606      	mov	r6, r0
 8004800:	db01      	blt.n	8004806 <_malloc_r+0x1a>
 8004802:	42a9      	cmp	r1, r5
 8004804:	d903      	bls.n	800480e <_malloc_r+0x22>
 8004806:	230c      	movs	r3, #12
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	2000      	movs	r0, #0
 800480c:	bd70      	pop	{r4, r5, r6, pc}
 800480e:	f000 f881 	bl	8004914 <__malloc_lock>
 8004812:	4a23      	ldr	r2, [pc, #140]	; (80048a0 <_malloc_r+0xb4>)
 8004814:	6814      	ldr	r4, [r2, #0]
 8004816:	4621      	mov	r1, r4
 8004818:	b991      	cbnz	r1, 8004840 <_malloc_r+0x54>
 800481a:	4c22      	ldr	r4, [pc, #136]	; (80048a4 <_malloc_r+0xb8>)
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	b91b      	cbnz	r3, 8004828 <_malloc_r+0x3c>
 8004820:	4630      	mov	r0, r6
 8004822:	f000 f867 	bl	80048f4 <_sbrk_r>
 8004826:	6020      	str	r0, [r4, #0]
 8004828:	4629      	mov	r1, r5
 800482a:	4630      	mov	r0, r6
 800482c:	f000 f862 	bl	80048f4 <_sbrk_r>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d126      	bne.n	8004882 <_malloc_r+0x96>
 8004834:	230c      	movs	r3, #12
 8004836:	4630      	mov	r0, r6
 8004838:	6033      	str	r3, [r6, #0]
 800483a:	f000 f86c 	bl	8004916 <__malloc_unlock>
 800483e:	e7e4      	b.n	800480a <_malloc_r+0x1e>
 8004840:	680b      	ldr	r3, [r1, #0]
 8004842:	1b5b      	subs	r3, r3, r5
 8004844:	d41a      	bmi.n	800487c <_malloc_r+0x90>
 8004846:	2b0b      	cmp	r3, #11
 8004848:	d90f      	bls.n	800486a <_malloc_r+0x7e>
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	18cc      	adds	r4, r1, r3
 800484e:	50cd      	str	r5, [r1, r3]
 8004850:	4630      	mov	r0, r6
 8004852:	f000 f860 	bl	8004916 <__malloc_unlock>
 8004856:	f104 000b 	add.w	r0, r4, #11
 800485a:	1d23      	adds	r3, r4, #4
 800485c:	f020 0007 	bic.w	r0, r0, #7
 8004860:	1ac3      	subs	r3, r0, r3
 8004862:	d01b      	beq.n	800489c <_malloc_r+0xb0>
 8004864:	425a      	negs	r2, r3
 8004866:	50e2      	str	r2, [r4, r3]
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	428c      	cmp	r4, r1
 800486c:	bf0b      	itete	eq
 800486e:	6863      	ldreq	r3, [r4, #4]
 8004870:	684b      	ldrne	r3, [r1, #4]
 8004872:	6013      	streq	r3, [r2, #0]
 8004874:	6063      	strne	r3, [r4, #4]
 8004876:	bf18      	it	ne
 8004878:	460c      	movne	r4, r1
 800487a:	e7e9      	b.n	8004850 <_malloc_r+0x64>
 800487c:	460c      	mov	r4, r1
 800487e:	6849      	ldr	r1, [r1, #4]
 8004880:	e7ca      	b.n	8004818 <_malloc_r+0x2c>
 8004882:	1cc4      	adds	r4, r0, #3
 8004884:	f024 0403 	bic.w	r4, r4, #3
 8004888:	42a0      	cmp	r0, r4
 800488a:	d005      	beq.n	8004898 <_malloc_r+0xac>
 800488c:	1a21      	subs	r1, r4, r0
 800488e:	4630      	mov	r0, r6
 8004890:	f000 f830 	bl	80048f4 <_sbrk_r>
 8004894:	3001      	adds	r0, #1
 8004896:	d0cd      	beq.n	8004834 <_malloc_r+0x48>
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	e7d9      	b.n	8004850 <_malloc_r+0x64>
 800489c:	bd70      	pop	{r4, r5, r6, pc}
 800489e:	bf00      	nop
 80048a0:	20000264 	.word	0x20000264
 80048a4:	20000268 	.word	0x20000268

080048a8 <_realloc_r>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	4607      	mov	r7, r0
 80048ac:	4614      	mov	r4, r2
 80048ae:	460e      	mov	r6, r1
 80048b0:	b921      	cbnz	r1, 80048bc <_realloc_r+0x14>
 80048b2:	4611      	mov	r1, r2
 80048b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048b8:	f7ff bf98 	b.w	80047ec <_malloc_r>
 80048bc:	b922      	cbnz	r2, 80048c8 <_realloc_r+0x20>
 80048be:	f7ff ff49 	bl	8004754 <_free_r>
 80048c2:	4625      	mov	r5, r4
 80048c4:	4628      	mov	r0, r5
 80048c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c8:	f000 f826 	bl	8004918 <_malloc_usable_size_r>
 80048cc:	4284      	cmp	r4, r0
 80048ce:	d90f      	bls.n	80048f0 <_realloc_r+0x48>
 80048d0:	4621      	mov	r1, r4
 80048d2:	4638      	mov	r0, r7
 80048d4:	f7ff ff8a 	bl	80047ec <_malloc_r>
 80048d8:	4605      	mov	r5, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	d0f2      	beq.n	80048c4 <_realloc_r+0x1c>
 80048de:	4631      	mov	r1, r6
 80048e0:	4622      	mov	r2, r4
 80048e2:	f7ff ff11 	bl	8004708 <memcpy>
 80048e6:	4631      	mov	r1, r6
 80048e8:	4638      	mov	r0, r7
 80048ea:	f7ff ff33 	bl	8004754 <_free_r>
 80048ee:	e7e9      	b.n	80048c4 <_realloc_r+0x1c>
 80048f0:	4635      	mov	r5, r6
 80048f2:	e7e7      	b.n	80048c4 <_realloc_r+0x1c>

080048f4 <_sbrk_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	2300      	movs	r3, #0
 80048f8:	4c05      	ldr	r4, [pc, #20]	; (8004910 <_sbrk_r+0x1c>)
 80048fa:	4605      	mov	r5, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	f000 f814 	bl	800492c <_sbrk>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_sbrk_r+0x1a>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	b103      	cbz	r3, 800490e <_sbrk_r+0x1a>
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	20002c28 	.word	0x20002c28

08004914 <__malloc_lock>:
 8004914:	4770      	bx	lr

08004916 <__malloc_unlock>:
 8004916:	4770      	bx	lr

08004918 <_malloc_usable_size_r>:
 8004918:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800491c:	2800      	cmp	r0, #0
 800491e:	f1a0 0004 	sub.w	r0, r0, #4
 8004922:	bfbc      	itt	lt
 8004924:	580b      	ldrlt	r3, [r1, r0]
 8004926:	18c0      	addlt	r0, r0, r3
 8004928:	4770      	bx	lr
	...

0800492c <_sbrk>:
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <_sbrk+0x14>)
 800492e:	4602      	mov	r2, r0
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	b909      	cbnz	r1, 8004938 <_sbrk+0xc>
 8004934:	4903      	ldr	r1, [pc, #12]	; (8004944 <_sbrk+0x18>)
 8004936:	6019      	str	r1, [r3, #0]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	4402      	add	r2, r0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	4770      	bx	lr
 8004940:	2000026c 	.word	0x2000026c
 8004944:	20002c30 	.word	0x20002c30

08004948 <_init>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr

08004954 <_fini>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr
