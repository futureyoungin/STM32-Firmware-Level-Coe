
03_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002db0  08002db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  20000070  08002e24  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000011c  08002e24  0002011c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000668b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001857  00000000  00000000  00026724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007b8  00000000  00000000  00027f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00028738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000435a  00000000  00000000  00028de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002397  00000000  00000000  0002d142  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f4d9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001fd0  00000000  00000000  0002f558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d28 	.word	0x08002d28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d28 	.word	0x08002d28

0800014c <apInit>:
 */


#include "ap.h"

void apInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  while(!uartOpen(_DEF_UART1, 115200)){
 8000150:	bf00      	nop
 8000152:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000156:	2000      	movs	r0, #0
 8000158:	f000 fa36 	bl	80005c8 <uartOpen>
 800015c:	4603      	mov	r3, r0
 800015e:	f083 0301 	eor.w	r3, r3, #1
 8000162:	b2db      	uxtb	r3, r3
 8000164:	2b00      	cmp	r3, #0
 8000166:	d1f4      	bne.n	8000152 <apInit+0x6>

  }
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <apMain>:

void apMain(void){
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
      ledOn(0);
    //}
    else{
      ledOff(0);
    }*/
    if(uartAvailable(_DEF_UART1) > 0){
 8000170:	2000      	movs	r0, #0
 8000172:	f000 faab 	bl	80006cc <uartAvailable>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d0f9      	beq.n	8000170 <apMain+0x4>
      uartPrintf(_DEF_UART1, "rx : 0x%X\n", uartRead(_DEF_UART1));
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fb0b 	bl	8000798 <uartRead>
 8000182:	4603      	mov	r3, r0
 8000184:	461a      	mov	r2, r3
 8000186:	4902      	ldr	r1, [pc, #8]	; (8000190 <apMain+0x24>)
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fb27 	bl	80007dc <uartPrintf>
    if(uartAvailable(_DEF_UART1) > 0){
 800018e:	e7ef      	b.n	8000170 <apMain+0x4>
 8000190:	08002d40 	.word	0x08002d40

08000194 <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800019a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	2228      	movs	r2, #40	; 0x28
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f002 f961 	bl	8002478 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 80001ba:	2300      	movs	r3, #0
 80001bc:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 80001be:	2300      	movs	r3, #0
 80001c0:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c6:	2310      	movs	r3, #16
 80001c8:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 80001d2:	2300      	movs	r3, #0
 80001d4:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80001d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 f850 	bl	8001284 <HAL_RCC_OscConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d000      	beq.n	80001ec <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 80001ea:	e7fe      	b.n	80001ea <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001ec:	230f      	movs	r3, #15
 80001ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 8000202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000206:	2102      	movs	r1, #2
 8000208:	4618      	mov	r0, r3
 800020a:	f001 fabb 	bl	8001784 <HAL_RCC_ClockConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d000      	beq.n	8000216 <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 8000214:	e7fe      	b.n	8000214 <SystemClock_Config+0x80>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <bspInit>:




void bspInit(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
    HAL_Init();
 8000226:	f000 fbf7 	bl	8000a18 <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 800022a:	f7ff ffb3 	bl	8000194 <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800022e:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <bspInit+0x48>)
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <bspInit+0x48>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6193      	str	r3, [r2, #24]
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <bspInit+0x48>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <bspInit+0x48>)
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <bspInit+0x48>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6193      	str	r3, [r2, #24]
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <bspInit+0x48>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f003 0310 	and.w	r3, r3, #16
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]
}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000270:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <SystemInit+0x5c>)
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <SystemInit+0x5c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800027c:	4912      	ldr	r1, [pc, #72]	; (80002c8 <SystemInit+0x5c>)
 800027e:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <SystemInit+0x5c>)
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <SystemInit+0x60>)
 8000284:	4013      	ands	r3, r2
 8000286:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <SystemInit+0x5c>)
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <SystemInit+0x5c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000296:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000298:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <SystemInit+0x5c>)
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <SystemInit+0x5c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <SystemInit+0x5c>)
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <SystemInit+0x5c>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80002ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <SystemInit+0x5c>)
 80002b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <SystemInit+0x64>)
 80002ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002be:	609a      	str	r2, [r3, #8]
#endif 
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000
 80002cc:	f8ff0000 	.word	0xf8ff0000
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80002d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80002d6:	e003      	b.n	80002e0 <LoopCopyDataInit>

080002d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80002da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80002dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80002de:	3104      	adds	r1, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80002e0:	480a      	ldr	r0, [pc, #40]	; (800030c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80002e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80002e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80002e8:	d3f6      	bcc.n	80002d8 <CopyDataInit>
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80002ec:	e002      	b.n	80002f4 <LoopFillZerobss>

080002ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80002f0:	f842 3b04 	str.w	r3, [r2], #4

080002f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80002f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002f8:	d3f9      	bcc.n	80002ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002fa:	f7ff ffb7 	bl	800026c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002fe:	f002 f897 	bl	8002430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f002 f889 	bl	8002418 <main>
  bx lr
 8000306:	4770      	bx	lr
  ldr r3, =_sidata
 8000308:	08002db4 	.word	0x08002db4
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000310:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000314:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000318:	2000011c 	.word	0x2000011c

0800031c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC1_2_IRQHandler>

0800031e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800032e:	e7fe      	b.n	800032e <HardFault_Handler+0x4>

08000330 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  Noned
  * @retval None
  */
void MemManage_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000334:	e7fe      	b.n	8000334 <MemManage_Handler+0x4>

08000336 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800033a:	e7fe      	b.n	800033a <BusFault_Handler+0x4>

0800033c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000340:	e7fe      	b.n	8000340 <UsageFault_Handler+0x4>

08000342 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr

0800035a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800036a:	f000 fba1 	bl	8000ab0 <HAL_IncTick>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}

08000372 <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 8000372:	b480      	push	{r7}
 8000374:	b087      	sub	sp, #28
 8000376:	af00      	add	r7, sp, #0
 8000378:	60f8      	str	r0, [r7, #12]
 800037a:	60b9      	str	r1, [r7, #8]
 800037c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800037e:	2301      	movs	r3, #1
 8000380:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d104      	bne.n	80003ac <qbufferCreate+0x3a>
    p_node->length = 0;
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
    ret = false;
 80003a8:	2300      	movs	r3, #0
 80003aa:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80003ac:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 80003ae:	4618      	mov	r0, r3
 80003b0:	371c      	adds	r7, #28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 80003b8:	b480      	push	{r7}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80003c4:	2301      	movs	r3, #1
 80003c6:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <qbufferWrite+0x1c>
 80003d0:	2300      	movs	r3, #0
 80003d2:	e02d      	b.n	8000430 <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	e025      	b.n	8000426 <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	689a      	ldr	r2, [r3, #8]
 80003ec:	69bb      	ldr	r3, [r7, #24]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d101      	bne.n	80003f6 <qbufferWrite+0x3e>
      next_index = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d00c      	beq.n	800041a <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	68da      	ldr	r2, [r3, #12]
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	4413      	add	r3, r2
 8000408:	68b9      	ldr	r1, [r7, #8]
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	440a      	add	r2, r1
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	69ba      	ldr	r2, [r7, #24]
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	e002      	b.n	8000420 <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 800041a:	2300      	movs	r3, #0
 800041c:	77fb      	strb	r3, [r7, #31]
      break;
 800041e:	e006      	b.n	800042e <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	3301      	adds	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	697a      	ldr	r2, [r7, #20]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	429a      	cmp	r2, r3
 800042c:	d3d5      	bcc.n	80003da <qbufferWrite+0x22>
    }
  }
  return ret;
 800042e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3724      	adds	r7, #36	; 0x24
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 800043a:	b480      	push	{r7}
 800043c:	b089      	sub	sp, #36	; 0x24
 800043e:	af00      	add	r7, sp, #0
 8000440:	60f8      	str	r0, [r7, #12]
 8000442:	60b9      	str	r1, [r7, #8]
 8000444:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000446:	2301      	movs	r3, #1
 8000448:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d101      	bne.n	8000456 <qbufferRead+0x1c>
 8000452:	2300      	movs	r3, #0
 8000454:	e02d      	b.n	80004b2 <qbufferRead+0x78>
  for(i=0; i<length; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e025      	b.n	80004a8 <qbufferRead+0x6e>
    index      = p_node->ptr_out;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_out + 1;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	3301      	adds	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the out index is end of the buffer.
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	429a      	cmp	r2, r3
 8000472:	d101      	bne.n	8000478 <qbufferRead+0x3e>
      next_index = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
    }
    if(index != p_node->ptr_in){      // if the buffer is not empty
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	429a      	cmp	r2, r3
 8000480:	d00c      	beq.n	800049c <qbufferRead+0x62>
      p_data[i]       = p_node->p_buf[index];
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	4413      	add	r3, r2
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	68d1      	ldr	r1, [r2, #12]
 800048c:	693a      	ldr	r2, [r7, #16]
 800048e:	440a      	add	r2, r1
 8000490:	7812      	ldrb	r2, [r2, #0]
 8000492:	701a      	strb	r2, [r3, #0]
      p_node->ptr_out = next_index;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	69ba      	ldr	r2, [r7, #24]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	e002      	b.n	80004a2 <qbufferRead+0x68>
    }
    else{                             // if the buffer is empty ERR_EMPTY
      ret = false;
 800049c:	2300      	movs	r3, #0
 800049e:	77fb      	strb	r3, [r7, #31]
      break;
 80004a0:	e006      	b.n	80004b0 <qbufferRead+0x76>
  for(i=0; i<length; i++){
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	3301      	adds	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d3d5      	bcc.n	800045c <qbufferRead+0x22>
    }
  }
  return ret;
 80004b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3724      	adds	r7, #36	; 0x24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node){  // How many is there the buffer elements could be used.
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	689a      	ldr	r2, [r3, #8]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	441a      	add	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	6892      	ldr	r2, [r2, #8]
 80004d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80004dc:	fb02 f201 	mul.w	r2, r2, r1
 80004e0:	1a9b      	subs	r3, r3, r2
 80004e2:	60fb      	str	r3, [r7, #12]

  return length;
 80004e4:	68fb      	ldr	r3, [r7, #12]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <buttonInit>:


#include "button.h"

void buttonInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2302      	movs	r3, #2
 8000520:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000526:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000528:	463b      	mov	r3, r7
 800052a:	4619      	mov	r1, r3
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <buttonInit+0x2c>)
 800052e:	f000 fc93 	bl	8000e58 <HAL_GPIO_Init>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40011000 	.word	0x40011000

08000540 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800054a:	2301      	movs	r3, #1
 800054c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	2303      	movs	r3, #3
 8000550:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 8000552:	2320      	movs	r3, #32
 8000554:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <ledInit+0x28>)
 800055c:	f000 fc7c 	bl	8000e58 <HAL_GPIO_Init>
}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40010800 	.word	0x40010800

0800056c <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8000572:	2300      	movs	r3, #0
 8000574:	71fb      	strb	r3, [r7, #7]
 8000576:	e01c      	b.n	80005b2 <uartInit+0x46>
  {
    uart_tbl[i].is_open = false;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <uartInit+0x58>)
 800057c:	216c      	movs	r1, #108	; 0x6c
 800057e:	fb01 f303 	mul.w	r3, r1, r3
 8000582:	4413      	add	r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <uartInit+0x58>)
 800058c:	216c      	movs	r1, #108	; 0x6c
 800058e:	fb01 f303 	mul.w	r3, r1, r3
 8000592:	4413      	add	r3, r2
 8000594:	3309      	adds	r3, #9
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <uartInit+0x58>)
 800059e:	216c      	movs	r1, #108	; 0x6c
 80005a0:	fb01 f303 	mul.w	r3, r1, r3
 80005a4:	4413      	add	r3, r2
 80005a6:	3308      	adds	r3, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	3301      	adds	r3, #1
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0df      	beq.n	8000578 <uartInit+0xc>
  }
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000098 	.word	0x20000098

080005c8 <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 80005d4:	2301      	movs	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;
  switch(channel){
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d14a      	bne.n	8000674 <uartOpen+0xac>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	226c      	movs	r2, #108	; 0x6c
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	4a26      	ldr	r2, [pc, #152]	; (8000680 <uartOpen+0xb8>)
 80005e8:	4413      	add	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <uartOpen+0xbc>)
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
      p_uart->handle.Init.BaudRate   = baud;
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2200      	movs	r2, #0
 8000602:	639a      	str	r2, [r3, #56]	; 0x38
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2200      	movs	r2, #0
 8000608:	63da      	str	r2, [r3, #60]	; 0x3c
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2200      	movs	r2, #0
 800060e:	645a      	str	r2, [r3, #68]	; 0x44
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	220c      	movs	r2, #12
 8000614:	641a      	str	r2, [r3, #64]	; 0x40

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	332c      	adds	r3, #44	; 0x2c
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fa9b 	bl	8001b56 <HAL_UART_DeInit>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <uartOpen+0x64>
        ret = false;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
        break;
 800062a:	e023      	b.n	8000674 <uartOpen+0xac>
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	332c      	adds	r3, #44	; 0x2c
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fa43 	bl	8001abc <HAL_UART_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <uartOpen+0x7a>
        ret = false;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
        break;
 8000640:	e018      	b.n	8000674 <uartOpen+0xac>
      }
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	f103 001c 	add.w	r0, r3, #28
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <uartOpen+0xc0>)
 800064e:	4413      	add	r3, r2
 8000650:	2210      	movs	r2, #16
 8000652:	4619      	mov	r1, r3
 8000654:	f7ff fe8d 	bl	8000372 <qbufferCreate>

      p_uart->rx_mode = UART_MODE_INTERRUPT;
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2201      	movs	r2, #1
 800065c:	725a      	strb	r2, [r3, #9]
      p_uart->baud    = baud;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f80d 	bl	800068c <uartStartRx>
      break;
 8000672:	bf00      	nop
  }
  return ret;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000098 	.word	0x20000098
 8000684:	40004400 	.word	0x40004400
 8000688:	20000104 	.word	0x20000104

0800068c <uartStartRx>:

void uartStartRx(uint8_t channel){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel to uart.
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	226c      	movs	r2, #108	; 0x6c
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <uartStartRx+0x3c>)
 80006a0:	4413      	add	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	7a5b      	ldrb	r3, [r3, #9]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <uartStartRx+0x32>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	330a      	adds	r3, #10
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	f001 fb10 	bl	8001cde <HAL_UART_Receive_IT>
  }
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000098 	.word	0x20000098

080006cc <uartAvailable>:
    }
  }
  return ret;
}

uint32_t uartAvailable(uint8_t channel){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if(channel >= UART_MAX_CH)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <uartAvailable+0x14>
    return 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	e00b      	b.n	80006f8 <uartAvailable+0x2c>
  return qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	226c      	movs	r2, #108	; 0x6c
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	3318      	adds	r3, #24
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <uartAvailable+0x34>)
 80006ec:	4413      	add	r3, r2
 80006ee:	3304      	adds	r3, #4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fee3 	bl	80004bc <qbufferAvailable>
 80006f6:	4603      	mov	r3, r0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000098 	.word	0x20000098

08000704 <uartFlush>:

void uartFlush(uint8_t channel){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT){
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <uartFlush+0x3c>)
 8000712:	216c      	movs	r1, #108	; 0x6c
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4413      	add	r3, r2
 800071a:	3309      	adds	r3, #9
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10a      	bne.n	8000738 <uartFlush+0x34>
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	226c      	movs	r2, #108	; 0x6c
 8000726:	fb02 f303 	mul.w	r3, r2, r3
 800072a:	3318      	adds	r3, #24
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <uartFlush+0x3c>)
 800072e:	4413      	add	r3, r2
 8000730:	3304      	adds	r3, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fedc 	bl	80004f0 <qbufferFlush>
  }
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000098 	.word	0x20000098

08000744 <uartWrite>:
  }
  return ret;
}


int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length){
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  uart_t *p_uart = &uart_tbl[channel];
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	226c      	movs	r2, #108	; 0x6c
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <uartWrite+0x50>)
 8000760:	4413      	add	r3, r2
 8000762:	613b      	str	r3, [r7, #16]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	7a5b      	ldrb	r3, [r3, #9]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10e      	bne.n	800078a <uartWrite+0x46>
    if( HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK ){
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	f001 fa17 	bl	8001bae <HAL_UART_Transmit>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d101      	bne.n	800078a <uartWrite+0x46>
      ret = length;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800078a:	697b      	ldr	r3, [r7, #20]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000098 	.word	0x20000098

08000798 <uartRead>:

uint8_t uartRead(uint8_t channel){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	72fb      	strb	r3, [r7, #11]
  uart_t *p_uart = &uart_tbl[channel];
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	226c      	movs	r2, #108	; 0x6c
 80007aa:	fb02 f303 	mul.w	r3, r2, r3
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <uartRead+0x40>)
 80007b0:	4413      	add	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	7a5b      	ldrb	r3, [r3, #9]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d107      	bne.n	80007cc <uartRead+0x34>
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	331c      	adds	r3, #28
 80007c0:	f107 010b 	add.w	r1, r7, #11
 80007c4:	2201      	movs	r2, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe37 	bl	800043a <qbufferRead>
  }
  return ret;
 80007cc:	7afb      	ldrb	r3, [r7, #11]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000098 	.word	0x20000098

080007dc <uartPrintf>:

int32_t uartPrintf(uint8_t channel, const char *fmt, ...){
 80007dc:	b40e      	push	{r1, r2, r3}
 80007de:	b580      	push	{r7, lr}
 80007e0:	b0c7      	sub	sp, #284	; 0x11c
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4602      	mov	r2, r0
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	701a      	strb	r2, [r3, #0]
  int32_t ret = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  va_list arg;
  va_start(arg, fmt);
 80007f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80007f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int32_t len;
  char print_buffer[256];

  len = vsnprintf(print_buffer, 255, fmt, arg);
 80007f8:	f107 000c 	add.w	r0, r7, #12
 80007fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000800:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000804:	21ff      	movs	r1, #255	; 0xff
 8000806:	f001 fe6b 	bl	80024e0 <vsniprintf>
 800080a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(arg);

  ret = uartWrite(channel, (uint8_t *)print_buffer, len);
 800080e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000812:	f107 010c 	add.w	r1, r7, #12
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff92 	bl	8000744 <uartWrite>
 8000820:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  return ret;
 8000824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8000828:	4618      	mov	r0, r3
 800082a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800082e:	46bd      	mov	sp, r7
 8000830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000834:	b003      	add	sp, #12
 8000836:	4770      	bx	lr

08000838 <uartRxHandler>:

void uartRxHandler(uint8_t channel)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	226c      	movs	r2, #108	; 0x6c
 8000846:	fb02 f303 	mul.w	r3, r2, r3
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <uartRxHandler+0x4c>)
 800084c:	4413      	add	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	7a5b      	ldrb	r3, [r3, #9]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d110      	bne.n	800087a <uartRxHandler+0x42>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f103 001c 	add.w	r0, r3, #28
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	330a      	adds	r3, #10
 8000862:	2201      	movs	r2, #1
 8000864:	4619      	mov	r1, r3
 8000866:	f7ff fda7 	bl	80003b8 <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      uartStartRx(channel);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff09 	bl	800068c <uartStartRx>
  }
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000098 	.word	0x20000098

08000888 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff35 	bl	8000704 <uartFlush>
  uartStartRx(channel);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fef5 	bl	800068c <uartStartRx>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_UART_RxCpltCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d102      	bne.n	80008c4 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ffba 	bl	8000838 <uartRxHandler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004400 	.word	0x40004400

080008d0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f001 f93c 	bl	8001b56 <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f001 f8ec 	bl	8001abc <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_UART_ErrorCallback+0x2c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d102      	bne.n	80008f4 <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ffca 	bl	8000888 <uartErrHandler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40004400 	.word	0x40004400

08000900 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <USART2_IRQHandler+0x10>)
 8000906:	f001 fa3f 	bl	8001d88 <HAL_UART_IRQHandler>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000c4 	.word	0x200000c4

08000914 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <HAL_UART_MspInit+0x8c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d137      	bne.n	8000996 <HAL_UART_MspInit+0x82>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <HAL_UART_MspInit+0x90>)
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <HAL_UART_MspInit+0x90>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_MspInit+0x90>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0x90>)
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x90>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_UART_MspInit+0x90>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8000956:	2304      	movs	r3, #4
 8000958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	480e      	ldr	r0, [pc, #56]	; (80009a8 <HAL_UART_MspInit+0x94>)
 800096e:	f000 fa73 	bl	8000e58 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8000972:	2308      	movs	r3, #8
 8000974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_UART_MspInit+0x94>)
 8000982:	f000 fa69 	bl	8000e58 <HAL_GPIO_Init>

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	2100      	movs	r1, #0
 800098a:	2026      	movs	r0, #38	; 0x26
 800098c:	f000 f9a3 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000990:	2026      	movs	r0, #38	; 0x26
 8000992:	f000 f9bc 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  }
}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800

080009ac <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_UART_MspDeInit+0x48>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d116      	bne.n	80009ec <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_UART_MspDeInit+0x4c>)
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_UART_MspDeInit+0x4c>)
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <HAL_UART_MspDeInit+0x4c>)
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_UART_MspDeInit+0x4c>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80009d4:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80009d6:	2104      	movs	r1, #4
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <HAL_UART_MspDeInit+0x50>)
 80009da:	f000 fb97 	bl	800110c <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 80009de:	2108      	movs	r1, #8
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <HAL_UART_MspDeInit+0x50>)
 80009e2:	f000 fb93 	bl	800110c <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80009e6:	2026      	movs	r0, #38	; 0x26
 80009e8:	f000 f99f 	bl	8000d2a <HAL_NVIC_DisableIRQ>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004400 	.word	0x40004400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010800 	.word	0x40010800

08000a00 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  bspInit();
 8000a04:	f7ff fc0c 	bl	8000220 <bspInit>

  ledInit();
 8000a08:	f7ff fd9a 	bl	8000540 <ledInit>
  buttonInit();
 8000a0c:	f7ff fd80 	bl	8000510 <buttonInit>
  uartInit();
 8000a10:	f7ff fdac 	bl	800056c <uartInit>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_Init+0x28>)
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x28>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f949 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 f80e 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f000 f806 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f969 	bl	8000d46 <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f923 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000114 	.word	0x20000114

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000114 	.word	0x20000114

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <__NVIC_EnableIRQ+0x34>)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	095b      	lsrs	r3, r3, #5
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	f002 021f 	and.w	r2, r2, #31
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db10      	blt.n	8000bb8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	490b      	ldr	r1, [pc, #44]	; (8000bc4 <__NVIC_DisableIRQ+0x40>)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	f002 021f 	and.w	r2, r2, #31
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	3320      	adds	r3, #32
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bb4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	4909      	ldr	r1, [pc, #36]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	2201      	movs	r2, #1
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c62:	2101      	movs	r1, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	1e59      	subs	r1, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff92 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff0d 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff22 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff92 	bl	8000c1c <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff61 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff15 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff23 	bl	8000b84 <__NVIC_DisableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff94 	bl	8000c7c <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d005      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2204      	movs	r2, #4
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e057      	b.n	8000e32 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	f022 020e 	bic.w	r2, r2, #14
 8000d90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	f022 0201 	bic.w	r2, r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000da2:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <HAL_DMA_Abort_IT+0xdc>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <HAL_DMA_Abort_IT+0xe0>)
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d02e      	beq.n	8000e0e <HAL_DMA_Abort_IT+0xae>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_DMA_Abort_IT+0xe4>)
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d026      	beq.n	8000e0a <HAL_DMA_Abort_IT+0xaa>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_DMA_Abort_IT+0xe8>)
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d01d      	beq.n	8000e04 <HAL_DMA_Abort_IT+0xa4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_DMA_Abort_IT+0xec>)
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d014      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x9e>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_DMA_Abort_IT+0xf0>)
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d00b      	beq.n	8000df8 <HAL_DMA_Abort_IT+0x98>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_DMA_Abort_IT+0xf4>)
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d102      	bne.n	8000df2 <HAL_DMA_Abort_IT+0x92>
 8000dec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000df0:	e00e      	b.n	8000e10 <HAL_DMA_Abort_IT+0xb0>
 8000df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000df6:	e00b      	b.n	8000e10 <HAL_DMA_Abort_IT+0xb0>
 8000df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfc:	e008      	b.n	8000e10 <HAL_DMA_Abort_IT+0xb0>
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	e005      	b.n	8000e10 <HAL_DMA_Abort_IT+0xb0>
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	e002      	b.n	8000e10 <HAL_DMA_Abort_IT+0xb0>
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	e000      	b.n	8000e10 <HAL_DMA_Abort_IT+0xb0>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	4798      	blx	r3
    } 
  }
  return status;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020008 	.word	0x40020008
 8000e44:	4002001c 	.word	0x4002001c
 8000e48:	40020030 	.word	0x40020030
 8000e4c:	40020044 	.word	0x40020044
 8000e50:	40020058 	.word	0x40020058
 8000e54:	4002006c 	.word	0x4002006c

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b08b      	sub	sp, #44	; 0x2c
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e127      	b.n	80010bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	f040 8116 	bne.w	80010b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d034      	beq.n	8000efc <HAL_GPIO_Init+0xa4>
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d80d      	bhi.n	8000eb2 <HAL_GPIO_Init+0x5a>
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d02b      	beq.n	8000ef2 <HAL_GPIO_Init+0x9a>
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d804      	bhi.n	8000ea8 <HAL_GPIO_Init+0x50>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d031      	beq.n	8000f06 <HAL_GPIO_Init+0xae>
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d01c      	beq.n	8000ee0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea6:	e048      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d043      	beq.n	8000f34 <HAL_GPIO_Init+0xdc>
 8000eac:	2b11      	cmp	r3, #17
 8000eae:	d01b      	beq.n	8000ee8 <HAL_GPIO_Init+0x90>
          break;
 8000eb0:	e043      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eb2:	4a89      	ldr	r2, [pc, #548]	; (80010d8 <HAL_GPIO_Init+0x280>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d026      	beq.n	8000f06 <HAL_GPIO_Init+0xae>
 8000eb8:	4a87      	ldr	r2, [pc, #540]	; (80010d8 <HAL_GPIO_Init+0x280>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d806      	bhi.n	8000ecc <HAL_GPIO_Init+0x74>
 8000ebe:	4a87      	ldr	r2, [pc, #540]	; (80010dc <HAL_GPIO_Init+0x284>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d020      	beq.n	8000f06 <HAL_GPIO_Init+0xae>
 8000ec4:	4a86      	ldr	r2, [pc, #536]	; (80010e0 <HAL_GPIO_Init+0x288>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01d      	beq.n	8000f06 <HAL_GPIO_Init+0xae>
          break;
 8000eca:	e036      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ecc:	4a85      	ldr	r2, [pc, #532]	; (80010e4 <HAL_GPIO_Init+0x28c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0xae>
 8000ed2:	4a85      	ldr	r2, [pc, #532]	; (80010e8 <HAL_GPIO_Init+0x290>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d016      	beq.n	8000f06 <HAL_GPIO_Init+0xae>
 8000ed8:	4a84      	ldr	r2, [pc, #528]	; (80010ec <HAL_GPIO_Init+0x294>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0xae>
          break;
 8000ede:	e02c      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e028      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	3304      	adds	r3, #4
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e023      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e01e      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	330c      	adds	r3, #12
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e019      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e012      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d105      	bne.n	8000f28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	611a      	str	r2, [r3, #16]
          break;
 8000f26:	e008      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	615a      	str	r2, [r3, #20]
          break;
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2bff      	cmp	r3, #255	; 0xff
 8000f3e:	d801      	bhi.n	8000f44 <HAL_GPIO_Init+0xec>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	e001      	b.n	8000f48 <HAL_GPIO_Init+0xf0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3304      	adds	r3, #4
 8000f48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	2bff      	cmp	r3, #255	; 0xff
 8000f4e:	d802      	bhi.n	8000f56 <HAL_GPIO_Init+0xfe>
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x104>
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	3b08      	subs	r3, #8
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	210f      	movs	r1, #15
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	6a39      	ldr	r1, [r7, #32]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	431a      	orrs	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 8096 	beq.w	80010b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8a:	4a59      	ldr	r2, [pc, #356]	; (80010f0 <HAL_GPIO_Init+0x298>)
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <HAL_GPIO_Init+0x298>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <HAL_GPIO_Init+0x298>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa2:	4a54      	ldr	r2, [pc, #336]	; (80010f4 <HAL_GPIO_Init+0x29c>)
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <HAL_GPIO_Init+0x2a0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x19e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4a      	ldr	r2, [pc, #296]	; (80010fc <HAL_GPIO_Init+0x2a4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x19a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a49      	ldr	r2, [pc, #292]	; (8001100 <HAL_GPIO_Init+0x2a8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x196>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a48      	ldr	r2, [pc, #288]	; (8001104 <HAL_GPIO_Init+0x2ac>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x192>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x1a0>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x1a0>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x1a0>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x1a0>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001008:	493a      	ldr	r1, [pc, #232]	; (80010f4 <HAL_GPIO_Init+0x29c>)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001022:	4939      	ldr	r1, [pc, #228]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
 800102e:	e006      	b.n	800103e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001030:	4935      	ldr	r1, [pc, #212]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4013      	ands	r3, r2
 800103c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800104a:	492f      	ldr	r1, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
 8001056:	e006      	b.n	8001066 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001058:	492b      	ldr	r1, [pc, #172]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4013      	ands	r3, r2
 8001064:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001072:	4925      	ldr	r1, [pc, #148]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	608b      	str	r3, [r1, #8]
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001080:	4921      	ldr	r1, [pc, #132]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4013      	ands	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800109a:	491b      	ldr	r1, [pc, #108]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60cb      	str	r3, [r1, #12]
 80010a6:	e006      	b.n	80010b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a8:	4917      	ldr	r1, [pc, #92]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4013      	ands	r3, r2
 80010b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	3301      	adds	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f47f aed0 	bne.w	8000e6c <HAL_GPIO_Init+0x14>
  }
}
 80010cc:	bf00      	nop
 80010ce:	372c      	adds	r7, #44	; 0x2c
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	10210000 	.word	0x10210000
 80010dc:	10110000 	.word	0x10110000
 80010e0:	10120000 	.word	0x10120000
 80010e4:	10310000 	.word	0x10310000
 80010e8:	10320000 	.word	0x10320000
 80010ec:	10220000 	.word	0x10220000
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	40011000 	.word	0x40011000
 8001104:	40011400 	.word	0x40011400
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800111a:	e09a      	b.n	8001252 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	409a      	lsls	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 808e 	beq.w	800124c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_DeInit+0x160>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4013      	ands	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a46      	ldr	r2, [pc, #280]	; (8001270 <HAL_GPIO_DeInit+0x164>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_DeInit+0x76>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a45      	ldr	r2, [pc, #276]	; (8001274 <HAL_GPIO_DeInit+0x168>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_DeInit+0x72>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a44      	ldr	r2, [pc, #272]	; (8001278 <HAL_GPIO_DeInit+0x16c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_DeInit+0x6e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a43      	ldr	r2, [pc, #268]	; (800127c <HAL_GPIO_DeInit+0x170>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_DeInit+0x6a>
 8001172:	2303      	movs	r3, #3
 8001174:	e006      	b.n	8001184 <HAL_GPIO_DeInit+0x78>
 8001176:	2304      	movs	r3, #4
 8001178:	e004      	b.n	8001184 <HAL_GPIO_DeInit+0x78>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_DeInit+0x78>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_DeInit+0x78>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	fa03 f202 	lsl.w	r2, r3, r2
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	429a      	cmp	r2, r3
 8001194:	d132      	bne.n	80011fc <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80011a6:	4831      	ldr	r0, [pc, #196]	; (800126c <HAL_GPIO_DeInit+0x160>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	492f      	ldr	r1, [pc, #188]	; (800126c <HAL_GPIO_DeInit+0x160>)
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	0892      	lsrs	r2, r2, #2
 80011b2:	3202      	adds	r2, #2
 80011b4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	43d2      	mvns	r2, r2
 80011bc:	400a      	ands	r2, r1
 80011be:	3302      	adds	r3, #2
 80011c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80011c4:	492e      	ldr	r1, [pc, #184]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80011d2:	492b      	ldr	r1, [pc, #172]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	43db      	mvns	r3, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80011e0:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4013      	ands	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80011ee:	4924      	ldr	r1, [pc, #144]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_GPIO_DeInit+0x174>)
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d801      	bhi.n	8001206 <HAL_GPIO_DeInit+0xfa>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	e001      	b.n	800120a <HAL_GPIO_DeInit+0xfe>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2bff      	cmp	r3, #255	; 0xff
 8001210:	d802      	bhi.n	8001218 <HAL_GPIO_DeInit+0x10c>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	e002      	b.n	800121e <HAL_GPIO_DeInit+0x112>
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3b08      	subs	r3, #8
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	210f      	movs	r1, #15
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	2104      	movs	r1, #4
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	431a      	orrs	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3301      	adds	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f af5e 	bne.w	800111c <HAL_GPIO_DeInit+0x10>
  }
}
 8001260:	bf00      	nop
 8001262:	3724      	adds	r7, #36	; 0x24
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40010000 	.word	0x40010000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40011000 	.word	0x40011000
 800127c:	40011400 	.word	0x40011400
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e26c      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8087 	beq.w	80013b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a4:	4b92      	ldr	r3, [pc, #584]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d00c      	beq.n	80012ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b0:	4b8f      	ldr	r3, [pc, #572]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d112      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
 80012bc:	4b8c      	ldr	r3, [pc, #560]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d06c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x12c>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d168      	bne.n	80013b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e246      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x76>
 80012ec:	4a80      	ldr	r2, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	4b80      	ldr	r3, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e02e      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4a7b      	ldr	r2, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4a78      	ldr	r2, [pc, #480]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001310:	4b77      	ldr	r3, [pc, #476]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0xbc>
 8001326:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	4b71      	ldr	r3, [pc, #452]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4a6f      	ldr	r2, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001334:	4b6e      	ldr	r3, [pc, #440]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 8001340:	4a6b      	ldr	r2, [pc, #428]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4a68      	ldr	r2, [pc, #416]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800134e:	4b68      	ldr	r3, [pc, #416]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fbb8 	bl	8000ad4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fbb4 	bl	8000ad4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1fa      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xe4>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fba4 	bl	8000ad4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fba0 	bl	8000ad4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1e6      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x10c>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013be:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1ba      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	493d      	ldr	r1, [pc, #244]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_RCC_OscConfig+0x270>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fb59 	bl	8000ad4 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fb55 	bl	8000ad4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e19b      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	492a      	ldr	r1, [pc, #168]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x270>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fb38 	bl	8000ad4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fb34 	bl	8000ad4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e17a      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d03a      	beq.n	8001508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d019      	beq.n	80014ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_RCC_OscConfig+0x274>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb18 	bl	8000ad4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb14 	bl	8000ad4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e15a      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 fada 	bl	8001a80 <RCC_Delay>
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCC_OscConfig+0x274>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff fafe 	bl	8000ad4 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014da:	e00f      	b.n	80014fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fafa 	bl	8000ad4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d908      	bls.n	80014fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e140      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	42420000 	.word	0x42420000
 80014f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b9e      	ldr	r3, [pc, #632]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e9      	bne.n	80014dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a6 	beq.w	8001662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	4b97      	ldr	r3, [pc, #604]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10d      	bne.n	8001542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4a94      	ldr	r2, [pc, #592]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	4b93      	ldr	r3, [pc, #588]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b91      	ldr	r3, [pc, #580]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b8e      	ldr	r3, [pc, #568]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4a8b      	ldr	r2, [pc, #556]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001550:	4b8a      	ldr	r3, [pc, #552]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fabb 	bl	8000ad4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fab7 	bl	8000ad4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	; 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e0fd      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b81      	ldr	r3, [pc, #516]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x312>
 8001588:	4a7b      	ldr	r2, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e02d      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x334>
 800159e:	4a76      	ldr	r2, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	4b75      	ldr	r3, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	4a73      	ldr	r2, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	4b72      	ldr	r3, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6213      	str	r3, [r2, #32]
 80015b6:	e01c      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x356>
 80015c0:	4a6d      	ldr	r2, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e00b      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015da:	4a67      	ldr	r2, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	4a64      	ldr	r2, [pc, #400]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d015      	beq.n	8001626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fa6b 	bl	8000ad4 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff fa67 	bl	8000ad4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e0ab      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ee      	beq.n	8001602 <HAL_RCC_OscConfig+0x37e>
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff fa55 	bl	8000ad4 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff fa51 	bl	8000ad4 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e095      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ee      	bne.n	800162e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d105      	bne.n	8001662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001656:	4a48      	ldr	r2, [pc, #288]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8081 	beq.w	800176e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d061      	beq.n	800173c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d146      	bne.n	800170e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_OscConfig+0x4fc>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fa25 	bl	8000ad4 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fa21 	bl	8000ad4 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e067      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b4:	d108      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b6:	4930      	ldr	r1, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c8:	482b      	ldr	r0, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a19      	ldr	r1, [r3, #32]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	430b      	orrs	r3, r1
 80016dc:	4313      	orrs	r3, r2
 80016de:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x4fc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f9f5 	bl	8000ad4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff f9f1 	bl	8000ad4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e037      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x46a>
 800170c:	e02f      	b.n	800176e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_RCC_OscConfig+0x4fc>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff f9de 	bl	8000ad4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f9da 	bl	8000ad4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e020      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x498>
 800173a:	e018      	b.n	800176e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e013      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	429a      	cmp	r2, r3
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	40007000 	.word	0x40007000
 8001780:	42420060 	.word	0x42420060

08001784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0d0      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0207 	and.w	r2, r3, #7
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d210      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4967      	ldr	r1, [pc, #412]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 0207 	bic.w	r2, r3, #7
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0207 	and.w	r2, r3, #7
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4a59      	ldr	r2, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4a53      	ldr	r2, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4950      	ldr	r1, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e073      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4939      	ldr	r1, [pc, #228]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 0203 	bic.w	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f92e 	bl	8000ad4 <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff f92a 	bl	8000ad4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e053      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0207 	and.w	r2, r3, #7
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d910      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4924      	ldr	r1, [pc, #144]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 0207 	bic.w	r2, r3, #7
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0207 	and.w	r2, r3, #7
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4919      	ldr	r1, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018fe:	4912      	ldr	r1, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	4601      	mov	r1, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	fa21 f303 	lsr.w	r3, r1, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f88c 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08002d60 	.word	0x08002d60
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b490      	push	{r4, r7}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001960:	1d3c      	adds	r4, r7, #4
 8001962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001982:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x40>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x46>
 8001996:	e02d      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 800199a:	623b      	str	r3, [r7, #32]
      break;
 800199c:	e02d      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019aa:	4413      	add	r3, r2
 80019ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	0c5b      	lsrs	r3, r3, #17
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ca:	4413      	add	r3, r2
 80019cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d6:	fb02 f203 	mul.w	r2, r2, r3
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e004      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	623b      	str	r3, [r7, #32]
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f6:	623b      	str	r3, [r7, #32]
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc90      	pop	{r4, r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	08002d4c 	.word	0x08002d4c
 8001a0c:	08002d5c 	.word	0x08002d5c
 8001a10:	40021000 	.word	0x40021000
 8001a14:	007a1200 	.word	0x007a1200
 8001a18:	003d0900 	.word	0x003d0900

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff2 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a38:	4601      	mov	r1, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08002d70 	.word	0x08002d70

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a60:	4601      	mov	r1, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	0adb      	lsrs	r3, r3, #11
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	08002d70 	.word	0x08002d70

08001a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <RCC_Delay+0x34>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <RCC_Delay+0x38>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0a5b      	lsrs	r3, r3, #9
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a9c:	bf00      	nop
  }
  while (Delay --);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <RCC_Delay+0x1c>
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e03f      	b.n	8001b4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe ff16 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	68d2      	ldr	r2, [r2, #12]
 8001afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fbaf 	bl	8002264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	6912      	ldr	r2, [r2, #16]
 8001b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	6952      	ldr	r2, [r2, #20]
 8001b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	68d2      	ldr	r2, [r2, #12]
 8001b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e01e      	b.n	8001ba6 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	68d2      	ldr	r2, [r2, #12]
 8001b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b7e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe ff13 	bl	80009ac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b088      	sub	sp, #32
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	f040 8082 	bne.w	8001cd4 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_UART_Transmit+0x2e>
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e07a      	b.n	8001cd6 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_UART_Transmit+0x40>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e073      	b.n	8001cd6 <HAL_UART_Transmit+0x128>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2221      	movs	r2, #33	; 0x21
 8001c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c04:	f7fe ff66 	bl	8000ad4 <HAL_GetTick>
 8001c08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c16:	e041      	b.n	8001c9c <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2e:	d121      	bne.n	8001c74 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f9a9 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e045      	b.n	8001cd6 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	8812      	ldrh	r2, [r2, #0]
 8001c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c5a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d103      	bne.n	8001c6c <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	3302      	adds	r3, #2
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	e017      	b.n	8001c9c <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	e013      	b.n	8001c9c <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f987 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e023      	b.n	8001cd6 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1c59      	adds	r1, r3, #1
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1b8      	bne.n	8001c18 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2140      	movs	r1, #64	; 0x40
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f96e 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e00a      	b.n	8001cd6 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d140      	bne.n	8001d7a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_UART_Receive_IT+0x26>
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e039      	b.n	8001d7c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_UART_Receive_IT+0x38>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e032      	b.n	8001d7c <HAL_UART_Receive_IT+0x9e>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2222      	movs	r2, #34	; 0x22
 8001d3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	68d2      	ldr	r2, [r2, #12]
 8001d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d54:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	6952      	ldr	r2, [r2, #20]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	68d2      	ldr	r2, [r2, #12]
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_UART_IRQHandler+0x52>
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f9c4 	bl	8002160 <UART_Receive_IT>
      return;
 8001dd8:	e0cc      	b.n	8001f74 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80ab 	beq.w	8001f38 <HAL_UART_IRQHandler+0x1b0>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_UART_IRQHandler+0x70>
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80a0 	beq.w	8001f38 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_UART_IRQHandler+0x90>
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_UART_IRQHandler+0xb0>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	f043 0202 	orr.w	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HAL_UART_IRQHandler+0xd0>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_UART_IRQHandler+0xf0>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f043 0208 	orr.w	r2, r3, #8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d078      	beq.n	8001f72 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_UART_IRQHandler+0x112>
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f963 	bl	8002160 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <HAL_UART_IRQHandler+0x13a>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d031      	beq.n	8001f26 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8af 	bl	8002026 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d023      	beq.n	8001f1e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	6952      	ldr	r2, [r2, #20]
 8001ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d013      	beq.n	8001f16 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_UART_IRQHandler+0x1f4>)
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ff30 	bl	8000d60 <HAL_DMA_Abort_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f10:	4610      	mov	r0, r2
 8001f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f14:	e00e      	b.n	8001f34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fcda 	bl	80008d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	e00a      	b.n	8001f34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fcd6 	bl	80008d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	e006      	b.n	8001f34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fcd2 	bl	80008d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001f32:	e01e      	b.n	8001f72 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f34:	bf00      	nop
    return;
 8001f36:	e01c      	b.n	8001f72 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_UART_IRQHandler+0x1cc>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f89b 	bl	8002088 <UART_Transmit_IT>
    return;
 8001f52:	e00f      	b.n	8001f74 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_UART_IRQHandler+0x1ec>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8e1 	bl	8002130 <UART_EndTransmit_IT>
    return;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001f72:	bf00      	nop
  }
}
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08002061 	.word	0x08002061

08001f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa2:	e02c      	b.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d028      	beq.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fb2:	f7fe fd8f 	bl	8000ad4 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	1ad2      	subs	r2, r2, r3
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d91d      	bls.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	68d2      	ldr	r2, [r2, #12]
 8001fcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fd0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	6952      	ldr	r2, [r2, #20]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e00f      	b.n	800201e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	429a      	cmp	r2, r3
 800201a:	d0c3      	beq.n	8001fa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	68d2      	ldr	r2, [r2, #12]
 8002038:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800203c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	6952      	ldr	r2, [r2, #20]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7fe fc28 	bl	80008d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b21      	cmp	r3, #33	; 0x21
 800209a:	d143      	bne.n	8002124 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a4:	d119      	bne.n	80020da <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	8812      	ldrh	r2, [r2, #0]
 80020b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	1c9a      	adds	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	621a      	str	r2, [r3, #32]
 80020cc:	e00e      	b.n	80020ec <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	621a      	str	r2, [r3, #32]
 80020d8:	e008      	b.n	80020ec <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	1c58      	adds	r0, r3, #1
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	6208      	str	r0, [r1, #32]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10f      	bne.n	8002120 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	68d2      	ldr	r2, [r2, #12]
 800210a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	68d2      	ldr	r2, [r2, #12]
 800211a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800211e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002146:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff15 	bl	8001f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b22      	cmp	r3, #34	; 0x22
 8002172:	d171      	bne.n	8002258 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217c:	d123      	bne.n	80021c6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10e      	bne.n	80021aa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	b29b      	uxth	r3, r3
 8002194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	1c9a      	adds	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
 80021a8:	e029      	b.n	80021fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
 80021c4:	e01b      	b.n	80021fe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	1c59      	adds	r1, r3, #1
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6291      	str	r1, [r2, #40]	; 0x28
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6852      	ldr	r2, [r2, #4]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e00c      	b.n	80021fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	1c59      	adds	r1, r3, #1
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6291      	str	r1, [r2, #40]	; 0x28
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	6852      	ldr	r2, [r2, #4]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	4619      	mov	r1, r3
 800220c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800220e:	2b00      	cmp	r3, #0
 8002210:	d120      	bne.n	8002254 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	68d2      	ldr	r2, [r2, #12]
 800221c:	f022 0220 	bic.w	r2, r2, #32
 8002220:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	68d2      	ldr	r2, [r2, #12]
 800222c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002230:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	6952      	ldr	r2, [r2, #20]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fb2e 	bl	80008ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e002      	b.n	800225a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	6912      	ldr	r2, [r2, #16]
 8002276:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	430a      	orrs	r2, r1
 8002280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022a2:	f023 030c 	bic.w	r3, r3, #12
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6952      	ldr	r2, [r2, #20]
 80022b6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6992      	ldr	r2, [r2, #24]
 80022be:	430a      	orrs	r2, r1
 80022c0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a52      	ldr	r2, [pc, #328]	; (8002410 <UART_SetConfig+0x1ac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d14e      	bne.n	800236a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022cc:	f7ff fbc4 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 80022d0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	4a49      	ldr	r2, [pc, #292]	; (8002414 <UART_SetConfig+0x1b0>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	0118      	lsls	r0, r3, #4
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009a      	lsls	r2, r3, #2
 8002300:	441a      	add	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fbb2 f2f3 	udiv	r2, r2, r3
 800230c:	4b41      	ldr	r3, [pc, #260]	; (8002414 <UART_SetConfig+0x1b0>)
 800230e:	fba3 4302 	umull	r4, r3, r3, r2
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2464      	movs	r4, #100	; 0x64
 8002316:	fb04 f303 	mul.w	r3, r4, r3
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	3332      	adds	r3, #50	; 0x32
 8002320:	4a3c      	ldr	r2, [pc, #240]	; (8002414 <UART_SetConfig+0x1b0>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232c:	4418      	add	r0, r3
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	009a      	lsls	r2, r3, #2
 8002338:	441a      	add	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fbb2 f2f3 	udiv	r2, r2, r3
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <UART_SetConfig+0x1b0>)
 8002346:	fba3 4302 	umull	r4, r3, r3, r2
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2464      	movs	r4, #100	; 0x64
 800234e:	fb04 f303 	mul.w	r3, r4, r3
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	3332      	adds	r3, #50	; 0x32
 8002358:	4a2e      	ldr	r2, [pc, #184]	; (8002414 <UART_SetConfig+0x1b0>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	4403      	add	r3, r0
 8002366:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002368:	e04d      	b.n	8002406 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800236a:	f7ff fb61 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 800236e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	009a      	lsls	r2, r3, #2
 800237e:	441a      	add	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <UART_SetConfig+0x1b0>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	0118      	lsls	r0, r3, #4
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	009a      	lsls	r2, r3, #2
 800239e:	441a      	add	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <UART_SetConfig+0x1b0>)
 80023ac:	fba3 4302 	umull	r4, r3, r3, r2
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	2464      	movs	r4, #100	; 0x64
 80023b4:	fb04 f303 	mul.w	r3, r4, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	3332      	adds	r3, #50	; 0x32
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <UART_SetConfig+0x1b0>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ca:	4418      	add	r0, r3
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009a      	lsls	r2, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <UART_SetConfig+0x1b0>)
 80023e4:	fba3 4302 	umull	r4, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	2464      	movs	r4, #100	; 0x64
 80023ec:	fb04 f303 	mul.w	r3, r4, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	3332      	adds	r3, #50	; 0x32
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <UART_SetConfig+0x1b0>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4403      	add	r3, r0
 8002404:	608b      	str	r3, [r1, #8]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	40013800 	.word	0x40013800
 8002414:	51eb851f 	.word	0x51eb851f

08002418 <main>:
 */


#include "main.h"

int main(void){
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  hwInit();
 800241c:	f7fe faf0 	bl	8000a00 <hwInit>
  apInit();
 8002420:	f7fd fe94 	bl	800014c <apInit>

  apMain();
 8002424:	f7fd fea2 	bl	800016c <apMain>
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <__libc_init_array>:
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	2500      	movs	r5, #0
 8002434:	4e0c      	ldr	r6, [pc, #48]	; (8002468 <__libc_init_array+0x38>)
 8002436:	4c0d      	ldr	r4, [pc, #52]	; (800246c <__libc_init_array+0x3c>)
 8002438:	1ba4      	subs	r4, r4, r6
 800243a:	10a4      	asrs	r4, r4, #2
 800243c:	42a5      	cmp	r5, r4
 800243e:	d109      	bne.n	8002454 <__libc_init_array+0x24>
 8002440:	f000 fc72 	bl	8002d28 <_init>
 8002444:	2500      	movs	r5, #0
 8002446:	4e0a      	ldr	r6, [pc, #40]	; (8002470 <__libc_init_array+0x40>)
 8002448:	4c0a      	ldr	r4, [pc, #40]	; (8002474 <__libc_init_array+0x44>)
 800244a:	1ba4      	subs	r4, r4, r6
 800244c:	10a4      	asrs	r4, r4, #2
 800244e:	42a5      	cmp	r5, r4
 8002450:	d105      	bne.n	800245e <__libc_init_array+0x2e>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002458:	4798      	blx	r3
 800245a:	3501      	adds	r5, #1
 800245c:	e7ee      	b.n	800243c <__libc_init_array+0xc>
 800245e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002462:	4798      	blx	r3
 8002464:	3501      	adds	r5, #1
 8002466:	e7f2      	b.n	800244e <__libc_init_array+0x1e>
 8002468:	08002dac 	.word	0x08002dac
 800246c:	08002dac 	.word	0x08002dac
 8002470:	08002dac 	.word	0x08002dac
 8002474:	08002db0 	.word	0x08002db0

08002478 <memset>:
 8002478:	4603      	mov	r3, r0
 800247a:	4402      	add	r2, r0
 800247c:	4293      	cmp	r3, r2
 800247e:	d100      	bne.n	8002482 <memset+0xa>
 8002480:	4770      	bx	lr
 8002482:	f803 1b01 	strb.w	r1, [r3], #1
 8002486:	e7f9      	b.n	800247c <memset+0x4>

08002488 <_vsniprintf_r>:
 8002488:	b530      	push	{r4, r5, lr}
 800248a:	1e14      	subs	r4, r2, #0
 800248c:	4605      	mov	r5, r0
 800248e:	b09b      	sub	sp, #108	; 0x6c
 8002490:	4618      	mov	r0, r3
 8002492:	da05      	bge.n	80024a0 <_vsniprintf_r+0x18>
 8002494:	238b      	movs	r3, #139	; 0x8b
 8002496:	f04f 30ff 	mov.w	r0, #4294967295
 800249a:	602b      	str	r3, [r5, #0]
 800249c:	b01b      	add	sp, #108	; 0x6c
 800249e:	bd30      	pop	{r4, r5, pc}
 80024a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80024a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80024a8:	bf0c      	ite	eq
 80024aa:	4623      	moveq	r3, r4
 80024ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	9305      	str	r3, [sp, #20]
 80024b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b8:	9100      	str	r1, [sp, #0]
 80024ba:	9104      	str	r1, [sp, #16]
 80024bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80024c0:	4602      	mov	r2, r0
 80024c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80024c4:	4669      	mov	r1, sp
 80024c6:	4628      	mov	r0, r5
 80024c8:	f000 f874 	bl	80025b4 <_svfiprintf_r>
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	bfbc      	itt	lt
 80024d0:	238b      	movlt	r3, #139	; 0x8b
 80024d2:	602b      	strlt	r3, [r5, #0]
 80024d4:	2c00      	cmp	r4, #0
 80024d6:	d0e1      	beq.n	800249c <_vsniprintf_r+0x14>
 80024d8:	2200      	movs	r2, #0
 80024da:	9b00      	ldr	r3, [sp, #0]
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e7dd      	b.n	800249c <_vsniprintf_r+0x14>

080024e0 <vsniprintf>:
 80024e0:	b507      	push	{r0, r1, r2, lr}
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	460a      	mov	r2, r1
 80024e8:	4601      	mov	r1, r0
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <vsniprintf+0x18>)
 80024ec:	6800      	ldr	r0, [r0, #0]
 80024ee:	f7ff ffcb 	bl	8002488 <_vsniprintf_r>
 80024f2:	b003      	add	sp, #12
 80024f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024f8:	2000000c 	.word	0x2000000c

080024fc <__ssputs_r>:
 80024fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002500:	688e      	ldr	r6, [r1, #8]
 8002502:	4682      	mov	sl, r0
 8002504:	429e      	cmp	r6, r3
 8002506:	460c      	mov	r4, r1
 8002508:	4691      	mov	r9, r2
 800250a:	4698      	mov	r8, r3
 800250c:	d835      	bhi.n	800257a <__ssputs_r+0x7e>
 800250e:	898a      	ldrh	r2, [r1, #12]
 8002510:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002514:	d031      	beq.n	800257a <__ssputs_r+0x7e>
 8002516:	2302      	movs	r3, #2
 8002518:	6825      	ldr	r5, [r4, #0]
 800251a:	6909      	ldr	r1, [r1, #16]
 800251c:	1a6f      	subs	r7, r5, r1
 800251e:	6965      	ldr	r5, [r4, #20]
 8002520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002524:	fb95 f5f3 	sdiv	r5, r5, r3
 8002528:	f108 0301 	add.w	r3, r8, #1
 800252c:	443b      	add	r3, r7
 800252e:	429d      	cmp	r5, r3
 8002530:	bf38      	it	cc
 8002532:	461d      	movcc	r5, r3
 8002534:	0553      	lsls	r3, r2, #21
 8002536:	d531      	bpl.n	800259c <__ssputs_r+0xa0>
 8002538:	4629      	mov	r1, r5
 800253a:	f000 fb47 	bl	8002bcc <_malloc_r>
 800253e:	4606      	mov	r6, r0
 8002540:	b950      	cbnz	r0, 8002558 <__ssputs_r+0x5c>
 8002542:	230c      	movs	r3, #12
 8002544:	f8ca 3000 	str.w	r3, [sl]
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002552:	81a3      	strh	r3, [r4, #12]
 8002554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002558:	463a      	mov	r2, r7
 800255a:	6921      	ldr	r1, [r4, #16]
 800255c:	f000 fac4 	bl	8002ae8 <memcpy>
 8002560:	89a3      	ldrh	r3, [r4, #12]
 8002562:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256a:	81a3      	strh	r3, [r4, #12]
 800256c:	6126      	str	r6, [r4, #16]
 800256e:	443e      	add	r6, r7
 8002570:	6026      	str	r6, [r4, #0]
 8002572:	4646      	mov	r6, r8
 8002574:	6165      	str	r5, [r4, #20]
 8002576:	1bed      	subs	r5, r5, r7
 8002578:	60a5      	str	r5, [r4, #8]
 800257a:	4546      	cmp	r6, r8
 800257c:	bf28      	it	cs
 800257e:	4646      	movcs	r6, r8
 8002580:	4649      	mov	r1, r9
 8002582:	4632      	mov	r2, r6
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	f000 faba 	bl	8002afe <memmove>
 800258a:	68a3      	ldr	r3, [r4, #8]
 800258c:	2000      	movs	r0, #0
 800258e:	1b9b      	subs	r3, r3, r6
 8002590:	60a3      	str	r3, [r4, #8]
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	441e      	add	r6, r3
 8002596:	6026      	str	r6, [r4, #0]
 8002598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800259c:	462a      	mov	r2, r5
 800259e:	f000 fb73 	bl	8002c88 <_realloc_r>
 80025a2:	4606      	mov	r6, r0
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d1e1      	bne.n	800256c <__ssputs_r+0x70>
 80025a8:	6921      	ldr	r1, [r4, #16]
 80025aa:	4650      	mov	r0, sl
 80025ac:	f000 fac2 	bl	8002b34 <_free_r>
 80025b0:	e7c7      	b.n	8002542 <__ssputs_r+0x46>
	...

080025b4 <_svfiprintf_r>:
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	b09d      	sub	sp, #116	; 0x74
 80025ba:	9303      	str	r3, [sp, #12]
 80025bc:	898b      	ldrh	r3, [r1, #12]
 80025be:	4680      	mov	r8, r0
 80025c0:	061c      	lsls	r4, r3, #24
 80025c2:	460d      	mov	r5, r1
 80025c4:	4616      	mov	r6, r2
 80025c6:	d50f      	bpl.n	80025e8 <_svfiprintf_r+0x34>
 80025c8:	690b      	ldr	r3, [r1, #16]
 80025ca:	b96b      	cbnz	r3, 80025e8 <_svfiprintf_r+0x34>
 80025cc:	2140      	movs	r1, #64	; 0x40
 80025ce:	f000 fafd 	bl	8002bcc <_malloc_r>
 80025d2:	6028      	str	r0, [r5, #0]
 80025d4:	6128      	str	r0, [r5, #16]
 80025d6:	b928      	cbnz	r0, 80025e4 <_svfiprintf_r+0x30>
 80025d8:	230c      	movs	r3, #12
 80025da:	f8c8 3000 	str.w	r3, [r8]
 80025de:	f04f 30ff 	mov.w	r0, #4294967295
 80025e2:	e0c4      	b.n	800276e <_svfiprintf_r+0x1ba>
 80025e4:	2340      	movs	r3, #64	; 0x40
 80025e6:	616b      	str	r3, [r5, #20]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9309      	str	r3, [sp, #36]	; 0x24
 80025ec:	2320      	movs	r3, #32
 80025ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025f2:	2330      	movs	r3, #48	; 0x30
 80025f4:	f04f 0b01 	mov.w	fp, #1
 80025f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025fc:	4637      	mov	r7, r6
 80025fe:	463c      	mov	r4, r7
 8002600:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d13c      	bne.n	8002682 <_svfiprintf_r+0xce>
 8002608:	ebb7 0a06 	subs.w	sl, r7, r6
 800260c:	d00b      	beq.n	8002626 <_svfiprintf_r+0x72>
 800260e:	4653      	mov	r3, sl
 8002610:	4632      	mov	r2, r6
 8002612:	4629      	mov	r1, r5
 8002614:	4640      	mov	r0, r8
 8002616:	f7ff ff71 	bl	80024fc <__ssputs_r>
 800261a:	3001      	adds	r0, #1
 800261c:	f000 80a2 	beq.w	8002764 <_svfiprintf_r+0x1b0>
 8002620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002622:	4453      	add	r3, sl
 8002624:	9309      	str	r3, [sp, #36]	; 0x24
 8002626:	783b      	ldrb	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 809b 	beq.w	8002764 <_svfiprintf_r+0x1b0>
 800262e:	2300      	movs	r3, #0
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	9307      	str	r3, [sp, #28]
 8002638:	9205      	str	r2, [sp, #20]
 800263a:	9306      	str	r3, [sp, #24]
 800263c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002640:	931a      	str	r3, [sp, #104]	; 0x68
 8002642:	2205      	movs	r2, #5
 8002644:	7821      	ldrb	r1, [r4, #0]
 8002646:	4850      	ldr	r0, [pc, #320]	; (8002788 <_svfiprintf_r+0x1d4>)
 8002648:	f000 fa40 	bl	8002acc <memchr>
 800264c:	1c67      	adds	r7, r4, #1
 800264e:	9b04      	ldr	r3, [sp, #16]
 8002650:	b9d8      	cbnz	r0, 800268a <_svfiprintf_r+0xd6>
 8002652:	06d9      	lsls	r1, r3, #27
 8002654:	bf44      	itt	mi
 8002656:	2220      	movmi	r2, #32
 8002658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800265c:	071a      	lsls	r2, r3, #28
 800265e:	bf44      	itt	mi
 8002660:	222b      	movmi	r2, #43	; 0x2b
 8002662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002666:	7822      	ldrb	r2, [r4, #0]
 8002668:	2a2a      	cmp	r2, #42	; 0x2a
 800266a:	d016      	beq.n	800269a <_svfiprintf_r+0xe6>
 800266c:	2100      	movs	r1, #0
 800266e:	200a      	movs	r0, #10
 8002670:	9a07      	ldr	r2, [sp, #28]
 8002672:	4627      	mov	r7, r4
 8002674:	783b      	ldrb	r3, [r7, #0]
 8002676:	3401      	adds	r4, #1
 8002678:	3b30      	subs	r3, #48	; 0x30
 800267a:	2b09      	cmp	r3, #9
 800267c:	d950      	bls.n	8002720 <_svfiprintf_r+0x16c>
 800267e:	b1c9      	cbz	r1, 80026b4 <_svfiprintf_r+0x100>
 8002680:	e011      	b.n	80026a6 <_svfiprintf_r+0xf2>
 8002682:	2b25      	cmp	r3, #37	; 0x25
 8002684:	d0c0      	beq.n	8002608 <_svfiprintf_r+0x54>
 8002686:	4627      	mov	r7, r4
 8002688:	e7b9      	b.n	80025fe <_svfiprintf_r+0x4a>
 800268a:	4a3f      	ldr	r2, [pc, #252]	; (8002788 <_svfiprintf_r+0x1d4>)
 800268c:	463c      	mov	r4, r7
 800268e:	1a80      	subs	r0, r0, r2
 8002690:	fa0b f000 	lsl.w	r0, fp, r0
 8002694:	4318      	orrs	r0, r3
 8002696:	9004      	str	r0, [sp, #16]
 8002698:	e7d3      	b.n	8002642 <_svfiprintf_r+0x8e>
 800269a:	9a03      	ldr	r2, [sp, #12]
 800269c:	1d11      	adds	r1, r2, #4
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	9103      	str	r1, [sp, #12]
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	db01      	blt.n	80026aa <_svfiprintf_r+0xf6>
 80026a6:	9207      	str	r2, [sp, #28]
 80026a8:	e004      	b.n	80026b4 <_svfiprintf_r+0x100>
 80026aa:	4252      	negs	r2, r2
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	9207      	str	r2, [sp, #28]
 80026b2:	9304      	str	r3, [sp, #16]
 80026b4:	783b      	ldrb	r3, [r7, #0]
 80026b6:	2b2e      	cmp	r3, #46	; 0x2e
 80026b8:	d10d      	bne.n	80026d6 <_svfiprintf_r+0x122>
 80026ba:	787b      	ldrb	r3, [r7, #1]
 80026bc:	1c79      	adds	r1, r7, #1
 80026be:	2b2a      	cmp	r3, #42	; 0x2a
 80026c0:	d132      	bne.n	8002728 <_svfiprintf_r+0x174>
 80026c2:	9b03      	ldr	r3, [sp, #12]
 80026c4:	3702      	adds	r7, #2
 80026c6:	1d1a      	adds	r2, r3, #4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	9203      	str	r2, [sp, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bfb8      	it	lt
 80026d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80026d4:	9305      	str	r3, [sp, #20]
 80026d6:	4c2d      	ldr	r4, [pc, #180]	; (800278c <_svfiprintf_r+0x1d8>)
 80026d8:	2203      	movs	r2, #3
 80026da:	7839      	ldrb	r1, [r7, #0]
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 f9f5 	bl	8002acc <memchr>
 80026e2:	b138      	cbz	r0, 80026f4 <_svfiprintf_r+0x140>
 80026e4:	2340      	movs	r3, #64	; 0x40
 80026e6:	1b00      	subs	r0, r0, r4
 80026e8:	fa03 f000 	lsl.w	r0, r3, r0
 80026ec:	9b04      	ldr	r3, [sp, #16]
 80026ee:	3701      	adds	r7, #1
 80026f0:	4303      	orrs	r3, r0
 80026f2:	9304      	str	r3, [sp, #16]
 80026f4:	7839      	ldrb	r1, [r7, #0]
 80026f6:	2206      	movs	r2, #6
 80026f8:	4825      	ldr	r0, [pc, #148]	; (8002790 <_svfiprintf_r+0x1dc>)
 80026fa:	1c7e      	adds	r6, r7, #1
 80026fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002700:	f000 f9e4 	bl	8002acc <memchr>
 8002704:	2800      	cmp	r0, #0
 8002706:	d035      	beq.n	8002774 <_svfiprintf_r+0x1c0>
 8002708:	4b22      	ldr	r3, [pc, #136]	; (8002794 <_svfiprintf_r+0x1e0>)
 800270a:	b9fb      	cbnz	r3, 800274c <_svfiprintf_r+0x198>
 800270c:	9b03      	ldr	r3, [sp, #12]
 800270e:	3307      	adds	r3, #7
 8002710:	f023 0307 	bic.w	r3, r3, #7
 8002714:	3308      	adds	r3, #8
 8002716:	9303      	str	r3, [sp, #12]
 8002718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800271a:	444b      	add	r3, r9
 800271c:	9309      	str	r3, [sp, #36]	; 0x24
 800271e:	e76d      	b.n	80025fc <_svfiprintf_r+0x48>
 8002720:	fb00 3202 	mla	r2, r0, r2, r3
 8002724:	2101      	movs	r1, #1
 8002726:	e7a4      	b.n	8002672 <_svfiprintf_r+0xbe>
 8002728:	2300      	movs	r3, #0
 800272a:	240a      	movs	r4, #10
 800272c:	4618      	mov	r0, r3
 800272e:	9305      	str	r3, [sp, #20]
 8002730:	460f      	mov	r7, r1
 8002732:	783a      	ldrb	r2, [r7, #0]
 8002734:	3101      	adds	r1, #1
 8002736:	3a30      	subs	r2, #48	; 0x30
 8002738:	2a09      	cmp	r2, #9
 800273a:	d903      	bls.n	8002744 <_svfiprintf_r+0x190>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ca      	beq.n	80026d6 <_svfiprintf_r+0x122>
 8002740:	9005      	str	r0, [sp, #20]
 8002742:	e7c8      	b.n	80026d6 <_svfiprintf_r+0x122>
 8002744:	fb04 2000 	mla	r0, r4, r0, r2
 8002748:	2301      	movs	r3, #1
 800274a:	e7f1      	b.n	8002730 <_svfiprintf_r+0x17c>
 800274c:	ab03      	add	r3, sp, #12
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	462a      	mov	r2, r5
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <_svfiprintf_r+0x1e4>)
 8002754:	a904      	add	r1, sp, #16
 8002756:	4640      	mov	r0, r8
 8002758:	f3af 8000 	nop.w
 800275c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002760:	4681      	mov	r9, r0
 8002762:	d1d9      	bne.n	8002718 <_svfiprintf_r+0x164>
 8002764:	89ab      	ldrh	r3, [r5, #12]
 8002766:	065b      	lsls	r3, r3, #25
 8002768:	f53f af39 	bmi.w	80025de <_svfiprintf_r+0x2a>
 800276c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800276e:	b01d      	add	sp, #116	; 0x74
 8002770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002774:	ab03      	add	r3, sp, #12
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	462a      	mov	r2, r5
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <_svfiprintf_r+0x1e4>)
 800277c:	a904      	add	r1, sp, #16
 800277e:	4640      	mov	r0, r8
 8002780:	f000 f884 	bl	800288c <_printf_i>
 8002784:	e7ea      	b.n	800275c <_svfiprintf_r+0x1a8>
 8002786:	bf00      	nop
 8002788:	08002d78 	.word	0x08002d78
 800278c:	08002d7e 	.word	0x08002d7e
 8002790:	08002d82 	.word	0x08002d82
 8002794:	00000000 	.word	0x00000000
 8002798:	080024fd 	.word	0x080024fd

0800279c <_printf_common>:
 800279c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a0:	4691      	mov	r9, r2
 80027a2:	461f      	mov	r7, r3
 80027a4:	688a      	ldr	r2, [r1, #8]
 80027a6:	690b      	ldr	r3, [r1, #16]
 80027a8:	4606      	mov	r6, r0
 80027aa:	4293      	cmp	r3, r2
 80027ac:	bfb8      	it	lt
 80027ae:	4613      	movlt	r3, r2
 80027b0:	f8c9 3000 	str.w	r3, [r9]
 80027b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027b8:	460c      	mov	r4, r1
 80027ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027be:	b112      	cbz	r2, 80027c6 <_printf_common+0x2a>
 80027c0:	3301      	adds	r3, #1
 80027c2:	f8c9 3000 	str.w	r3, [r9]
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	0699      	lsls	r1, r3, #26
 80027ca:	bf42      	ittt	mi
 80027cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027d0:	3302      	addmi	r3, #2
 80027d2:	f8c9 3000 	strmi.w	r3, [r9]
 80027d6:	6825      	ldr	r5, [r4, #0]
 80027d8:	f015 0506 	ands.w	r5, r5, #6
 80027dc:	d107      	bne.n	80027ee <_printf_common+0x52>
 80027de:	f104 0a19 	add.w	sl, r4, #25
 80027e2:	68e3      	ldr	r3, [r4, #12]
 80027e4:	f8d9 2000 	ldr.w	r2, [r9]
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	429d      	cmp	r5, r3
 80027ec:	db2a      	blt.n	8002844 <_printf_common+0xa8>
 80027ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	3300      	adds	r3, #0
 80027f6:	bf18      	it	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	0692      	lsls	r2, r2, #26
 80027fc:	d42f      	bmi.n	800285e <_printf_common+0xc2>
 80027fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002802:	4639      	mov	r1, r7
 8002804:	4630      	mov	r0, r6
 8002806:	47c0      	blx	r8
 8002808:	3001      	adds	r0, #1
 800280a:	d022      	beq.n	8002852 <_printf_common+0xb6>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	68e5      	ldr	r5, [r4, #12]
 8002810:	f003 0306 	and.w	r3, r3, #6
 8002814:	2b04      	cmp	r3, #4
 8002816:	bf18      	it	ne
 8002818:	2500      	movne	r5, #0
 800281a:	f8d9 2000 	ldr.w	r2, [r9]
 800281e:	f04f 0900 	mov.w	r9, #0
 8002822:	bf08      	it	eq
 8002824:	1aad      	subeq	r5, r5, r2
 8002826:	68a3      	ldr	r3, [r4, #8]
 8002828:	6922      	ldr	r2, [r4, #16]
 800282a:	bf08      	it	eq
 800282c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002830:	4293      	cmp	r3, r2
 8002832:	bfc4      	itt	gt
 8002834:	1a9b      	subgt	r3, r3, r2
 8002836:	18ed      	addgt	r5, r5, r3
 8002838:	341a      	adds	r4, #26
 800283a:	454d      	cmp	r5, r9
 800283c:	d11b      	bne.n	8002876 <_printf_common+0xda>
 800283e:	2000      	movs	r0, #0
 8002840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002844:	2301      	movs	r3, #1
 8002846:	4652      	mov	r2, sl
 8002848:	4639      	mov	r1, r7
 800284a:	4630      	mov	r0, r6
 800284c:	47c0      	blx	r8
 800284e:	3001      	adds	r0, #1
 8002850:	d103      	bne.n	800285a <_printf_common+0xbe>
 8002852:	f04f 30ff 	mov.w	r0, #4294967295
 8002856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800285a:	3501      	adds	r5, #1
 800285c:	e7c1      	b.n	80027e2 <_printf_common+0x46>
 800285e:	2030      	movs	r0, #48	; 0x30
 8002860:	18e1      	adds	r1, r4, r3
 8002862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800286c:	4422      	add	r2, r4
 800286e:	3302      	adds	r3, #2
 8002870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002874:	e7c3      	b.n	80027fe <_printf_common+0x62>
 8002876:	2301      	movs	r3, #1
 8002878:	4622      	mov	r2, r4
 800287a:	4639      	mov	r1, r7
 800287c:	4630      	mov	r0, r6
 800287e:	47c0      	blx	r8
 8002880:	3001      	adds	r0, #1
 8002882:	d0e6      	beq.n	8002852 <_printf_common+0xb6>
 8002884:	f109 0901 	add.w	r9, r9, #1
 8002888:	e7d7      	b.n	800283a <_printf_common+0x9e>
	...

0800288c <_printf_i>:
 800288c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002890:	4617      	mov	r7, r2
 8002892:	7e0a      	ldrb	r2, [r1, #24]
 8002894:	b085      	sub	sp, #20
 8002896:	2a6e      	cmp	r2, #110	; 0x6e
 8002898:	4698      	mov	r8, r3
 800289a:	4606      	mov	r6, r0
 800289c:	460c      	mov	r4, r1
 800289e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80028a4:	f000 80bc 	beq.w	8002a20 <_printf_i+0x194>
 80028a8:	d81a      	bhi.n	80028e0 <_printf_i+0x54>
 80028aa:	2a63      	cmp	r2, #99	; 0x63
 80028ac:	d02e      	beq.n	800290c <_printf_i+0x80>
 80028ae:	d80a      	bhi.n	80028c6 <_printf_i+0x3a>
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	f000 80c8 	beq.w	8002a46 <_printf_i+0x1ba>
 80028b6:	2a58      	cmp	r2, #88	; 0x58
 80028b8:	f000 808a 	beq.w	80029d0 <_printf_i+0x144>
 80028bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80028c4:	e02a      	b.n	800291c <_printf_i+0x90>
 80028c6:	2a64      	cmp	r2, #100	; 0x64
 80028c8:	d001      	beq.n	80028ce <_printf_i+0x42>
 80028ca:	2a69      	cmp	r2, #105	; 0x69
 80028cc:	d1f6      	bne.n	80028bc <_printf_i+0x30>
 80028ce:	6821      	ldr	r1, [r4, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80028d6:	d023      	beq.n	8002920 <_printf_i+0x94>
 80028d8:	1d11      	adds	r1, r2, #4
 80028da:	6019      	str	r1, [r3, #0]
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	e027      	b.n	8002930 <_printf_i+0xa4>
 80028e0:	2a73      	cmp	r2, #115	; 0x73
 80028e2:	f000 80b4 	beq.w	8002a4e <_printf_i+0x1c2>
 80028e6:	d808      	bhi.n	80028fa <_printf_i+0x6e>
 80028e8:	2a6f      	cmp	r2, #111	; 0x6f
 80028ea:	d02a      	beq.n	8002942 <_printf_i+0xb6>
 80028ec:	2a70      	cmp	r2, #112	; 0x70
 80028ee:	d1e5      	bne.n	80028bc <_printf_i+0x30>
 80028f0:	680a      	ldr	r2, [r1, #0]
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	600a      	str	r2, [r1, #0]
 80028f8:	e003      	b.n	8002902 <_printf_i+0x76>
 80028fa:	2a75      	cmp	r2, #117	; 0x75
 80028fc:	d021      	beq.n	8002942 <_printf_i+0xb6>
 80028fe:	2a78      	cmp	r2, #120	; 0x78
 8002900:	d1dc      	bne.n	80028bc <_printf_i+0x30>
 8002902:	2278      	movs	r2, #120	; 0x78
 8002904:	496f      	ldr	r1, [pc, #444]	; (8002ac4 <_printf_i+0x238>)
 8002906:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800290a:	e064      	b.n	80029d6 <_printf_i+0x14a>
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002912:	1d11      	adds	r1, r2, #4
 8002914:	6019      	str	r1, [r3, #0]
 8002916:	6813      	ldr	r3, [r2, #0]
 8002918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800291c:	2301      	movs	r3, #1
 800291e:	e0a3      	b.n	8002a68 <_printf_i+0x1dc>
 8002920:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002924:	f102 0104 	add.w	r1, r2, #4
 8002928:	6019      	str	r1, [r3, #0]
 800292a:	d0d7      	beq.n	80028dc <_printf_i+0x50>
 800292c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002930:	2b00      	cmp	r3, #0
 8002932:	da03      	bge.n	800293c <_printf_i+0xb0>
 8002934:	222d      	movs	r2, #45	; 0x2d
 8002936:	425b      	negs	r3, r3
 8002938:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800293c:	4962      	ldr	r1, [pc, #392]	; (8002ac8 <_printf_i+0x23c>)
 800293e:	220a      	movs	r2, #10
 8002940:	e017      	b.n	8002972 <_printf_i+0xe6>
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	f010 0f80 	tst.w	r0, #128	; 0x80
 800294a:	d003      	beq.n	8002954 <_printf_i+0xc8>
 800294c:	1d08      	adds	r0, r1, #4
 800294e:	6018      	str	r0, [r3, #0]
 8002950:	680b      	ldr	r3, [r1, #0]
 8002952:	e006      	b.n	8002962 <_printf_i+0xd6>
 8002954:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002958:	f101 0004 	add.w	r0, r1, #4
 800295c:	6018      	str	r0, [r3, #0]
 800295e:	d0f7      	beq.n	8002950 <_printf_i+0xc4>
 8002960:	880b      	ldrh	r3, [r1, #0]
 8002962:	2a6f      	cmp	r2, #111	; 0x6f
 8002964:	bf14      	ite	ne
 8002966:	220a      	movne	r2, #10
 8002968:	2208      	moveq	r2, #8
 800296a:	4957      	ldr	r1, [pc, #348]	; (8002ac8 <_printf_i+0x23c>)
 800296c:	2000      	movs	r0, #0
 800296e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002972:	6865      	ldr	r5, [r4, #4]
 8002974:	2d00      	cmp	r5, #0
 8002976:	60a5      	str	r5, [r4, #8]
 8002978:	f2c0 809c 	blt.w	8002ab4 <_printf_i+0x228>
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	f020 0004 	bic.w	r0, r0, #4
 8002982:	6020      	str	r0, [r4, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d13f      	bne.n	8002a08 <_printf_i+0x17c>
 8002988:	2d00      	cmp	r5, #0
 800298a:	f040 8095 	bne.w	8002ab8 <_printf_i+0x22c>
 800298e:	4675      	mov	r5, lr
 8002990:	2a08      	cmp	r2, #8
 8002992:	d10b      	bne.n	80029ac <_printf_i+0x120>
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	07da      	lsls	r2, r3, #31
 8002998:	d508      	bpl.n	80029ac <_printf_i+0x120>
 800299a:	6923      	ldr	r3, [r4, #16]
 800299c:	6862      	ldr	r2, [r4, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	bfde      	ittt	le
 80029a2:	2330      	movle	r3, #48	; 0x30
 80029a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029ac:	ebae 0305 	sub.w	r3, lr, r5
 80029b0:	6123      	str	r3, [r4, #16]
 80029b2:	f8cd 8000 	str.w	r8, [sp]
 80029b6:	463b      	mov	r3, r7
 80029b8:	aa03      	add	r2, sp, #12
 80029ba:	4621      	mov	r1, r4
 80029bc:	4630      	mov	r0, r6
 80029be:	f7ff feed 	bl	800279c <_printf_common>
 80029c2:	3001      	adds	r0, #1
 80029c4:	d155      	bne.n	8002a72 <_printf_i+0x1e6>
 80029c6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ca:	b005      	add	sp, #20
 80029cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029d0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80029d4:	493c      	ldr	r1, [pc, #240]	; (8002ac8 <_printf_i+0x23c>)
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80029de:	f100 0504 	add.w	r5, r0, #4
 80029e2:	601d      	str	r5, [r3, #0]
 80029e4:	d001      	beq.n	80029ea <_printf_i+0x15e>
 80029e6:	6803      	ldr	r3, [r0, #0]
 80029e8:	e002      	b.n	80029f0 <_printf_i+0x164>
 80029ea:	0655      	lsls	r5, r2, #25
 80029ec:	d5fb      	bpl.n	80029e6 <_printf_i+0x15a>
 80029ee:	8803      	ldrh	r3, [r0, #0]
 80029f0:	07d0      	lsls	r0, r2, #31
 80029f2:	bf44      	itt	mi
 80029f4:	f042 0220 	orrmi.w	r2, r2, #32
 80029f8:	6022      	strmi	r2, [r4, #0]
 80029fa:	b91b      	cbnz	r3, 8002a04 <_printf_i+0x178>
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	f022 0220 	bic.w	r2, r2, #32
 8002a02:	6022      	str	r2, [r4, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	e7b1      	b.n	800296c <_printf_i+0xe0>
 8002a08:	4675      	mov	r5, lr
 8002a0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002a0e:	fb02 3310 	mls	r3, r2, r0, r3
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d1f5      	bne.n	8002a0a <_printf_i+0x17e>
 8002a1e:	e7b7      	b.n	8002990 <_printf_i+0x104>
 8002a20:	6808      	ldr	r0, [r1, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a28:	6949      	ldr	r1, [r1, #20]
 8002a2a:	d004      	beq.n	8002a36 <_printf_i+0x1aa>
 8002a2c:	1d10      	adds	r0, r2, #4
 8002a2e:	6018      	str	r0, [r3, #0]
 8002a30:	6813      	ldr	r3, [r2, #0]
 8002a32:	6019      	str	r1, [r3, #0]
 8002a34:	e007      	b.n	8002a46 <_printf_i+0x1ba>
 8002a36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a3a:	f102 0004 	add.w	r0, r2, #4
 8002a3e:	6018      	str	r0, [r3, #0]
 8002a40:	6813      	ldr	r3, [r2, #0]
 8002a42:	d0f6      	beq.n	8002a32 <_printf_i+0x1a6>
 8002a44:	8019      	strh	r1, [r3, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	4675      	mov	r5, lr
 8002a4a:	6123      	str	r3, [r4, #16]
 8002a4c:	e7b1      	b.n	80029b2 <_printf_i+0x126>
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	1d11      	adds	r1, r2, #4
 8002a52:	6019      	str	r1, [r3, #0]
 8002a54:	6815      	ldr	r5, [r2, #0]
 8002a56:	2100      	movs	r1, #0
 8002a58:	6862      	ldr	r2, [r4, #4]
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f000 f836 	bl	8002acc <memchr>
 8002a60:	b108      	cbz	r0, 8002a66 <_printf_i+0x1da>
 8002a62:	1b40      	subs	r0, r0, r5
 8002a64:	6060      	str	r0, [r4, #4]
 8002a66:	6863      	ldr	r3, [r4, #4]
 8002a68:	6123      	str	r3, [r4, #16]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a70:	e79f      	b.n	80029b2 <_printf_i+0x126>
 8002a72:	6923      	ldr	r3, [r4, #16]
 8002a74:	462a      	mov	r2, r5
 8002a76:	4639      	mov	r1, r7
 8002a78:	4630      	mov	r0, r6
 8002a7a:	47c0      	blx	r8
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d0a2      	beq.n	80029c6 <_printf_i+0x13a>
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	079b      	lsls	r3, r3, #30
 8002a84:	d507      	bpl.n	8002a96 <_printf_i+0x20a>
 8002a86:	2500      	movs	r5, #0
 8002a88:	f104 0919 	add.w	r9, r4, #25
 8002a8c:	68e3      	ldr	r3, [r4, #12]
 8002a8e:	9a03      	ldr	r2, [sp, #12]
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	429d      	cmp	r5, r3
 8002a94:	db05      	blt.n	8002aa2 <_printf_i+0x216>
 8002a96:	68e0      	ldr	r0, [r4, #12]
 8002a98:	9b03      	ldr	r3, [sp, #12]
 8002a9a:	4298      	cmp	r0, r3
 8002a9c:	bfb8      	it	lt
 8002a9e:	4618      	movlt	r0, r3
 8002aa0:	e793      	b.n	80029ca <_printf_i+0x13e>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	4639      	mov	r1, r7
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	47c0      	blx	r8
 8002aac:	3001      	adds	r0, #1
 8002aae:	d08a      	beq.n	80029c6 <_printf_i+0x13a>
 8002ab0:	3501      	adds	r5, #1
 8002ab2:	e7eb      	b.n	8002a8c <_printf_i+0x200>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1a7      	bne.n	8002a08 <_printf_i+0x17c>
 8002ab8:	780b      	ldrb	r3, [r1, #0]
 8002aba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002abe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ac2:	e765      	b.n	8002990 <_printf_i+0x104>
 8002ac4:	08002d9a 	.word	0x08002d9a
 8002ac8:	08002d89 	.word	0x08002d89

08002acc <memchr>:
 8002acc:	b510      	push	{r4, lr}
 8002ace:	b2c9      	uxtb	r1, r1
 8002ad0:	4402      	add	r2, r0
 8002ad2:	4290      	cmp	r0, r2
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	d101      	bne.n	8002adc <memchr+0x10>
 8002ad8:	2000      	movs	r0, #0
 8002ada:	bd10      	pop	{r4, pc}
 8002adc:	781c      	ldrb	r4, [r3, #0]
 8002ade:	3001      	adds	r0, #1
 8002ae0:	428c      	cmp	r4, r1
 8002ae2:	d1f6      	bne.n	8002ad2 <memchr+0x6>
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <memcpy>:
 8002ae8:	b510      	push	{r4, lr}
 8002aea:	1e43      	subs	r3, r0, #1
 8002aec:	440a      	add	r2, r1
 8002aee:	4291      	cmp	r1, r2
 8002af0:	d100      	bne.n	8002af4 <memcpy+0xc>
 8002af2:	bd10      	pop	{r4, pc}
 8002af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002afc:	e7f7      	b.n	8002aee <memcpy+0x6>

08002afe <memmove>:
 8002afe:	4288      	cmp	r0, r1
 8002b00:	b510      	push	{r4, lr}
 8002b02:	eb01 0302 	add.w	r3, r1, r2
 8002b06:	d803      	bhi.n	8002b10 <memmove+0x12>
 8002b08:	1e42      	subs	r2, r0, #1
 8002b0a:	4299      	cmp	r1, r3
 8002b0c:	d10c      	bne.n	8002b28 <memmove+0x2a>
 8002b0e:	bd10      	pop	{r4, pc}
 8002b10:	4298      	cmp	r0, r3
 8002b12:	d2f9      	bcs.n	8002b08 <memmove+0xa>
 8002b14:	1881      	adds	r1, r0, r2
 8002b16:	1ad2      	subs	r2, r2, r3
 8002b18:	42d3      	cmn	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memmove+0x20>
 8002b1c:	bd10      	pop	{r4, pc}
 8002b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b22:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b26:	e7f7      	b.n	8002b18 <memmove+0x1a>
 8002b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b30:	e7eb      	b.n	8002b0a <memmove+0xc>
	...

08002b34 <_free_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4605      	mov	r5, r0
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d043      	beq.n	8002bc4 <_free_r+0x90>
 8002b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b40:	1f0c      	subs	r4, r1, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfb8      	it	lt
 8002b46:	18e4      	addlt	r4, r4, r3
 8002b48:	f000 f8d4 	bl	8002cf4 <__malloc_lock>
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <_free_r+0x94>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	4610      	mov	r0, r2
 8002b52:	b933      	cbnz	r3, 8002b62 <_free_r+0x2e>
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6014      	str	r4, [r2, #0]
 8002b58:	4628      	mov	r0, r5
 8002b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b5e:	f000 b8ca 	b.w	8002cf6 <__malloc_unlock>
 8002b62:	42a3      	cmp	r3, r4
 8002b64:	d90b      	bls.n	8002b7e <_free_r+0x4a>
 8002b66:	6821      	ldr	r1, [r4, #0]
 8002b68:	1862      	adds	r2, r4, r1
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	bf01      	itttt	eq
 8002b6e:	681a      	ldreq	r2, [r3, #0]
 8002b70:	685b      	ldreq	r3, [r3, #4]
 8002b72:	1852      	addeq	r2, r2, r1
 8002b74:	6022      	streq	r2, [r4, #0]
 8002b76:	6063      	str	r3, [r4, #4]
 8002b78:	6004      	str	r4, [r0, #0]
 8002b7a:	e7ed      	b.n	8002b58 <_free_r+0x24>
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	b10a      	cbz	r2, 8002b86 <_free_r+0x52>
 8002b82:	42a2      	cmp	r2, r4
 8002b84:	d9fa      	bls.n	8002b7c <_free_r+0x48>
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	1858      	adds	r0, r3, r1
 8002b8a:	42a0      	cmp	r0, r4
 8002b8c:	d10b      	bne.n	8002ba6 <_free_r+0x72>
 8002b8e:	6820      	ldr	r0, [r4, #0]
 8002b90:	4401      	add	r1, r0
 8002b92:	1858      	adds	r0, r3, r1
 8002b94:	4282      	cmp	r2, r0
 8002b96:	6019      	str	r1, [r3, #0]
 8002b98:	d1de      	bne.n	8002b58 <_free_r+0x24>
 8002b9a:	6810      	ldr	r0, [r2, #0]
 8002b9c:	6852      	ldr	r2, [r2, #4]
 8002b9e:	4401      	add	r1, r0
 8002ba0:	6019      	str	r1, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	e7d8      	b.n	8002b58 <_free_r+0x24>
 8002ba6:	d902      	bls.n	8002bae <_free_r+0x7a>
 8002ba8:	230c      	movs	r3, #12
 8002baa:	602b      	str	r3, [r5, #0]
 8002bac:	e7d4      	b.n	8002b58 <_free_r+0x24>
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	1821      	adds	r1, r4, r0
 8002bb2:	428a      	cmp	r2, r1
 8002bb4:	bf01      	itttt	eq
 8002bb6:	6811      	ldreq	r1, [r2, #0]
 8002bb8:	6852      	ldreq	r2, [r2, #4]
 8002bba:	1809      	addeq	r1, r1, r0
 8002bbc:	6021      	streq	r1, [r4, #0]
 8002bbe:	6062      	str	r2, [r4, #4]
 8002bc0:	605c      	str	r4, [r3, #4]
 8002bc2:	e7c9      	b.n	8002b58 <_free_r+0x24>
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2000008c 	.word	0x2000008c

08002bcc <_malloc_r>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	1ccd      	adds	r5, r1, #3
 8002bd0:	f025 0503 	bic.w	r5, r5, #3
 8002bd4:	3508      	adds	r5, #8
 8002bd6:	2d0c      	cmp	r5, #12
 8002bd8:	bf38      	it	cc
 8002bda:	250c      	movcc	r5, #12
 8002bdc:	2d00      	cmp	r5, #0
 8002bde:	4606      	mov	r6, r0
 8002be0:	db01      	blt.n	8002be6 <_malloc_r+0x1a>
 8002be2:	42a9      	cmp	r1, r5
 8002be4:	d903      	bls.n	8002bee <_malloc_r+0x22>
 8002be6:	230c      	movs	r3, #12
 8002be8:	6033      	str	r3, [r6, #0]
 8002bea:	2000      	movs	r0, #0
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
 8002bee:	f000 f881 	bl	8002cf4 <__malloc_lock>
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <_malloc_r+0xb4>)
 8002bf4:	6814      	ldr	r4, [r2, #0]
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	b991      	cbnz	r1, 8002c20 <_malloc_r+0x54>
 8002bfa:	4c22      	ldr	r4, [pc, #136]	; (8002c84 <_malloc_r+0xb8>)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	b91b      	cbnz	r3, 8002c08 <_malloc_r+0x3c>
 8002c00:	4630      	mov	r0, r6
 8002c02:	f000 f867 	bl	8002cd4 <_sbrk_r>
 8002c06:	6020      	str	r0, [r4, #0]
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f000 f862 	bl	8002cd4 <_sbrk_r>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d126      	bne.n	8002c62 <_malloc_r+0x96>
 8002c14:	230c      	movs	r3, #12
 8002c16:	4630      	mov	r0, r6
 8002c18:	6033      	str	r3, [r6, #0]
 8002c1a:	f000 f86c 	bl	8002cf6 <__malloc_unlock>
 8002c1e:	e7e4      	b.n	8002bea <_malloc_r+0x1e>
 8002c20:	680b      	ldr	r3, [r1, #0]
 8002c22:	1b5b      	subs	r3, r3, r5
 8002c24:	d41a      	bmi.n	8002c5c <_malloc_r+0x90>
 8002c26:	2b0b      	cmp	r3, #11
 8002c28:	d90f      	bls.n	8002c4a <_malloc_r+0x7e>
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	18cc      	adds	r4, r1, r3
 8002c2e:	50cd      	str	r5, [r1, r3]
 8002c30:	4630      	mov	r0, r6
 8002c32:	f000 f860 	bl	8002cf6 <__malloc_unlock>
 8002c36:	f104 000b 	add.w	r0, r4, #11
 8002c3a:	1d23      	adds	r3, r4, #4
 8002c3c:	f020 0007 	bic.w	r0, r0, #7
 8002c40:	1ac3      	subs	r3, r0, r3
 8002c42:	d01b      	beq.n	8002c7c <_malloc_r+0xb0>
 8002c44:	425a      	negs	r2, r3
 8002c46:	50e2      	str	r2, [r4, r3]
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	428c      	cmp	r4, r1
 8002c4c:	bf0b      	itete	eq
 8002c4e:	6863      	ldreq	r3, [r4, #4]
 8002c50:	684b      	ldrne	r3, [r1, #4]
 8002c52:	6013      	streq	r3, [r2, #0]
 8002c54:	6063      	strne	r3, [r4, #4]
 8002c56:	bf18      	it	ne
 8002c58:	460c      	movne	r4, r1
 8002c5a:	e7e9      	b.n	8002c30 <_malloc_r+0x64>
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	6849      	ldr	r1, [r1, #4]
 8002c60:	e7ca      	b.n	8002bf8 <_malloc_r+0x2c>
 8002c62:	1cc4      	adds	r4, r0, #3
 8002c64:	f024 0403 	bic.w	r4, r4, #3
 8002c68:	42a0      	cmp	r0, r4
 8002c6a:	d005      	beq.n	8002c78 <_malloc_r+0xac>
 8002c6c:	1a21      	subs	r1, r4, r0
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f000 f830 	bl	8002cd4 <_sbrk_r>
 8002c74:	3001      	adds	r0, #1
 8002c76:	d0cd      	beq.n	8002c14 <_malloc_r+0x48>
 8002c78:	6025      	str	r5, [r4, #0]
 8002c7a:	e7d9      	b.n	8002c30 <_malloc_r+0x64>
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000008c 	.word	0x2000008c
 8002c84:	20000090 	.word	0x20000090

08002c88 <_realloc_r>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	4607      	mov	r7, r0
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	460e      	mov	r6, r1
 8002c90:	b921      	cbnz	r1, 8002c9c <_realloc_r+0x14>
 8002c92:	4611      	mov	r1, r2
 8002c94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c98:	f7ff bf98 	b.w	8002bcc <_malloc_r>
 8002c9c:	b922      	cbnz	r2, 8002ca8 <_realloc_r+0x20>
 8002c9e:	f7ff ff49 	bl	8002b34 <_free_r>
 8002ca2:	4625      	mov	r5, r4
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ca8:	f000 f826 	bl	8002cf8 <_malloc_usable_size_r>
 8002cac:	4284      	cmp	r4, r0
 8002cae:	d90f      	bls.n	8002cd0 <_realloc_r+0x48>
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	f7ff ff8a 	bl	8002bcc <_malloc_r>
 8002cb8:	4605      	mov	r5, r0
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d0f2      	beq.n	8002ca4 <_realloc_r+0x1c>
 8002cbe:	4631      	mov	r1, r6
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	f7ff ff11 	bl	8002ae8 <memcpy>
 8002cc6:	4631      	mov	r1, r6
 8002cc8:	4638      	mov	r0, r7
 8002cca:	f7ff ff33 	bl	8002b34 <_free_r>
 8002cce:	e7e9      	b.n	8002ca4 <_realloc_r+0x1c>
 8002cd0:	4635      	mov	r5, r6
 8002cd2:	e7e7      	b.n	8002ca4 <_realloc_r+0x1c>

08002cd4 <_sbrk_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4c05      	ldr	r4, [pc, #20]	; (8002cf0 <_sbrk_r+0x1c>)
 8002cda:	4605      	mov	r5, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	f000 f814 	bl	8002d0c <_sbrk>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_sbrk_r+0x1a>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_sbrk_r+0x1a>
 8002cec:	602b      	str	r3, [r5, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	20000118 	.word	0x20000118

08002cf4 <__malloc_lock>:
 8002cf4:	4770      	bx	lr

08002cf6 <__malloc_unlock>:
 8002cf6:	4770      	bx	lr

08002cf8 <_malloc_usable_size_r>:
 8002cf8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	f1a0 0004 	sub.w	r0, r0, #4
 8002d02:	bfbc      	itt	lt
 8002d04:	580b      	ldrlt	r3, [r1, r0]
 8002d06:	18c0      	addlt	r0, r0, r3
 8002d08:	4770      	bx	lr
	...

08002d0c <_sbrk>:
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <_sbrk+0x14>)
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	b909      	cbnz	r1, 8002d18 <_sbrk+0xc>
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <_sbrk+0x18>)
 8002d16:	6019      	str	r1, [r3, #0]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	4402      	add	r2, r0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	4770      	bx	lr
 8002d20:	20000094 	.word	0x20000094
 8002d24:	20000120 	.word	0x20000120

08002d28 <_init>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr

08002d34 <_fini>:
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	bf00      	nop
 8002d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3a:	bc08      	pop	{r3}
 8002d3c:	469e      	mov	lr, r3
 8002d3e:	4770      	bx	lr
