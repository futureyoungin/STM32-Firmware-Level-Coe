
03_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080020b4  080020b4  000120b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080020e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  2000000c  080020f4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a8  080020f4  000200a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000668b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001857  00000000  00000000  000266c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007b8  00000000  00000000  00027f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  000286d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004357  00000000  00000000  00028d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002397  00000000  00000000  0002d0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f46e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c84  00000000  00000000  0002f4ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800209c 	.word	0x0800209c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800209c 	.word	0x0800209c

0800014c <apInit>:
 */


#include "ap.h"

void apInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8000150:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000154:	2000      	movs	r0, #0
 8000156:	f000 f9bf 	bl	80004d8 <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}

0800015e <SystemClock_Config>:
 */

#include "bsp.h"

void SystemClock_Config(void)
{
 800015e:	b580      	push	{r7, lr}
 8000160:	b090      	sub	sp, #64	; 0x40
 8000162:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
 800016c:	605a      	str	r2, [r3, #4]
 800016e:	609a      	str	r2, [r3, #8]
 8000170:	60da      	str	r2, [r3, #12]
 8000172:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000174:	1d3b      	adds	r3, r7, #4
 8000176:	2228      	movs	r2, #40	; 0x28
 8000178:	2100      	movs	r1, #0
 800017a:	4618      	mov	r0, r3
 800017c:	f001 ff86 	bl	800208c <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000180:	2302      	movs	r3, #2
 8000182:	607b      	str	r3, [r7, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
  oscinitstruct.LSEState        = RCC_LSE_OFF;
 8000188:	2300      	movs	r3, #0
 800018a:	613b      	str	r3, [r7, #16]
  oscinitstruct.HSIState        = RCC_HSI_ON;
 800018c:	2301      	movs	r3, #1
 800018e:	617b      	str	r3, [r7, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000190:	2310      	movs	r3, #16
 8000192:	61bb      	str	r3, [r7, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 8000194:	2300      	movs	r3, #0
 8000196:	60fb      	str	r3, [r7, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 8000198:	2302      	movs	r3, #2
 800019a:	623b      	str	r3, [r7, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
 800019c:	2300      	movs	r3, #0
 800019e:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80001a0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4618      	mov	r0, r3
 80001aa:	f000 ff59 	bl	8001060 <HAL_RCC_OscConfig>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d000      	beq.n	80001b6 <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    while(1);
 80001b4:	e7fe      	b.n	80001b4 <SystemClock_Config+0x56>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001b6:	230f      	movs	r3, #15
 80001b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ba:	2302      	movs	r3, #2
 80001bc:	633b      	str	r3, [r7, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001be:	2300      	movs	r3, #0
 80001c0:	637b      	str	r3, [r7, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80001d0:	2102      	movs	r1, #2
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 f9c4 	bl	8001560 <HAL_RCC_ClockConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d000      	beq.n	80001e0 <SystemClock_Config+0x82>
  {
    /* Initialization Error */
    while(1);
 80001de:	e7fe      	b.n	80001de <SystemClock_Config+0x80>
  }
}
 80001e0:	bf00      	nop
 80001e2:	3740      	adds	r7, #64	; 0x40
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <bspInit>:




void bspInit(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
    HAL_Init();
 80001ee:	f000 fb01 	bl	80007f4 <HAL_Init>

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
 80001f2:	f7ff ffb4 	bl	800015e <SystemClock_Config>

    /* Led connected to GPIOA port, so to use the GPIOA port Activate the clock. */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f6:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <bspInit+0x48>)
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <bspInit+0x48>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f043 0304 	orr.w	r3, r3, #4
 8000200:	6193      	str	r3, [r2, #24]
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <bspInit+0x48>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	f003 0304 	and.w	r3, r3, #4
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]


    /* GPIOC Clock Enable Function. */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800020e:	4a08      	ldr	r2, [pc, #32]	; (8000230 <bspInit+0x48>)
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <bspInit+0x48>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f043 0310 	orr.w	r3, r3, #16
 8000218:	6193      	str	r3, [r2, #24]
 800021a:	4b05      	ldr	r3, [pc, #20]	; (8000230 <bspInit+0x48>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	f003 0310 	and.w	r3, r3, #16
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]
}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000

08000234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <SystemInit+0x5c>)
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <SystemInit+0x5c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000244:	4912      	ldr	r1, [pc, #72]	; (8000290 <SystemInit+0x5c>)
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <SystemInit+0x5c>)
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <SystemInit+0x60>)
 800024c:	4013      	ands	r3, r2
 800024e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <SystemInit+0x5c>)
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <SystemInit+0x5c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800025a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800025e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000260:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <SystemInit+0x5c>)
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <SystemInit+0x5c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800026a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800026c:	4a08      	ldr	r2, [pc, #32]	; (8000290 <SystemInit+0x5c>)
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <SystemInit+0x5c>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000276:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <SystemInit+0x5c>)
 800027a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800027e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <SystemInit+0x64>)
 8000282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000286:	609a      	str	r2, [r3, #8]
#endif 
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40021000 	.word	0x40021000
 8000294:	f8ff0000 	.word	0xf8ff0000
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800029c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800029e:	e003      	b.n	80002a8 <LoopCopyDataInit>

080002a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80002a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80002a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80002a6:	3104      	adds	r1, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80002a8:	480a      	ldr	r0, [pc, #40]	; (80002d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80002ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80002ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80002b0:	d3f6      	bcc.n	80002a0 <CopyDataInit>
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80002b4:	e002      	b.n	80002bc <LoopFillZerobss>

080002b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80002b8:	f842 3b04 	str.w	r3, [r2], #4

080002bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80002be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002c0:	d3f9      	bcc.n	80002b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002c2:	f7ff ffb7 	bl	8000234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002c6:	f001 febd 	bl	8002044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f001 feb1 	bl	8002030 <main>
  bx lr
 80002ce:	4770      	bx	lr
  ldr r3, =_sidata
 80002d0:	080020e8 	.word	0x080020e8
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80002dc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80002e0:	200000a8 	.word	0x200000a8

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>

080002e6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr

080002f2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <HardFault_Handler+0x4>

080002f8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <MemManage_Handler+0x4>

080002fe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000302:	e7fe      	b.n	8000302 <BusFault_Handler+0x4>

08000304 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler+0x4>

0800030a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr

08000316 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000332:	f000 faab 	bl	800088c <HAL_IncTick>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}

0800033a <qbufferCreate>:

void qbufferInit(void){

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length){
 800033a:	b480      	push	{r7}
 800033c:	b087      	sub	sp, #28
 800033e:	af00      	add	r7, sp, #0
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	60b9      	str	r1, [r7, #8]
 8000344:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000346:	2301      	movs	r3, #1
 8000348:	75fb      	strb	r3, [r7, #23]

  p_node->ptr_in = 0;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
  p_node->length = length;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	60da      	str	r2, [r3, #12]

  if(p_node->p_buf == NULL){
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d104      	bne.n	8000374 <qbufferCreate+0x3a>
    p_node->length = 0;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
    ret = false;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
} // If the buffer is made successfully, return true or not false.
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length){
 8000380:	b480      	push	{r7}
 8000382:	b089      	sub	sp, #36	; 0x24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800038c:	2301      	movs	r3, #1
 800038e:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d101      	bne.n	800039c <qbufferWrite+0x1c>
 8000398:	2300      	movs	r3, #0
 800039a:	e02d      	b.n	80003f8 <qbufferWrite+0x78>

  for(i = 0; i<length; i++){
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	e025      	b.n	80003ee <qbufferWrite+0x6e>
    index      = p_node->ptr_in;
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]

    if(next_index == p_node->length){ // if the index is end of the buffer.
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d101      	bne.n	80003be <qbufferWrite+0x3e>
      next_index = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
    }
    if(next_index != p_node-> ptr_out){  // the buffer is not full.
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	69bb      	ldr	r3, [r7, #24]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d00c      	beq.n	80003e2 <qbufferWrite+0x62>
      p_node->p_buf[index] = p_data[i];
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	4413      	add	r3, r2
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	440a      	add	r2, r1
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	69ba      	ldr	r2, [r7, #24]
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	e002      	b.n	80003e8 <qbufferWrite+0x68>
    }
    else{                                // the buffer is full. ERR_FULL
      ret = false;
 80003e2:	2300      	movs	r3, #0
 80003e4:	77fb      	strb	r3, [r7, #31]
      break;
 80003e6:	e006      	b.n	80003f6 <qbufferWrite+0x76>
  for(i = 0; i<length; i++){
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d3d5      	bcc.n	80003a2 <qbufferWrite+0x22>
    }
  }
  return ret;
 80003f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3724      	adds	r7, #36	; 0x24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <qbufferFlush>:
  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;

  return length;
}

void qbufferFlush(qbuffer_t *p_node){
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  p_node->ptr_in =0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <buttonInit>:


#include "button.h"

void buttonInit(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000436:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	463b      	mov	r3, r7
 800043a:	4619      	mov	r1, r3
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <buttonInit+0x2c>)
 800043e:	f000 fbf9 	bl	8000c34 <HAL_GPIO_Init>
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40011000 	.word	0x40011000

08000450 <ledInit>:
 */


#include "led.h"

void ledInit(void){ //Setting the GPIO Pin to use the LED
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800045a:	2301      	movs	r3, #1
 800045c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	2303      	movs	r3, #3
 8000460:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5; //LED Pin Number 5
 8000462:	2320      	movs	r3, #32
 8000464:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	463b      	mov	r3, r7
 8000468:	4619      	mov	r1, r3
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <ledInit+0x28>)
 800046c:	f000 fbe2 	bl	8000c34 <HAL_GPIO_Init>
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010800 	.word	0x40010800

0800047c <uartInit>:

static void uartStartRx(uint8_t channel);
static void uartRxHandler(uint8_t channel);

void uartInit(void)                               //Initialize the UART.
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e01c      	b.n	80004c2 <uartInit+0x46>
  {
    uart_tbl[i].is_open = false;
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <uartInit+0x58>)
 800048c:	216c      	movs	r1, #108	; 0x6c
 800048e:	fb01 f303 	mul.w	r3, r1, r3
 8000492:	4413      	add	r3, r2
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <uartInit+0x58>)
 800049c:	216c      	movs	r1, #108	; 0x6c
 800049e:	fb01 f303 	mul.w	r3, r1, r3
 80004a2:	4413      	add	r3, r2
 80004a4:	3309      	adds	r3, #9
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4a09      	ldr	r2, [pc, #36]	; (80004d4 <uartInit+0x58>)
 80004ae:	216c      	movs	r1, #108	; 0x6c
 80004b0:	fb01 f303 	mul.w	r3, r1, r3
 80004b4:	4413      	add	r3, r2
 80004b6:	3308      	adds	r3, #8
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	3301      	adds	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0df      	beq.n	8000488 <uartInit+0xc>
  }
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000028 	.word	0x20000028

080004d8 <uartOpen>:



bool uartOpen(uint8_t channel, uint32_t baud){  // Open the UART of the channel.
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;
  switch(channel){
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d147      	bne.n	800057e <uartOpen+0xa6>
    case _DEF_UART1 :
      p_uart = &uart_tbl[channel];
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	226c      	movs	r2, #108	; 0x6c
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
 80004f6:	4a24      	ldr	r2, [pc, #144]	; (8000588 <uartOpen+0xb0>)
 80004f8:	4413      	add	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]

      p_uart->handle.Instance        = USART2;
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	4a23      	ldr	r2, [pc, #140]	; (800058c <uartOpen+0xb4>)
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
      p_uart->handle.Init.BaudRate   = baud;
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	2200      	movs	r2, #0
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	2200      	movs	r2, #0
 8000512:	639a      	str	r2, [r3, #56]	; 0x38
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2200      	movs	r2, #0
 8000518:	63da      	str	r2, [r3, #60]	; 0x3c
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	2200      	movs	r2, #0
 800051e:	645a      	str	r2, [r3, #68]	; 0x44
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	220c      	movs	r2, #12
 8000524:	641a      	str	r2, [r3, #64]	; 0x40

      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK){
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	332c      	adds	r3, #44	; 0x2c
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fa01 	bl	8001932 <HAL_UART_DeInit>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d120      	bne.n	8000578 <uartOpen+0xa0>
        break;
      }
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK){
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	332c      	adds	r3, #44	; 0x2c
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f9ac 	bl	8001898 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d11a      	bne.n	800057c <uartOpen+0xa4>
        break;
      }
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	f103 001c 	add.w	r0, r3, #28
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <uartOpen+0xb8>)
 8000552:	4413      	add	r3, r2
 8000554:	2210      	movs	r2, #16
 8000556:	4619      	mov	r1, r3
 8000558:	f7ff feef 	bl	800033a <qbufferCreate>

      p_uart->rx_mode = UART_MODE_INTERRUPT;
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	2201      	movs	r2, #1
 8000560:	725a      	strb	r2, [r3, #9]
      p_uart->baud    = baud;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	605a      	str	r2, [r3, #4]
      p_uart->is_open = true;
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f80f 	bl	8000594 <uartStartRx>
      break;
 8000576:	e002      	b.n	800057e <uartOpen+0xa6>
        break;
 8000578:	bf00      	nop
 800057a:	e000      	b.n	800057e <uartOpen+0xa6>
        break;
 800057c:	bf00      	nop
  }
  return ret;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000028 	.word	0x20000028
 800058c:	40004400 	.word	0x40004400
 8000590:	20000094 	.word	0x20000094

08000594 <uartStartRx>:

void uartStartRx(uint8_t channel){
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

  uart_t *p_uart =  &uart_tbl[channel];     // channel to uart.
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	226c      	movs	r2, #108	; 0x6c
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <uartStartRx+0x3c>)
 80005a8:	4413      	add	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]

  if(p_uart->rx_mode == UART_MODE_INTERRUPT){
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	7a5b      	ldrb	r3, [r3, #9]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d108      	bne.n	80005c6 <uartStartRx+0x32>
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	330a      	adds	r3, #10
 80005be:	2201      	movs	r2, #1
 80005c0:	4619      	mov	r1, r3
 80005c2:	f001 f9e2 	bl	800198a <HAL_UART_Receive_IT>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028

080005d4 <uartFlush>:
  if(channel >= UART_MAX_CH)
    return 0;
  return qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
}

void uartFlush(uint8_t channel){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
  if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT){
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <uartFlush+0x3c>)
 80005e2:	216c      	movs	r1, #108	; 0x6c
 80005e4:	fb01 f303 	mul.w	r3, r1, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	3309      	adds	r3, #9
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d10a      	bne.n	8000608 <uartFlush+0x34>
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	226c      	movs	r2, #108	; 0x6c
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	3318      	adds	r3, #24
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <uartFlush+0x3c>)
 80005fe:	4413      	add	r3, r2
 8000600:	3304      	adds	r3, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fefd 	bl	8000402 <qbufferFlush>
  }
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028

08000614 <uartRxHandler>:

  return ret;
}

void uartRxHandler(uint8_t channel)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	226c      	movs	r2, #108	; 0x6c
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <uartRxHandler+0x4c>)
 8000628:	4413      	add	r3, r2
 800062a:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	7a5b      	ldrb	r3, [r3, #9]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d110      	bne.n	8000656 <uartRxHandler+0x42>
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f103 001c 	add.w	r0, r3, #28
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	330a      	adds	r3, #10
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	f7ff fe9d 	bl	8000380 <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      uartStartRx(channel);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff9f 	bl	8000594 <uartStartRx>
  }
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000028 	.word	0x20000028

08000664 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  uartFlush(channel);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffaf 	bl	80005d4 <uartFlush>
  uartStartRx(channel);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff8b 	bl	8000594 <uartStartRx>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART2)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_UART_RxCpltCallback+0x20>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d102      	bne.n	80006a0 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxHandler(_DEF_UART1);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffba 	bl	8000614 <uartRxHandler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40004400 	.word	0x40004400

080006ac <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  HAL_UART_DeInit(UartHandle);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f001 f93c 	bl	8001932 <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f001 f8ec 	bl	8001898 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_UART_ErrorCallback+0x2c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d102      	bne.n	80006d0 <HAL_UART_ErrorCallback+0x24>
  {
    uartErrHandler(_DEF_UART1);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ffca 	bl	8000664 <uartErrHandler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40004400 	.word	0x40004400

080006dc <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <USART2_IRQHandler+0x10>)
 80006e2:	f001 f9a7 	bl	8001a34 <HAL_UART_IRQHandler>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000054 	.word	0x20000054

080006f0 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1f      	ldr	r2, [pc, #124]	; (800077c <HAL_UART_MspInit+0x8c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d137      	bne.n	8000772 <HAL_UART_MspInit+0x82>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <HAL_UART_MspInit+0x90>)
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <HAL_UART_MspInit+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_UART_MspInit+0x90>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_UART_MspInit+0x90>)
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_UART_MspInit+0x90>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <HAL_UART_MspInit+0x90>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8000732:	2304      	movs	r3, #4
 8000734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <HAL_UART_MspInit+0x94>)
 800074a:	f000 fa73 	bl	8000c34 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 800074e:	2308      	movs	r3, #8
 8000750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <HAL_UART_MspInit+0x94>)
 800075e:	f000 fa69 	bl	8000c34 <HAL_GPIO_Init>

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2100      	movs	r1, #0
 8000766:	2026      	movs	r0, #38	; 0x26
 8000768:	f000 f9a3 	bl	8000ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800076c:	2026      	movs	r0, #38	; 0x26
 800076e:	f000 f9bc 	bl	8000aea <HAL_NVIC_EnableIRQ>
  }
}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40004400 	.word	0x40004400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800

08000788 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <HAL_UART_MspDeInit+0x48>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d116      	bne.n	80007c8 <HAL_UART_MspDeInit+0x40>
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_UART_MspDeInit+0x4c>)
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_UART_MspDeInit+0x4c>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <HAL_UART_MspDeInit+0x4c>)
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_UART_MspDeInit+0x4c>)
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007b0:	6113      	str	r3, [r2, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80007b2:	2104      	movs	r1, #4
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <HAL_UART_MspDeInit+0x50>)
 80007b6:	f000 fb97 	bl	8000ee8 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 80007ba:	2108      	movs	r1, #8
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <HAL_UART_MspDeInit+0x50>)
 80007be:	f000 fb93 	bl	8000ee8 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80007c2:	2026      	movs	r0, #38	; 0x26
 80007c4:	f000 f99f 	bl	8000b06 <HAL_NVIC_DisableIRQ>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010800 	.word	0x40010800

080007dc <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  bspInit();
 80007e0:	f7ff fd02 	bl	80001e8 <bspInit>

  ledInit();
 80007e4:	f7ff fe34 	bl	8000450 <ledInit>
  buttonInit();
 80007e8:	f7ff fe1a 	bl	8000420 <buttonInit>
  uartInit();
 80007ec:	f7ff fe46 	bl	800047c <uartInit>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f949 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	200f      	movs	r0, #15
 800080c:	f000 f80e 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f000 f806 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f969 	bl	8000b22 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f923 	bl	8000ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <HAL_IncTick+0x20>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000008 	.word	0x20000008
 80008ac:	200000a4 	.word	0x200000a4

080008b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <HAL_GetTick+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	200000a4 	.word	0x200000a4

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	db0b      	blt.n	8000952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_EnableIRQ+0x34>)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	095b      	lsrs	r3, r3, #5
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	f002 021f 	and.w	r2, r2, #31
 8000948:	2001      	movs	r0, #1
 800094a:	fa00 f202 	lsl.w	r2, r0, r2
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100

08000960 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db10      	blt.n	8000994 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	490b      	ldr	r1, [pc, #44]	; (80009a0 <__NVIC_DisableIRQ+0x40>)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	095b      	lsrs	r3, r3, #5
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	f002 021f 	and.w	r2, r2, #31
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	3320      	adds	r3, #32
 8000988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800098c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000990:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	490d      	ldr	r1, [pc, #52]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	4909      	ldr	r1, [pc, #36]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	1e5a      	subs	r2, r3, #1
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	401a      	ands	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3e:	2101      	movs	r1, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	1e59      	subs	r1, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a68:	d301      	bcc.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00f      	b.n	8000a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <SysTick_Config+0x40>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	210f      	movs	r1, #15
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f7ff ff92 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SysTick_Config+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SysTick_Config+0x40>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff0d 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff22 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ff92 	bl	80009f8 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff61 	bl	80009a4 <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff15 	bl	8000928 <__NVIC_EnableIRQ>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff23 	bl	8000960 <__NVIC_DisableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ff94 	bl	8000a58 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d005      	beq.n	8000b5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2204      	movs	r2, #4
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e057      	b.n	8000c0e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	f022 020e 	bic.w	r2, r2, #14
 8000b6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	f022 0201 	bic.w	r2, r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b7e:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_DMA_Abort_IT+0xdc>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <HAL_DMA_Abort_IT+0xe0>)
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d02e      	beq.n	8000bea <HAL_DMA_Abort_IT+0xae>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_DMA_Abort_IT+0xe4>)
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d026      	beq.n	8000be6 <HAL_DMA_Abort_IT+0xaa>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_DMA_Abort_IT+0xe8>)
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d01d      	beq.n	8000be0 <HAL_DMA_Abort_IT+0xa4>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <HAL_DMA_Abort_IT+0xec>)
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d014      	beq.n	8000bda <HAL_DMA_Abort_IT+0x9e>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_DMA_Abort_IT+0xf0>)
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d00b      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0x98>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_DMA_Abort_IT+0xf4>)
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d102      	bne.n	8000bce <HAL_DMA_Abort_IT+0x92>
 8000bc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bcc:	e00e      	b.n	8000bec <HAL_DMA_Abort_IT+0xb0>
 8000bce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bd2:	e00b      	b.n	8000bec <HAL_DMA_Abort_IT+0xb0>
 8000bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd8:	e008      	b.n	8000bec <HAL_DMA_Abort_IT+0xb0>
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	e005      	b.n	8000bec <HAL_DMA_Abort_IT+0xb0>
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	e002      	b.n	8000bec <HAL_DMA_Abort_IT+0xb0>
 8000be6:	2310      	movs	r3, #16
 8000be8:	e000      	b.n	8000bec <HAL_DMA_Abort_IT+0xb0>
 8000bea:	2301      	movs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	4798      	blx	r3
    } 
  }
  return status;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40020008 	.word	0x40020008
 8000c20:	4002001c 	.word	0x4002001c
 8000c24:	40020030 	.word	0x40020030
 8000c28:	40020044 	.word	0x40020044
 8000c2c:	40020058 	.word	0x40020058
 8000c30:	4002006c 	.word	0x4002006c

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b08b      	sub	sp, #44	; 0x2c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	e127      	b.n	8000e98 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f040 8116 	bne.w	8000e92 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d034      	beq.n	8000cd8 <HAL_GPIO_Init+0xa4>
 8000c6e:	2b12      	cmp	r3, #18
 8000c70:	d80d      	bhi.n	8000c8e <HAL_GPIO_Init+0x5a>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d02b      	beq.n	8000cce <HAL_GPIO_Init+0x9a>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d804      	bhi.n	8000c84 <HAL_GPIO_Init+0x50>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d031      	beq.n	8000ce2 <HAL_GPIO_Init+0xae>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d01c      	beq.n	8000cbc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c82:	e048      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d043      	beq.n	8000d10 <HAL_GPIO_Init+0xdc>
 8000c88:	2b11      	cmp	r3, #17
 8000c8a:	d01b      	beq.n	8000cc4 <HAL_GPIO_Init+0x90>
          break;
 8000c8c:	e043      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c8e:	4a89      	ldr	r2, [pc, #548]	; (8000eb4 <HAL_GPIO_Init+0x280>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d026      	beq.n	8000ce2 <HAL_GPIO_Init+0xae>
 8000c94:	4a87      	ldr	r2, [pc, #540]	; (8000eb4 <HAL_GPIO_Init+0x280>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d806      	bhi.n	8000ca8 <HAL_GPIO_Init+0x74>
 8000c9a:	4a87      	ldr	r2, [pc, #540]	; (8000eb8 <HAL_GPIO_Init+0x284>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d020      	beq.n	8000ce2 <HAL_GPIO_Init+0xae>
 8000ca0:	4a86      	ldr	r2, [pc, #536]	; (8000ebc <HAL_GPIO_Init+0x288>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d01d      	beq.n	8000ce2 <HAL_GPIO_Init+0xae>
          break;
 8000ca6:	e036      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ca8:	4a85      	ldr	r2, [pc, #532]	; (8000ec0 <HAL_GPIO_Init+0x28c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d019      	beq.n	8000ce2 <HAL_GPIO_Init+0xae>
 8000cae:	4a85      	ldr	r2, [pc, #532]	; (8000ec4 <HAL_GPIO_Init+0x290>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d016      	beq.n	8000ce2 <HAL_GPIO_Init+0xae>
 8000cb4:	4a84      	ldr	r2, [pc, #528]	; (8000ec8 <HAL_GPIO_Init+0x294>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0xae>
          break;
 8000cba:	e02c      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e028      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e023      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e01e      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	330c      	adds	r3, #12
 8000cde:	623b      	str	r3, [r7, #32]
          break;
 8000ce0:	e019      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cea:	2304      	movs	r3, #4
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e012      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d105      	bne.n	8000d04 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	611a      	str	r2, [r3, #16]
          break;
 8000d02:	e008      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	615a      	str	r2, [r3, #20]
          break;
 8000d0e:	e002      	b.n	8000d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
          break;
 8000d14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d801      	bhi.n	8000d20 <HAL_GPIO_Init+0xec>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	e001      	b.n	8000d24 <HAL_GPIO_Init+0xf0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3304      	adds	r3, #4
 8000d24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2bff      	cmp	r3, #255	; 0xff
 8000d2a:	d802      	bhi.n	8000d32 <HAL_GPIO_Init+0xfe>
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_Init+0x104>
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	3b08      	subs	r3, #8
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	210f      	movs	r1, #15
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	401a      	ands	r2, r3
 8000d4a:	6a39      	ldr	r1, [r7, #32]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	431a      	orrs	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 8096 	beq.w	8000e92 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d66:	4a59      	ldr	r2, [pc, #356]	; (8000ecc <HAL_GPIO_Init+0x298>)
 8000d68:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <HAL_GPIO_Init+0x298>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <HAL_GPIO_Init+0x298>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d7e:	4a54      	ldr	r2, [pc, #336]	; (8000ed0 <HAL_GPIO_Init+0x29c>)
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	220f      	movs	r2, #15
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4b      	ldr	r2, [pc, #300]	; (8000ed4 <HAL_GPIO_Init+0x2a0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x19e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x2a4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x19a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a49      	ldr	r2, [pc, #292]	; (8000edc <HAL_GPIO_Init+0x2a8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x196>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a48      	ldr	r2, [pc, #288]	; (8000ee0 <HAL_GPIO_Init+0x2ac>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x192>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x1a0>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x1a0>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x1a0>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x1a0>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de4:	493a      	ldr	r1, [pc, #232]	; (8000ed0 <HAL_GPIO_Init+0x29c>)
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfe:	4939      	ldr	r1, [pc, #228]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4013      	ands	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e26:	492f      	ldr	r1, [pc, #188]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	604b      	str	r3, [r1, #4]
 8000e32:	e006      	b.n	8000e42 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e34:	492b      	ldr	r1, [pc, #172]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4013      	ands	r3, r2
 8000e40:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e4e:	4925      	ldr	r1, [pc, #148]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	608b      	str	r3, [r1, #8]
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5c:	4921      	ldr	r1, [pc, #132]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4013      	ands	r3, r2
 8000e68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e76:	491b      	ldr	r1, [pc, #108]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60cb      	str	r3, [r1, #12]
 8000e82:	e006      	b.n	8000e92 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e84:	4917      	ldr	r1, [pc, #92]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	3301      	adds	r3, #1
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f47f aed0 	bne.w	8000c48 <HAL_GPIO_Init+0x14>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	372c      	adds	r7, #44	; 0x2c
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	10210000 	.word	0x10210000
 8000eb8:	10110000 	.word	0x10110000
 8000ebc:	10120000 	.word	0x10120000
 8000ec0:	10310000 	.word	0x10310000
 8000ec4:	10320000 	.word	0x10320000
 8000ec8:	10220000 	.word	0x10220000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40011400 	.word	0x40011400
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000ef6:	e09a      	b.n	800102e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	409a      	lsls	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 808e 	beq.w	8001028 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <HAL_GPIO_DeInit+0x160>)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_GPIO_DeInit+0x164>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_DeInit+0x76>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a45      	ldr	r2, [pc, #276]	; (8001050 <HAL_GPIO_DeInit+0x168>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_DeInit+0x72>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a44      	ldr	r2, [pc, #272]	; (8001054 <HAL_GPIO_DeInit+0x16c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_DeInit+0x6e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a43      	ldr	r2, [pc, #268]	; (8001058 <HAL_GPIO_DeInit+0x170>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_DeInit+0x6a>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_DeInit+0x78>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_DeInit+0x78>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_DeInit+0x78>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_DeInit+0x78>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	fa03 f202 	lsl.w	r2, r3, r2
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d132      	bne.n	8000fd8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000f82:	4831      	ldr	r0, [pc, #196]	; (8001048 <HAL_GPIO_DeInit+0x160>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	492f      	ldr	r1, [pc, #188]	; (8001048 <HAL_GPIO_DeInit+0x160>)
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	0892      	lsrs	r2, r2, #2
 8000f8e:	3202      	adds	r2, #2
 8000f90:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	43d2      	mvns	r2, r2
 8000f98:	400a      	ands	r2, r1
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000fa0:	492e      	ldr	r1, [pc, #184]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4013      	ands	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000fae:	492b      	ldr	r1, [pc, #172]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000fbc:	4927      	ldr	r1, [pc, #156]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000fca:	4924      	ldr	r1, [pc, #144]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_GPIO_DeInit+0x174>)
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d801      	bhi.n	8000fe2 <HAL_GPIO_DeInit+0xfa>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	e001      	b.n	8000fe6 <HAL_GPIO_DeInit+0xfe>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2bff      	cmp	r3, #255	; 0xff
 8000fec:	d802      	bhi.n	8000ff4 <HAL_GPIO_DeInit+0x10c>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_DeInit+0x112>
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	3b08      	subs	r3, #8
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	210f      	movs	r1, #15
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	2104      	movs	r1, #4
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	431a      	orrs	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	43db      	mvns	r3, r3
 8001022:	401a      	ands	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3301      	adds	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	f47f af5e 	bne.w	8000ef8 <HAL_GPIO_DeInit+0x10>
  }
}
 800103c:	bf00      	nop
 800103e:	3724      	adds	r7, #36	; 0x24
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40010000 	.word	0x40010000
 800104c:	40010800 	.word	0x40010800
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40011000 	.word	0x40011000
 8001058:	40011400 	.word	0x40011400
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e26c      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8087 	beq.w	800118e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001080:	4b92      	ldr	r3, [pc, #584]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b04      	cmp	r3, #4
 800108a:	d00c      	beq.n	80010a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800108c:	4b8f      	ldr	r3, [pc, #572]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b08      	cmp	r3, #8
 8001096:	d112      	bne.n	80010be <HAL_RCC_OscConfig+0x5e>
 8001098:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a4:	d10b      	bne.n	80010be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a6:	4b89      	ldr	r3, [pc, #548]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d06c      	beq.n	800118c <HAL_RCC_OscConfig+0x12c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d168      	bne.n	800118c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e246      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x76>
 80010c8:	4a80      	ldr	r2, [pc, #512]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010ca:	4b80      	ldr	r3, [pc, #512]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e02e      	b.n	8001134 <HAL_RCC_OscConfig+0xd4>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x98>
 80010de:	4a7b      	ldr	r2, [pc, #492]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010e0:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4a78      	ldr	r2, [pc, #480]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010ec:	4b77      	ldr	r3, [pc, #476]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e01d      	b.n	8001134 <HAL_RCC_OscConfig+0xd4>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0xbc>
 8001102:	4a72      	ldr	r2, [pc, #456]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001104:	4b71      	ldr	r3, [pc, #452]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4a6f      	ldr	r2, [pc, #444]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001110:	4b6e      	ldr	r3, [pc, #440]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0xd4>
 800111c:	4a6b      	ldr	r2, [pc, #428]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800111e:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4a68      	ldr	r2, [pc, #416]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800112a:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fbb8 	bl	80008b0 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fbb4 	bl	80008b0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1fa      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0xe4>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fba4 	bl	80008b0 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fba0 	bl	80008b0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1e6      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x10c>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d063      	beq.n	8001262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011a6:	4b49      	ldr	r3, [pc, #292]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d11c      	bne.n	80011ec <HAL_RCC_OscConfig+0x18c>
 80011b2:	4b46      	ldr	r3, [pc, #280]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d116      	bne.n	80011ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011be:	4b43      	ldr	r3, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x176>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e1ba      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	493d      	ldr	r1, [pc, #244]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	e03a      	b.n	8001262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_RCC_OscConfig+0x270>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb59 	bl	80008b0 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fb55 	bl	80008b0 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e19b      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	492a      	ldr	r1, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	e015      	b.n	8001262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_RCC_OscConfig+0x270>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fb38 	bl	80008b0 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001244:	f7ff fb34 	bl	80008b0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e17a      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d03a      	beq.n	80012e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d019      	beq.n	80012aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_RCC_OscConfig+0x274>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fb18 	bl	80008b0 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fb14 	bl	80008b0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e15a      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 fada 	bl	800185c <RCC_Delay>
 80012a8:	e01c      	b.n	80012e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_RCC_OscConfig+0x274>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fafe 	bl	80008b0 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b6:	e00f      	b.n	80012d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fafa 	bl	80008b0 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d908      	bls.n	80012d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e140      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	42420000 	.word	0x42420000
 80012d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b9e      	ldr	r3, [pc, #632]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e9      	bne.n	80012b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a6 	beq.w	800143e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b97      	ldr	r3, [pc, #604]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4a94      	ldr	r2, [pc, #592]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	4b93      	ldr	r3, [pc, #588]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b91      	ldr	r3, [pc, #580]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b8e      	ldr	r3, [pc, #568]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132a:	4a8b      	ldr	r2, [pc, #556]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800132c:	4b8a      	ldr	r3, [pc, #552]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fabb 	bl	80008b0 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fab7 	bl	80008b0 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e0fd      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b81      	ldr	r3, [pc, #516]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x312>
 8001364:	4a7b      	ldr	r2, [pc, #492]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001366:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	e02d      	b.n	80013ce <HAL_RCC_OscConfig+0x36e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x334>
 800137a:	4a76      	ldr	r2, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	4b75      	ldr	r3, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6213      	str	r3, [r2, #32]
 8001386:	4a73      	ldr	r2, [pc, #460]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	6213      	str	r3, [r2, #32]
 8001392:	e01c      	b.n	80013ce <HAL_RCC_OscConfig+0x36e>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x356>
 800139c:	4a6d      	ldr	r2, [pc, #436]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 800139e:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	4a6a      	ldr	r2, [pc, #424]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	4b6a      	ldr	r3, [pc, #424]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	e00b      	b.n	80013ce <HAL_RCC_OscConfig+0x36e>
 80013b6:	4a67      	ldr	r2, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	4a64      	ldr	r2, [pc, #400]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d015      	beq.n	8001402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fa6b 	bl	80008b0 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fa67 	bl	80008b0 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0ab      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ee      	beq.n	80013de <HAL_RCC_OscConfig+0x37e>
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fa55 	bl	80008b0 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff fa51 	bl	80008b0 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e095      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ee      	bne.n	800140a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d105      	bne.n	800143e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8081 	beq.w	800154a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001448:	4b42      	ldr	r3, [pc, #264]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d061      	beq.n	8001518 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d146      	bne.n	80014ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_RCC_OscConfig+0x4fc>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fa25 	bl	80008b0 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fa21 	bl	80008b0 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e067      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d108      	bne.n	80014a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001492:	4930      	ldr	r1, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a4:	482b      	ldr	r0, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a19      	ldr	r1, [r3, #32]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	430b      	orrs	r3, r1
 80014b8:	4313      	orrs	r3, r2
 80014ba:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_OscConfig+0x4fc>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff f9f5 	bl	80008b0 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff f9f1 	bl	80008b0 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e037      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x46a>
 80014e8:	e02f      	b.n	800154a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_RCC_OscConfig+0x4fc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff f9de 	bl	80008b0 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff f9da 	bl	80008b0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e020      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x498>
 8001516:	e018      	b.n	800154a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e013      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	429a      	cmp	r2, r3
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	40007000 	.word	0x40007000
 800155c:	42420060 	.word	0x42420060

08001560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0d0      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b6a      	ldr	r3, [pc, #424]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d210      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4967      	ldr	r1, [pc, #412]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 0207 	bic.w	r2, r3, #7
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0207 	and.w	r2, r3, #7
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4a59      	ldr	r2, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4a53      	ldr	r2, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4950      	ldr	r1, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d040      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d115      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e073      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e06b      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4939      	ldr	r1, [pc, #228]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 0203 	bic.w	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff f92e 	bl	80008b0 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff f92a 	bl	80008b0 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e053      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0207 	and.w	r2, r3, #7
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d910      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4924      	ldr	r1, [pc, #144]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 0207 	bic.w	r2, r3, #7
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0207 	and.w	r2, r3, #7
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4919      	ldr	r1, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016da:	4912      	ldr	r1, [pc, #72]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f821 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 80016f2:	4601      	mov	r1, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	fa21 f303 	lsr.w	r3, r1, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1cc>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1d0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f88c 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000
 8001724:	40021000 	.word	0x40021000
 8001728:	080020c8 	.word	0x080020c8
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	b490      	push	{r4, r7}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800173c:	1d3c      	adds	r4, r7, #4
 800173e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d002      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x40>
 800176e:	2b08      	cmp	r3, #8
 8001770:	d003      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x46>
 8001772:	e02d      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001776:	623b      	str	r3, [r7, #32]
      break;
 8001778:	e02d      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	0c9b      	lsrs	r3, r3, #18
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001786:	4413      	add	r3, r2
 8001788:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800178c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0c5b      	lsrs	r3, r3, #17
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017a6:	4413      	add	r3, r2
 80017a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b2:	fb02 f203 	mul.w	r2, r2, r3
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
 80017be:	e004      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	623b      	str	r3, [r7, #32]
      break;
 80017ce:	e002      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d2:	623b      	str	r3, [r7, #32]
      break;
 80017d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc90      	pop	{r4, r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	080020b4 	.word	0x080020b4
 80017e8:	080020c4 	.word	0x080020c4
 80017ec:	40021000 	.word	0x40021000
 80017f0:	007a1200 	.word	0x007a1200
 80017f4:	003d0900 	.word	0x003d0900

080017f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001810:	f7ff fff2 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001814:	4601      	mov	r1, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	080020d8 	.word	0x080020d8

08001834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001838:	f7ff ffde 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 800183c:	4601      	mov	r1, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	0adb      	lsrs	r3, r3, #11
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	080020d8 	.word	0x080020d8

0800185c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <RCC_Delay+0x34>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <RCC_Delay+0x38>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0a5b      	lsrs	r3, r3, #9
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001878:	bf00      	nop
  }
  while (Delay --);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1e5a      	subs	r2, r3, #1
 800187e:	60fa      	str	r2, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f9      	bne.n	8001878 <RCC_Delay+0x1c>
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	10624dd3 	.word	0x10624dd3

08001898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e03f      	b.n	800192a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe ff16 	bl	80006f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	68d2      	ldr	r2, [r2, #12]
 80018d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 facd 	bl	8001e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	6912      	ldr	r2, [r2, #16]
 80018ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	6952      	ldr	r2, [r2, #20]
 80018fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	68d2      	ldr	r2, [r2, #12]
 800190c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2220      	movs	r2, #32
 8001924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e01e      	b.n	8001982 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	68d2      	ldr	r2, [r2, #12]
 8001956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800195a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7fe ff13 	bl	8000788 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	4613      	mov	r3, r2
 8001996:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d140      	bne.n	8001a26 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_UART_Receive_IT+0x26>
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e039      	b.n	8001a28 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_UART_Receive_IT+0x38>
 80019be:	2302      	movs	r3, #2
 80019c0:	e032      	b.n	8001a28 <HAL_UART_Receive_IT+0x9e>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2222      	movs	r2, #34	; 0x22
 80019e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	68d2      	ldr	r2, [r2, #12]
 80019fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a00:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	6952      	ldr	r2, [r2, #20]
 8001a0c:	f042 0201 	orr.w	r2, r2, #1
 8001a10:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	68d2      	ldr	r2, [r2, #12]
 8001a1c:	f042 0220 	orr.w	r2, r2, #32
 8001a20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10d      	bne.n	8001a86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_UART_IRQHandler+0x52>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f97a 	bl	8001d78 <UART_Receive_IT>
      return;
 8001a84:	e0cc      	b.n	8001c20 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80ab 	beq.w	8001be4 <HAL_UART_IRQHandler+0x1b0>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_UART_IRQHandler+0x70>
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80a0 	beq.w	8001be4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_UART_IRQHandler+0x90>
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00a      	beq.n	8001ae4 <HAL_UART_IRQHandler+0xb0>
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	f043 0202 	orr.w	r2, r3, #2
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00a      	beq.n	8001b04 <HAL_UART_IRQHandler+0xd0>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	f043 0204 	orr.w	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <HAL_UART_IRQHandler+0xf0>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	f043 0208 	orr.w	r2, r3, #8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d078      	beq.n	8001c1e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_UART_IRQHandler+0x112>
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f919 	bl	8001d78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <HAL_UART_IRQHandler+0x13a>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d031      	beq.n	8001bd2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f865 	bl	8001c3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d023      	beq.n	8001bca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	6952      	ldr	r2, [r2, #20]
 8001b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d013      	beq.n	8001bc2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_UART_IRQHandler+0x1f4>)
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe ffc8 	bl	8000b3c <HAL_DMA_Abort_IT>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc0:	e00e      	b.n	8001be0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fd72 	bl	80006ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc8:	e00a      	b.n	8001be0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fd6e 	bl	80006ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bd0:	e006      	b.n	8001be0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fd6a 	bl	80006ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001bde:	e01e      	b.n	8001c1e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001be0:	bf00      	nop
    return;
 8001be2:	e01c      	b.n	8001c1e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_UART_IRQHandler+0x1cc>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f851 	bl	8001ca0 <UART_Transmit_IT>
    return;
 8001bfe:	e00f      	b.n	8001c20 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00a      	beq.n	8001c20 <HAL_UART_IRQHandler+0x1ec>
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f897 	bl	8001d48 <UART_EndTransmit_IT>
    return;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001c1e:	bf00      	nop
  }
}
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08001c79 	.word	0x08001c79

08001c2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	68d2      	ldr	r2, [r2, #12]
 8001c50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	6952      	ldr	r2, [r2, #20]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7fe fd0a 	bl	80006ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b21      	cmp	r3, #33	; 0x21
 8001cb2:	d143      	bne.n	8001d3c <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbc:	d119      	bne.n	8001cf2 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	8812      	ldrh	r2, [r2, #0]
 8001ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cd0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	1c9a      	adds	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	621a      	str	r2, [r3, #32]
 8001ce4:	e00e      	b.n	8001d04 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	621a      	str	r2, [r3, #32]
 8001cf0:	e008      	b.n	8001d04 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	1c58      	adds	r0, r3, #1
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6208      	str	r0, [r1, #32]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10f      	bne.n	8001d38 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	68d2      	ldr	r2, [r2, #12]
 8001d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e000      	b.n	8001d3e <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
  }
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	68d2      	ldr	r2, [r2, #12]
 8001d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff5f 	bl	8001c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b22      	cmp	r3, #34	; 0x22
 8001d8a:	d171      	bne.n	8001e70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d94:	d123      	bne.n	8001dde <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10e      	bne.n	8001dc2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	1c9a      	adds	r2, r3, #2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8001dc0:	e029      	b.n	8001e16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
 8001ddc:	e01b      	b.n	8001e16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6291      	str	r1, [r2, #40]	; 0x28
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	6852      	ldr	r2, [r2, #4]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e00c      	b.n	8001e16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	1c59      	adds	r1, r3, #1
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6291      	str	r1, [r2, #40]	; 0x28
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	6852      	ldr	r2, [r2, #4]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4619      	mov	r1, r3
 8001e24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d120      	bne.n	8001e6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	f022 0220 	bic.w	r2, r2, #32
 8001e38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	68d2      	ldr	r2, [r2, #12]
 8001e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	6952      	ldr	r2, [r2, #20]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fc10 	bl	8000688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e002      	b.n	8001e72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e000      	b.n	8001e72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001e70:	2302      	movs	r3, #2
  }
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	6912      	ldr	r2, [r2, #16]
 8001e8e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68d2      	ldr	r2, [r2, #12]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001eba:	f023 030c 	bic.w	r3, r3, #12
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	6952      	ldr	r2, [r2, #20]
 8001ece:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6992      	ldr	r2, [r2, #24]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a52      	ldr	r2, [pc, #328]	; (8002028 <UART_SetConfig+0x1ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d14e      	bne.n	8001f82 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ee4:	f7ff fca6 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 8001ee8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6819      	ldr	r1, [r3, #0]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009a      	lsls	r2, r3, #2
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	4a49      	ldr	r2, [pc, #292]	; (800202c <UART_SetConfig+0x1b0>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	0118      	lsls	r0, r3, #4
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009a      	lsls	r2, r3, #2
 8001f18:	441a      	add	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <UART_SetConfig+0x1b0>)
 8001f26:	fba3 4302 	umull	r4, r3, r3, r2
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2464      	movs	r4, #100	; 0x64
 8001f2e:	fb04 f303 	mul.w	r3, r4, r3
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	3332      	adds	r3, #50	; 0x32
 8001f38:	4a3c      	ldr	r2, [pc, #240]	; (800202c <UART_SetConfig+0x1b0>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f44:	4418      	add	r0, r3
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009a      	lsls	r2, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f5c:	4b33      	ldr	r3, [pc, #204]	; (800202c <UART_SetConfig+0x1b0>)
 8001f5e:	fba3 4302 	umull	r4, r3, r3, r2
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2464      	movs	r4, #100	; 0x64
 8001f66:	fb04 f303 	mul.w	r3, r4, r3
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	3332      	adds	r3, #50	; 0x32
 8001f70:	4a2e      	ldr	r2, [pc, #184]	; (800202c <UART_SetConfig+0x1b0>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	4403      	add	r3, r0
 8001f7e:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001f80:	e04d      	b.n	800201e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f82:	f7ff fc43 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8001f86:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	009a      	lsls	r2, r3, #2
 8001f96:	441a      	add	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <UART_SetConfig+0x1b0>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	0118      	lsls	r0, r3, #4
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009a      	lsls	r2, r3, #2
 8001fb6:	441a      	add	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <UART_SetConfig+0x1b0>)
 8001fc4:	fba3 4302 	umull	r4, r3, r3, r2
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	2464      	movs	r4, #100	; 0x64
 8001fcc:	fb04 f303 	mul.w	r3, r4, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	3332      	adds	r3, #50	; 0x32
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <UART_SetConfig+0x1b0>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe2:	4418      	add	r0, r3
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	009a      	lsls	r2, r3, #2
 8001fee:	441a      	add	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <UART_SetConfig+0x1b0>)
 8001ffc:	fba3 4302 	umull	r4, r3, r3, r2
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	2464      	movs	r4, #100	; 0x64
 8002004:	fb04 f303 	mul.w	r3, r4, r3
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	3332      	adds	r3, #50	; 0x32
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <UART_SetConfig+0x1b0>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4403      	add	r3, r0
 800201c:	608b      	str	r3, [r1, #8]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	40013800 	.word	0x40013800
 800202c:	51eb851f 	.word	0x51eb851f

08002030 <main>:
 */


#include "main.h"

int main(void){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  hwInit();
 8002034:	f7fe fbd2 	bl	80007dc <hwInit>
  apInit();
 8002038:	f7fe f888 	bl	800014c <apInit>
 800203c:	2300      	movs	r3, #0

  //apMain();
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <__libc_init_array>:
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	2500      	movs	r5, #0
 8002048:	4e0c      	ldr	r6, [pc, #48]	; (800207c <__libc_init_array+0x38>)
 800204a:	4c0d      	ldr	r4, [pc, #52]	; (8002080 <__libc_init_array+0x3c>)
 800204c:	1ba4      	subs	r4, r4, r6
 800204e:	10a4      	asrs	r4, r4, #2
 8002050:	42a5      	cmp	r5, r4
 8002052:	d109      	bne.n	8002068 <__libc_init_array+0x24>
 8002054:	f000 f822 	bl	800209c <_init>
 8002058:	2500      	movs	r5, #0
 800205a:	4e0a      	ldr	r6, [pc, #40]	; (8002084 <__libc_init_array+0x40>)
 800205c:	4c0a      	ldr	r4, [pc, #40]	; (8002088 <__libc_init_array+0x44>)
 800205e:	1ba4      	subs	r4, r4, r6
 8002060:	10a4      	asrs	r4, r4, #2
 8002062:	42a5      	cmp	r5, r4
 8002064:	d105      	bne.n	8002072 <__libc_init_array+0x2e>
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800206c:	4798      	blx	r3
 800206e:	3501      	adds	r5, #1
 8002070:	e7ee      	b.n	8002050 <__libc_init_array+0xc>
 8002072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002076:	4798      	blx	r3
 8002078:	3501      	adds	r5, #1
 800207a:	e7f2      	b.n	8002062 <__libc_init_array+0x1e>
 800207c:	080020e0 	.word	0x080020e0
 8002080:	080020e0 	.word	0x080020e0
 8002084:	080020e0 	.word	0x080020e0
 8002088:	080020e4 	.word	0x080020e4

0800208c <memset>:
 800208c:	4603      	mov	r3, r0
 800208e:	4402      	add	r2, r0
 8002090:	4293      	cmp	r3, r2
 8002092:	d100      	bne.n	8002096 <memset+0xa>
 8002094:	4770      	bx	lr
 8002096:	f803 1b01 	strb.w	r1, [r3], #1
 800209a:	e7f9      	b.n	8002090 <memset+0x4>

0800209c <_init>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	bf00      	nop
 80020a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a2:	bc08      	pop	{r3}
 80020a4:	469e      	mov	lr, r3
 80020a6:	4770      	bx	lr

080020a8 <_fini>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	bf00      	nop
 80020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ae:	bc08      	pop	{r3}
 80020b0:	469e      	mov	lr, r3
 80020b2:	4770      	bx	lr
